
ADC_usb_with_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006468  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006574  08006574  00016574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065fc  080065fc  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  080065fc  080065fc  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080065fc  080065fc  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065fc  080065fc  000165fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006600  08006600  00016600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08006604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f0  2000017c  08006780  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a6c  08006780  00020a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ced  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f87  00000000  00000000  00032e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c78  00000000  00000000  00035e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b00  00000000  00000000  00036a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016d69  00000000  00000000  00037598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db5c  00000000  00000000  0004e301  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000724d4  00000000  00000000  0005be5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ce331  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000308c  00000000  00000000  000ce3ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000017c 	.word	0x2000017c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800655c 	.word	0x0800655c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000180 	.word	0x20000180
 8000148:	0800655c 	.word	0x0800655c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	f5ad 6d7b 	sub.w	sp, sp, #4016	; 0xfb0
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fa76 	bl	8000644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f854 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f90c 	bl	8000378 <MX_GPIO_Init>
  MX_DMA_Init();
 8000160:	f000 f8ec 	bl	800033c <MX_DMA_Init>
  MX_ADC1_Init();
 8000164:	f000 f8ac 	bl	80002c0 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000168:	f005 fd3c 	bl	8005be4 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t bufferForReciving[1000];
  for(int i = 0; i < 1000; i++) {
 800016c:	2300      	movs	r3, #0
 800016e:	f8c7 3fac 	str.w	r3, [r7, #4012]	; 0xfac
 8000172:	e00a      	b.n	800018a <main+0x3e>
	  bufferForReciving[i] = 0;
 8000174:	1d3b      	adds	r3, r7, #4
 8000176:	f8d7 2fac 	ldr.w	r2, [r7, #4012]	; 0xfac
 800017a:	2100      	movs	r1, #0
 800017c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(int i = 0; i < 1000; i++) {
 8000180:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	; 0xfac
 8000184:	3301      	adds	r3, #1
 8000186:	f8c7 3fac 	str.w	r3, [r7, #4012]	; 0xfac
 800018a:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	; 0xfac
 800018e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000192:	dbef      	blt.n	8000174 <main+0x28>
  }
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000194:	481a      	ldr	r0, [pc, #104]	; (8000200 <main+0xb4>)
 8000196:	f000 ff21 	bl	8000fdc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc1);
 800019a:	4819      	ldr	r0, [pc, #100]	; (8000200 <main+0xb4>)
 800019c:	f000 fb8c 	bl	80008b8 <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc1, bufferForReciving, sizeof(bufferForReciving));
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80001a6:	4619      	mov	r1, r3
 80001a8:	4815      	ldr	r0, [pc, #84]	; (8000200 <main+0xb4>)
 80001aa:	f000 fc33 	bl	8000a14 <HAL_ADC_Start_DMA>
    uint8_t toSend[2];
    uint8_t forGet = 0;
 80001ae:	2300      	movs	r3, #0
 80001b0:	f887 3fa7 	strb.w	r3, [r7, #4007]	; 0xfa7
  while (1)
    {
    int i = 0;
 80001b4:	2300      	movs	r3, #0
 80001b6:	f8c7 3fa8 	str.w	r3, [r7, #4008]	; 0xfa8

  	while(i < 1000) {
 80001ba:	e01a      	b.n	80001f2 <main+0xa6>

  	  	  toSend[0] = bufferForReciving[i] >> 8;
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	f8d7 2fa8 	ldr.w	r2, [r7, #4008]	; 0xfa8
 80001c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001c6:	0a1b      	lsrs	r3, r3, #8
 80001c8:	b2da      	uxtb	r2, r3
 80001ca:	463b      	mov	r3, r7
 80001cc:	701a      	strb	r2, [r3, #0]
  		  toSend[1] = bufferForReciving[i];
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	f8d7 2fa8 	ldr.w	r2, [r7, #4008]	; 0xfa8
 80001d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	463b      	mov	r3, r7
 80001dc:	705a      	strb	r2, [r3, #1]
  		  CDC_Transmit_FS(toSend, 2);
 80001de:	463b      	mov	r3, r7
 80001e0:	2102      	movs	r1, #2
 80001e2:	4618      	mov	r0, r3
 80001e4:	f005 fdbc 	bl	8005d60 <CDC_Transmit_FS>
  		  i++;
 80001e8:	f8d7 3fa8 	ldr.w	r3, [r7, #4008]	; 0xfa8
 80001ec:	3301      	adds	r3, #1
 80001ee:	f8c7 3fa8 	str.w	r3, [r7, #4008]	; 0xfa8
  	while(i < 1000) {
 80001f2:	f8d7 3fa8 	ldr.w	r3, [r7, #4008]	; 0xfa8
 80001f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001fa:	dbdf      	blt.n	80001bc <main+0x70>
    {
 80001fc:	e7da      	b.n	80001b4 <main+0x68>
 80001fe:	bf00      	nop
 8000200:	200003bc 	.word	0x200003bc

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b094      	sub	sp, #80	; 0x50
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020e:	2228      	movs	r2, #40	; 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f006 f99a 	bl	800654c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	f107 0314 	add.w	r3, r7, #20
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000234:	2301      	movs	r3, #1
 8000236:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800023c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000242:	2301      	movs	r3, #1
 8000244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000250:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000254:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025a:	4618      	mov	r0, r3
 800025c:	f002 fa92 	bl	8002784 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000266:	f000 f8b5 	bl	80003d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2302      	movs	r3, #2
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2102      	movs	r1, #2
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fcfc 	bl	8002c84 <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000292:	f000 f89f 	bl	80003d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8000296:	2312      	movs	r3, #18
 8000298:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800029a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800029e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80002a0:	2300      	movs	r3, #0
 80002a2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 fe74 	bl	8002f94 <HAL_RCCEx_PeriphCLKConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002b2:	f000 f88f 	bl	80003d4 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3750      	adds	r7, #80	; 0x50
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002d0:	4b18      	ldr	r3, [pc, #96]	; (8000334 <MX_ADC1_Init+0x74>)
 80002d2:	4a19      	ldr	r2, [pc, #100]	; (8000338 <MX_ADC1_Init+0x78>)
 80002d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002d6:	4b17      	ldr	r3, [pc, #92]	; (8000334 <MX_ADC1_Init+0x74>)
 80002d8:	2200      	movs	r2, #0
 80002da:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002dc:	4b15      	ldr	r3, [pc, #84]	; (8000334 <MX_ADC1_Init+0x74>)
 80002de:	2201      	movs	r2, #1
 80002e0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e2:	4b14      	ldr	r3, [pc, #80]	; (8000334 <MX_ADC1_Init+0x74>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002e8:	4b12      	ldr	r3, [pc, #72]	; (8000334 <MX_ADC1_Init+0x74>)
 80002ea:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f0:	4b10      	ldr	r3, [pc, #64]	; (8000334 <MX_ADC1_Init+0x74>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002f6:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <MX_ADC1_Init+0x74>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002fc:	480d      	ldr	r0, [pc, #52]	; (8000334 <MX_ADC1_Init+0x74>)
 80002fe:	f000 fa03 	bl	8000708 <HAL_ADC_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000308:	f000 f864 	bl	80003d4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800030c:	2300      	movs	r3, #0
 800030e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000310:	2301      	movs	r3, #1
 8000312:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	4619      	mov	r1, r3
 800031c:	4805      	ldr	r0, [pc, #20]	; (8000334 <MX_ADC1_Init+0x74>)
 800031e:	f000 fc73 	bl	8000c08 <HAL_ADC_ConfigChannel>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000328:	f000 f854 	bl	80003d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800032c:	bf00      	nop
 800032e:	3710      	adds	r7, #16
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	200003bc 	.word	0x200003bc
 8000338:	40012400 	.word	0x40012400

0800033c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000342:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <MX_DMA_Init+0x38>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	4a0b      	ldr	r2, [pc, #44]	; (8000374 <MX_DMA_Init+0x38>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6153      	str	r3, [r2, #20]
 800034e:	4b09      	ldr	r3, [pc, #36]	; (8000374 <MX_DMA_Init+0x38>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800035a:	2200      	movs	r2, #0
 800035c:	2100      	movs	r1, #0
 800035e:	200b      	movs	r0, #11
 8000360:	f000 ffaf 	bl	80012c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000364:	200b      	movs	r0, #11
 8000366:	f000 ffc8 	bl	80012fa <HAL_NVIC_EnableIRQ>

}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40021000 	.word	0x40021000

08000378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800037e:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <MX_GPIO_Init+0x58>)
 8000380:	699b      	ldr	r3, [r3, #24]
 8000382:	4a13      	ldr	r2, [pc, #76]	; (80003d0 <MX_GPIO_Init+0x58>)
 8000384:	f043 0310 	orr.w	r3, r3, #16
 8000388:	6193      	str	r3, [r2, #24]
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_GPIO_Init+0x58>)
 800038c:	699b      	ldr	r3, [r3, #24]
 800038e:	f003 0310 	and.w	r3, r3, #16
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_GPIO_Init+0x58>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4a0d      	ldr	r2, [pc, #52]	; (80003d0 <MX_GPIO_Init+0x58>)
 800039c:	f043 0320 	orr.w	r3, r3, #32
 80003a0:	6193      	str	r3, [r2, #24]
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_GPIO_Init+0x58>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	f003 0320 	and.w	r3, r3, #32
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_GPIO_Init+0x58>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a07      	ldr	r2, [pc, #28]	; (80003d0 <MX_GPIO_Init+0x58>)
 80003b4:	f043 0304 	orr.w	r3, r3, #4
 80003b8:	6193      	str	r3, [r2, #24]
 80003ba:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <MX_GPIO_Init+0x58>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	f003 0304 	and.w	r3, r3, #4
 80003c2:	607b      	str	r3, [r7, #4]
 80003c4:	687b      	ldr	r3, [r7, #4]

}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	40021000 	.word	0x40021000

080003d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	bc80      	pop	{r7}
 80003de:	4770      	bx	lr

080003e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e6:	4b15      	ldr	r3, [pc, #84]	; (800043c <HAL_MspInit+0x5c>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4a14      	ldr	r2, [pc, #80]	; (800043c <HAL_MspInit+0x5c>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6193      	str	r3, [r2, #24]
 80003f2:	4b12      	ldr	r3, [pc, #72]	; (800043c <HAL_MspInit+0x5c>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fe:	4b0f      	ldr	r3, [pc, #60]	; (800043c <HAL_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	4a0e      	ldr	r2, [pc, #56]	; (800043c <HAL_MspInit+0x5c>)
 8000404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000408:	61d3      	str	r3, [r2, #28]
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <HAL_MspInit+0x5c>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <HAL_MspInit+0x60>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <HAL_MspInit+0x60>)
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000432:	bf00      	nop
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000
 8000440:	40010000 	.word	0x40010000

08000444 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a28      	ldr	r2, [pc, #160]	; (8000500 <HAL_ADC_MspInit+0xbc>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d149      	bne.n	80004f8 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000464:	4b27      	ldr	r3, [pc, #156]	; (8000504 <HAL_ADC_MspInit+0xc0>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a26      	ldr	r2, [pc, #152]	; (8000504 <HAL_ADC_MspInit+0xc0>)
 800046a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b24      	ldr	r3, [pc, #144]	; (8000504 <HAL_ADC_MspInit+0xc0>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800047c:	4b21      	ldr	r3, [pc, #132]	; (8000504 <HAL_ADC_MspInit+0xc0>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a20      	ldr	r2, [pc, #128]	; (8000504 <HAL_ADC_MspInit+0xc0>)
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b1e      	ldr	r3, [pc, #120]	; (8000504 <HAL_ADC_MspInit+0xc0>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0304 	and.w	r3, r3, #4
 8000490:	60bb      	str	r3, [r7, #8]
 8000492:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000494:	2301      	movs	r3, #1
 8000496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000498:	2303      	movs	r3, #3
 800049a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800049c:	f107 0310 	add.w	r3, r7, #16
 80004a0:	4619      	mov	r1, r3
 80004a2:	4819      	ldr	r0, [pc, #100]	; (8000508 <HAL_ADC_MspInit+0xc4>)
 80004a4:	f001 f932 	bl	800170c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80004a8:	4b18      	ldr	r3, [pc, #96]	; (800050c <HAL_ADC_MspInit+0xc8>)
 80004aa:	4a19      	ldr	r2, [pc, #100]	; (8000510 <HAL_ADC_MspInit+0xcc>)
 80004ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004ae:	4b17      	ldr	r3, [pc, #92]	; (800050c <HAL_ADC_MspInit+0xc8>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004b4:	4b15      	ldr	r3, [pc, #84]	; (800050c <HAL_ADC_MspInit+0xc8>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80004ba:	4b14      	ldr	r3, [pc, #80]	; (800050c <HAL_ADC_MspInit+0xc8>)
 80004bc:	2280      	movs	r2, #128	; 0x80
 80004be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <HAL_ADC_MspInit+0xc8>)
 80004c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004c8:	4b10      	ldr	r3, [pc, #64]	; (800050c <HAL_ADC_MspInit+0xc8>)
 80004ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80004d0:	4b0e      	ldr	r3, [pc, #56]	; (800050c <HAL_ADC_MspInit+0xc8>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80004d6:	4b0d      	ldr	r3, [pc, #52]	; (800050c <HAL_ADC_MspInit+0xc8>)
 80004d8:	2200      	movs	r2, #0
 80004da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80004dc:	480b      	ldr	r0, [pc, #44]	; (800050c <HAL_ADC_MspInit+0xc8>)
 80004de:	f000 ff27 	bl	8001330 <HAL_DMA_Init>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80004e8:	f7ff ff74 	bl	80003d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <HAL_ADC_MspInit+0xc8>)
 80004f0:	621a      	str	r2, [r3, #32]
 80004f2:	4a06      	ldr	r2, [pc, #24]	; (800050c <HAL_ADC_MspInit+0xc8>)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004f8:	bf00      	nop
 80004fa:	3720      	adds	r7, #32
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40012400 	.word	0x40012400
 8000504:	40021000 	.word	0x40021000
 8000508:	40010800 	.word	0x40010800
 800050c:	200003ec 	.word	0x200003ec
 8000510:	40020008 	.word	0x40020008

08000514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000524:	e7fe      	b.n	8000524 <HardFault_Handler+0x4>

08000526 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800052a:	e7fe      	b.n	800052a <MemManage_Handler+0x4>

0800052c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000530:	e7fe      	b.n	8000530 <BusFault_Handler+0x4>

08000532 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000536:	e7fe      	b.n	8000536 <UsageFault_Handler+0x4>

08000538 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr

08000544 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr

0800055c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000560:	f000 f8b6 	bl	80006d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}

08000568 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800056c:	4802      	ldr	r0, [pc, #8]	; (8000578 <DMA1_Channel1_IRQHandler+0x10>)
 800056e:	f000 ff99 	bl	80014a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200003ec 	.word	0x200003ec

0800057c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000582:	f001 fb24 	bl	8001bce <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	20000800 	.word	0x20000800

08000590 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <SystemInit+0x5c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a14      	ldr	r2, [pc, #80]	; (80005ec <SystemInit+0x5c>)
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <SystemInit+0x5c>)
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	4911      	ldr	r1, [pc, #68]	; (80005ec <SystemInit+0x5c>)
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <SystemInit+0x60>)
 80005a8:	4013      	ands	r3, r2
 80005aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <SystemInit+0x5c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <SystemInit+0x5c>)
 80005b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80005b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <SystemInit+0x5c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0a      	ldr	r2, [pc, #40]	; (80005ec <SystemInit+0x5c>)
 80005c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <SystemInit+0x5c>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	4a07      	ldr	r2, [pc, #28]	; (80005ec <SystemInit+0x5c>)
 80005ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80005d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <SystemInit+0x5c>)
 80005d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80005da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <SystemInit+0x64>)
 80005de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr
 80005ec:	40021000 	.word	0x40021000
 80005f0:	f8ff0000 	.word	0xf8ff0000
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005fa:	e003      	b.n	8000604 <LoopCopyDataInit>

080005fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005fc:	4b0b      	ldr	r3, [pc, #44]	; (800062c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000600:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000602:	3104      	adds	r1, #4

08000604 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000604:	480a      	ldr	r0, [pc, #40]	; (8000630 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000608:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800060a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800060c:	d3f6      	bcc.n	80005fc <CopyDataInit>
  ldr r2, =_sbss
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000610:	e002      	b.n	8000618 <LoopFillZerobss>

08000612 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000614:	f842 3b04 	str.w	r3, [r2], #4

08000618 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800061a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800061c:	d3f9      	bcc.n	8000612 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800061e:	f7ff ffb7 	bl	8000590 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000622:	f005 ff6f 	bl	8006504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000626:	f7ff fd91 	bl	800014c <main>
  bx lr
 800062a:	4770      	bx	lr
  ldr r3, =_sidata
 800062c:	08006604 	.word	0x08006604
  ldr r0, =_sdata
 8000630:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000634:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 8000638:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 800063c:	20000a6c 	.word	0x20000a6c

08000640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000640:	e7fe      	b.n	8000640 <ADC1_2_IRQHandler>
	...

08000644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <HAL_Init+0x28>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a07      	ldr	r2, [pc, #28]	; (800066c <HAL_Init+0x28>)
 800064e:	f043 0310 	orr.w	r3, r3, #16
 8000652:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000654:	2003      	movs	r0, #3
 8000656:	f000 fe29 	bl	80012ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800065a:	2000      	movs	r0, #0
 800065c:	f000 f808 	bl	8000670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000660:	f7ff febe 	bl	80003e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000664:	2300      	movs	r3, #0
}
 8000666:	4618      	mov	r0, r3
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40022000 	.word	0x40022000

08000670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <HAL_InitTick+0x54>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_InitTick+0x58>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	4619      	mov	r1, r3
 8000682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000686:	fbb3 f3f1 	udiv	r3, r3, r1
 800068a:	fbb2 f3f3 	udiv	r3, r2, r3
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fe41 	bl	8001316 <HAL_SYSTICK_Config>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800069a:	2301      	movs	r3, #1
 800069c:	e00e      	b.n	80006bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2b0f      	cmp	r3, #15
 80006a2:	d80a      	bhi.n	80006ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a4:	2200      	movs	r2, #0
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	f04f 30ff 	mov.w	r0, #4294967295
 80006ac:	f000 fe09 	bl	80012c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b0:	4a06      	ldr	r2, [pc, #24]	; (80006cc <HAL_InitTick+0x5c>)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006b6:	2300      	movs	r3, #0
 80006b8:	e000      	b.n	80006bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000008 	.word	0x20000008
 80006cc:	20000004 	.word	0x20000004

080006d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <HAL_IncTick+0x1c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <HAL_IncTick+0x20>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4413      	add	r3, r2
 80006e0:	4a03      	ldr	r2, [pc, #12]	; (80006f0 <HAL_IncTick+0x20>)
 80006e2:	6013      	str	r3, [r2, #0]
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	20000008 	.word	0x20000008
 80006f0:	20000430 	.word	0x20000430

080006f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return uwTick;
 80006f8:	4b02      	ldr	r3, [pc, #8]	; (8000704 <HAL_GetTick+0x10>)
 80006fa:	681b      	ldr	r3, [r3, #0]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	20000430 	.word	0x20000430

08000708 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000710:	2300      	movs	r3, #0
 8000712:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000714:	2300      	movs	r3, #0
 8000716:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800071c:	2300      	movs	r3, #0
 800071e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d101      	bne.n	800072a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
 8000728:	e0be      	b.n	80008a8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000734:	2b00      	cmp	r3, #0
 8000736:	d109      	bne.n	800074c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2200      	movs	r2, #0
 800073c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2200      	movs	r2, #0
 8000742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f7ff fe7c 	bl	8000444 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 fba5 	bl	8000e9c <ADC_ConversionStop_Disable>
 8000752:	4603      	mov	r3, r0
 8000754:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800075a:	f003 0310 	and.w	r3, r3, #16
 800075e:	2b00      	cmp	r3, #0
 8000760:	f040 8099 	bne.w	8000896 <HAL_ADC_Init+0x18e>
 8000764:	7dfb      	ldrb	r3, [r7, #23]
 8000766:	2b00      	cmp	r3, #0
 8000768:	f040 8095 	bne.w	8000896 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000770:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000774:	f023 0302 	bic.w	r3, r3, #2
 8000778:	f043 0202 	orr.w	r2, r3, #2
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000788:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	7b1b      	ldrb	r3, [r3, #12]
 800078e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000790:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	4313      	orrs	r3, r2
 8000796:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007a0:	d003      	beq.n	80007aa <HAL_ADC_Init+0xa2>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d102      	bne.n	80007b0 <HAL_ADC_Init+0xa8>
 80007aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ae:	e000      	b.n	80007b2 <HAL_ADC_Init+0xaa>
 80007b0:	2300      	movs	r3, #0
 80007b2:	693a      	ldr	r2, [r7, #16]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7d1b      	ldrb	r3, [r3, #20]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d119      	bne.n	80007f4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	7b1b      	ldrb	r3, [r3, #12]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d109      	bne.n	80007dc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	035a      	lsls	r2, r3, #13
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	e00b      	b.n	80007f4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e0:	f043 0220 	orr.w	r2, r3, #32
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ec:	f043 0201 	orr.w	r2, r3, #1
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	430a      	orrs	r2, r1
 8000806:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	689a      	ldr	r2, [r3, #8]
 800080e:	4b28      	ldr	r3, [pc, #160]	; (80008b0 <HAL_ADC_Init+0x1a8>)
 8000810:	4013      	ands	r3, r2
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	6812      	ldr	r2, [r2, #0]
 8000816:	68b9      	ldr	r1, [r7, #8]
 8000818:	430b      	orrs	r3, r1
 800081a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000824:	d003      	beq.n	800082e <HAL_ADC_Init+0x126>
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d104      	bne.n	8000838 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	691b      	ldr	r3, [r3, #16]
 8000832:	3b01      	subs	r3, #1
 8000834:	051b      	lsls	r3, r3, #20
 8000836:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	430a      	orrs	r2, r1
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	689a      	ldr	r2, [r3, #8]
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <HAL_ADC_Init+0x1ac>)
 8000854:	4013      	ands	r3, r2
 8000856:	68ba      	ldr	r2, [r7, #8]
 8000858:	429a      	cmp	r2, r3
 800085a:	d10b      	bne.n	8000874 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000866:	f023 0303 	bic.w	r3, r3, #3
 800086a:	f043 0201 	orr.w	r2, r3, #1
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000872:	e018      	b.n	80008a6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000878:	f023 0312 	bic.w	r3, r3, #18
 800087c:	f043 0210 	orr.w	r2, r3, #16
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000888:	f043 0201 	orr.w	r2, r3, #1
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000890:	2301      	movs	r3, #1
 8000892:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000894:	e007      	b.n	80008a6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800089a:	f043 0210 	orr.w	r2, r3, #16
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	ffe1f7fd 	.word	0xffe1f7fd
 80008b4:	ff1f0efe 	.word	0xff1f0efe

080008b8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008c0:	2300      	movs	r3, #0
 80008c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d101      	bne.n	80008d2 <HAL_ADC_Start+0x1a>
 80008ce:	2302      	movs	r3, #2
 80008d0:	e098      	b.n	8000a04 <HAL_ADC_Start+0x14c>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2201      	movs	r2, #1
 80008d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 fa8c 	bl	8000df8 <ADC_Enable>
 80008e0:	4603      	mov	r3, r0
 80008e2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f040 8087 	bne.w	80009fa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008f4:	f023 0301 	bic.w	r3, r3, #1
 80008f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a41      	ldr	r2, [pc, #260]	; (8000a0c <HAL_ADC_Start+0x154>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d105      	bne.n	8000916 <HAL_ADC_Start+0x5e>
 800090a:	4b41      	ldr	r3, [pc, #260]	; (8000a10 <HAL_ADC_Start+0x158>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000912:	2b00      	cmp	r3, #0
 8000914:	d115      	bne.n	8000942 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800091a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800092c:	2b00      	cmp	r3, #0
 800092e:	d026      	beq.n	800097e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000934:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000938:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000940:	e01d      	b.n	800097e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000946:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <HAL_ADC_Start+0x158>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d004      	beq.n	8000962 <HAL_ADC_Start+0xaa>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a2b      	ldr	r2, [pc, #172]	; (8000a0c <HAL_ADC_Start+0x154>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d10d      	bne.n	800097e <HAL_ADC_Start+0xc6>
 8000962:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <HAL_ADC_Start+0x158>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800096a:	2b00      	cmp	r3, #0
 800096c:	d007      	beq.n	800097e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000972:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000976:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000986:	2b00      	cmp	r3, #0
 8000988:	d006      	beq.n	8000998 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098e:	f023 0206 	bic.w	r2, r3, #6
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
 8000996:	e002      	b.n	800099e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f06f 0202 	mvn.w	r2, #2
 80009ae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80009ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80009be:	d113      	bne.n	80009e8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009c4:	4a11      	ldr	r2, [pc, #68]	; (8000a0c <HAL_ADC_Start+0x154>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d105      	bne.n	80009d6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <HAL_ADC_Start+0x158>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d108      	bne.n	80009e8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	689a      	ldr	r2, [r3, #8]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	e00c      	b.n	8000a02 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	689a      	ldr	r2, [r3, #8]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	e003      	b.n	8000a02 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	3710      	adds	r7, #16
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40012800 	.word	0x40012800
 8000a10:	40012400 	.word	0x40012400

08000a14 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a64      	ldr	r2, [pc, #400]	; (8000bbc <HAL_ADC_Start_DMA+0x1a8>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d004      	beq.n	8000a38 <HAL_ADC_Start_DMA+0x24>
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a63      	ldr	r2, [pc, #396]	; (8000bc0 <HAL_ADC_Start_DMA+0x1ac>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d106      	bne.n	8000a46 <HAL_ADC_Start_DMA+0x32>
 8000a38:	4b60      	ldr	r3, [pc, #384]	; (8000bbc <HAL_ADC_Start_DMA+0x1a8>)
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	f040 80b3 	bne.w	8000bac <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d101      	bne.n	8000a54 <HAL_ADC_Start_DMA+0x40>
 8000a50:	2302      	movs	r3, #2
 8000a52:	e0ae      	b.n	8000bb2 <HAL_ADC_Start_DMA+0x19e>
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2201      	movs	r2, #1
 8000a58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000a5c:	68f8      	ldr	r0, [r7, #12]
 8000a5e:	f000 f9cb 	bl	8000df8 <ADC_Enable>
 8000a62:	4603      	mov	r3, r0
 8000a64:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000a66:	7dfb      	ldrb	r3, [r7, #23]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	f040 809a 	bne.w	8000ba2 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000a76:	f023 0301 	bic.w	r3, r3, #1
 8000a7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a4e      	ldr	r2, [pc, #312]	; (8000bc0 <HAL_ADC_Start_DMA+0x1ac>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d105      	bne.n	8000a98 <HAL_ADC_Start_DMA+0x84>
 8000a8c:	4b4b      	ldr	r3, [pc, #300]	; (8000bbc <HAL_ADC_Start_DMA+0x1a8>)
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d115      	bne.n	8000ac4 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d026      	beq.n	8000b00 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000aba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ac2:	e01d      	b.n	8000b00 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a39      	ldr	r2, [pc, #228]	; (8000bbc <HAL_ADC_Start_DMA+0x1a8>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d004      	beq.n	8000ae4 <HAL_ADC_Start_DMA+0xd0>
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a38      	ldr	r2, [pc, #224]	; (8000bc0 <HAL_ADC_Start_DMA+0x1ac>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d10d      	bne.n	8000b00 <HAL_ADC_Start_DMA+0xec>
 8000ae4:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <HAL_ADC_Start_DMA+0x1a8>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d007      	beq.n	8000b00 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000af8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d006      	beq.n	8000b1a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b10:	f023 0206 	bic.w	r2, r3, #6
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b18:	e002      	b.n	8000b20 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2200      	movs	r2, #0
 8000b24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	6a1b      	ldr	r3, [r3, #32]
 8000b2c:	4a25      	ldr	r2, [pc, #148]	; (8000bc4 <HAL_ADC_Start_DMA+0x1b0>)
 8000b2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	6a1b      	ldr	r3, [r3, #32]
 8000b34:	4a24      	ldr	r2, [pc, #144]	; (8000bc8 <HAL_ADC_Start_DMA+0x1b4>)
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	6a1b      	ldr	r3, [r3, #32]
 8000b3c:	4a23      	ldr	r2, [pc, #140]	; (8000bcc <HAL_ADC_Start_DMA+0x1b8>)
 8000b3e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f06f 0202 	mvn.w	r2, #2
 8000b48:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	689a      	ldr	r2, [r3, #8]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b58:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6a18      	ldr	r0, [r3, #32]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	334c      	adds	r3, #76	; 0x4c
 8000b64:	4619      	mov	r1, r3
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f000 fc3b 	bl	80013e4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b78:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b7c:	d108      	bne.n	8000b90 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b8c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000b8e:	e00f      	b.n	8000bb0 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b9e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000ba0:	e006      	b.n	8000bb0 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000baa:	e001      	b.n	8000bb0 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40012400 	.word	0x40012400
 8000bc0:	40012800 	.word	0x40012800
 8000bc4:	08000f11 	.word	0x08000f11
 8000bc8:	08000f8d 	.word	0x08000f8d
 8000bcc:	08000fa9 	.word	0x08000fa9

08000bd0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
	...

08000c08 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d101      	bne.n	8000c28 <HAL_ADC_ConfigChannel+0x20>
 8000c24:	2302      	movs	r3, #2
 8000c26:	e0dc      	b.n	8000de2 <HAL_ADC_ConfigChannel+0x1da>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2b06      	cmp	r3, #6
 8000c36:	d81c      	bhi.n	8000c72 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	4613      	mov	r3, r2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	4413      	add	r3, r2
 8000c48:	3b05      	subs	r3, #5
 8000c4a:	221f      	movs	r2, #31
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	4019      	ands	r1, r3
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	4613      	mov	r3, r2
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	3b05      	subs	r3, #5
 8000c64:	fa00 f203 	lsl.w	r2, r0, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c70:	e03c      	b.n	8000cec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	2b0c      	cmp	r3, #12
 8000c78:	d81c      	bhi.n	8000cb4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685a      	ldr	r2, [r3, #4]
 8000c84:	4613      	mov	r3, r2
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	3b23      	subs	r3, #35	; 0x23
 8000c8c:	221f      	movs	r2, #31
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	4019      	ands	r1, r3
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	6818      	ldr	r0, [r3, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685a      	ldr	r2, [r3, #4]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	4413      	add	r3, r2
 8000ca4:	3b23      	subs	r3, #35	; 0x23
 8000ca6:	fa00 f203 	lsl.w	r2, r0, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	631a      	str	r2, [r3, #48]	; 0x30
 8000cb2:	e01b      	b.n	8000cec <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	4413      	add	r3, r2
 8000cc4:	3b41      	subs	r3, #65	; 0x41
 8000cc6:	221f      	movs	r2, #31
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	4019      	ands	r1, r3
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	3b41      	subs	r3, #65	; 0x41
 8000ce0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b09      	cmp	r3, #9
 8000cf2:	d91c      	bls.n	8000d2e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	68d9      	ldr	r1, [r3, #12]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	4413      	add	r3, r2
 8000d04:	3b1e      	subs	r3, #30
 8000d06:	2207      	movs	r2, #7
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	4019      	ands	r1, r3
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	6898      	ldr	r0, [r3, #8]
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	4413      	add	r3, r2
 8000d1e:	3b1e      	subs	r3, #30
 8000d20:	fa00 f203 	lsl.w	r2, r0, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	e019      	b.n	8000d62 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	6919      	ldr	r1, [r3, #16]
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	2207      	movs	r2, #7
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	4019      	ands	r1, r3
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	6898      	ldr	r0, [r3, #8]
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4613      	mov	r3, r2
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	4413      	add	r3, r2
 8000d56:	fa00 f203 	lsl.w	r2, r0, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b10      	cmp	r3, #16
 8000d68:	d003      	beq.n	8000d72 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d6e:	2b11      	cmp	r3, #17
 8000d70:	d132      	bne.n	8000dd8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a1d      	ldr	r2, [pc, #116]	; (8000dec <HAL_ADC_ConfigChannel+0x1e4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d125      	bne.n	8000dc8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d126      	bne.n	8000dd8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d98:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b10      	cmp	r3, #16
 8000da0:	d11a      	bne.n	8000dd8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000da8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dac:	0c9a      	lsrs	r2, r3, #18
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000db8:	e002      	b.n	8000dc0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f9      	bne.n	8000dba <HAL_ADC_ConfigChannel+0x1b2>
 8000dc6:	e007      	b.n	8000dd8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dcc:	f043 0220 	orr.w	r2, r3, #32
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	40012400 	.word	0x40012400
 8000df0:	20000000 	.word	0x20000000
 8000df4:	431bde83 	.word	0x431bde83

08000df8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d039      	beq.n	8000e8a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689a      	ldr	r2, [r3, #8]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f042 0201 	orr.w	r2, r2, #1
 8000e24:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e26:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <ADC_Enable+0x9c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a1b      	ldr	r2, [pc, #108]	; (8000e98 <ADC_Enable+0xa0>)
 8000e2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e30:	0c9b      	lsrs	r3, r3, #18
 8000e32:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e34:	e002      	b.n	8000e3c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d1f9      	bne.n	8000e36 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e42:	f7ff fc57 	bl	80006f4 <HAL_GetTick>
 8000e46:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e48:	e018      	b.n	8000e7c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e4a:	f7ff fc53 	bl	80006f4 <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d911      	bls.n	8000e7c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	f043 0210 	orr.w	r2, r3, #16
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	f043 0201 	orr.w	r2, r3, #1
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e007      	b.n	8000e8c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d1df      	bne.n	8000e4a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000000 	.word	0x20000000
 8000e98:	431bde83 	.word	0x431bde83

08000e9c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d127      	bne.n	8000f06 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	689a      	ldr	r2, [r3, #8]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f022 0201 	bic.w	r2, r2, #1
 8000ec4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ec6:	f7ff fc15 	bl	80006f4 <HAL_GetTick>
 8000eca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ecc:	e014      	b.n	8000ef8 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000ece:	f7ff fc11 	bl	80006f4 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d90d      	bls.n	8000ef8 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee0:	f043 0210 	orr.w	r2, r3, #16
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	f043 0201 	orr.w	r2, r3, #1
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e007      	b.n	8000f08 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d0e3      	beq.n	8000ece <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d127      	bne.n	8000f7a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000f40:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000f44:	d115      	bne.n	8000f72 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d111      	bne.n	8000f72 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d105      	bne.n	8000f72 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6a:	f043 0201 	orr.w	r2, r3, #1
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f72:	68f8      	ldr	r0, [r7, #12]
 8000f74:	f7ff fe2c 	bl	8000bd0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000f78:	e004      	b.n	8000f84 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6a1b      	ldr	r3, [r3, #32]
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	4798      	blx	r3
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f98:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f7ff fe21 	bl	8000be2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000fa0:	bf00      	nop
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb4:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc6:	f043 0204 	orr.w	r2, r3, #4
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff fe10 	bl	8000bf4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d101      	bne.n	8000ffa <HAL_ADCEx_Calibration_Start+0x1e>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	e086      	b.n	8001108 <HAL_ADCEx_Calibration_Start+0x12c>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ff4a 	bl	8000e9c <ADC_ConversionStop_Disable>
 8001008:	4603      	mov	r3, r0
 800100a:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800100c:	7dfb      	ldrb	r3, [r7, #23]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d175      	bne.n	80010fe <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001016:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800101a:	f023 0302 	bic.w	r3, r3, #2
 800101e:	f043 0202 	orr.w	r2, r3, #2
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001026:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <HAL_ADCEx_Calibration_Start+0x134>)
 8001028:	681c      	ldr	r4, [r3, #0]
 800102a:	2002      	movs	r0, #2
 800102c:	f002 f868 	bl	8003100 <HAL_RCCEx_GetPeriphCLKFreq>
 8001030:	4603      	mov	r3, r0
 8001032:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001036:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001038:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800103a:	e002      	b.n	8001042 <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	3b01      	subs	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f9      	bne.n	800103c <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff fed5 	bl	8000df8 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f042 0208 	orr.w	r2, r2, #8
 800105c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800105e:	f7ff fb49 	bl	80006f4 <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001064:	e014      	b.n	8001090 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001066:	f7ff fb45 	bl	80006f4 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b0a      	cmp	r3, #10
 8001072:	d90d      	bls.n	8001090 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001078:	f023 0312 	bic.w	r3, r3, #18
 800107c:	f043 0210 	orr.w	r2, r3, #16
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e03b      	b.n	8001108 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1e3      	bne.n	8001066 <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f042 0204 	orr.w	r2, r2, #4
 80010ac:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80010ae:	f7ff fb21 	bl	80006f4 <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80010b4:	e014      	b.n	80010e0 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80010b6:	f7ff fb1d 	bl	80006f4 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b0a      	cmp	r3, #10
 80010c2:	d90d      	bls.n	80010e0 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c8:	f023 0312 	bic.w	r3, r3, #18
 80010cc:	f043 0210 	orr.w	r2, r3, #16
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e013      	b.n	8001108 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1e3      	bne.n	80010b6 <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f2:	f023 0303 	bic.w	r3, r3, #3
 80010f6:	f043 0201 	orr.w	r2, r3, #1
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001106:	7dfb      	ldrb	r3, [r7, #23]
}
 8001108:	4618      	mov	r0, r3
 800110a:	371c      	adds	r7, #28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd90      	pop	{r4, r7, pc}
 8001110:	20000000 	.word	0x20000000

08001114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001130:	4013      	ands	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800113c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001146:	4a04      	ldr	r2, [pc, #16]	; (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60d3      	str	r3, [r2, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <__NVIC_GetPriorityGrouping+0x18>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	f003 0307 	and.w	r3, r3, #7
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db0b      	blt.n	80011a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f003 021f 	and.w	r2, r3, #31
 8001190:	4906      	ldr	r1, [pc, #24]	; (80011ac <__NVIC_EnableIRQ+0x34>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	2001      	movs	r0, #1
 800119a:	fa00 f202 	lsl.w	r2, r0, r2
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	; (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	; (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	; 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3b01      	subs	r3, #1
 8001274:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001278:	d301      	bcc.n	800127e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127a:	2301      	movs	r3, #1
 800127c:	e00f      	b.n	800129e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <SysTick_Config+0x40>)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3b01      	subs	r3, #1
 8001284:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001286:	210f      	movs	r1, #15
 8001288:	f04f 30ff 	mov.w	r0, #4294967295
 800128c:	f7ff ff90 	bl	80011b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Config+0x40>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SysTick_Config+0x40>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ff2d 	bl	8001114 <__NVIC_SetPriorityGrouping>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
 80012ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d4:	f7ff ff42 	bl	800115c <__NVIC_GetPriorityGrouping>
 80012d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff90 	bl	8001204 <NVIC_EncodePriority>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff5f 	bl	80011b0 <__NVIC_SetPriority>
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff35 	bl	8001178 <__NVIC_EnableIRQ>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b082      	sub	sp, #8
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff ffa2 	bl	8001268 <SysTick_Config>
 8001324:	4603      	mov	r3, r0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
	...

08001330 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e043      	b.n	80013ce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	4b22      	ldr	r3, [pc, #136]	; (80013d8 <HAL_DMA_Init+0xa8>)
 800134e:	4413      	add	r3, r2
 8001350:	4a22      	ldr	r2, [pc, #136]	; (80013dc <HAL_DMA_Init+0xac>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	009a      	lsls	r2, r3, #2
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a1f      	ldr	r2, [pc, #124]	; (80013e0 <HAL_DMA_Init+0xb0>)
 8001362:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2202      	movs	r2, #2
 8001368:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800137a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800137e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001388:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001394:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr
 80013d8:	bffdfff8 	.word	0xbffdfff8
 80013dc:	cccccccd 	.word	0xcccccccd
 80013e0:	40020000 	.word	0x40020000

080013e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <HAL_DMA_Start_IT+0x20>
 8001400:	2302      	movs	r3, #2
 8001402:	e04a      	b.n	800149a <HAL_DMA_Start_IT+0xb6>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001412:	2b01      	cmp	r3, #1
 8001414:	d13a      	bne.n	800148c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2202      	movs	r2, #2
 800141a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	2200      	movs	r2, #0
 8001422:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0201 	bic.w	r2, r2, #1
 8001432:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	f000 f938 	bl	80016b0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	2b00      	cmp	r3, #0
 8001446:	d008      	beq.n	800145a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f042 020e 	orr.w	r2, r2, #14
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	e00f      	b.n	800147a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 0204 	bic.w	r2, r2, #4
 8001468:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f042 020a 	orr.w	r2, r2, #10
 8001478:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f042 0201 	orr.w	r2, r2, #1
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	e005      	b.n	8001498 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001494:	2302      	movs	r3, #2
 8001496:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001498:	7dfb      	ldrb	r3, [r7, #23]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	2204      	movs	r2, #4
 80014c2:	409a      	lsls	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d04f      	beq.n	800156c <HAL_DMA_IRQHandler+0xc8>
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d04a      	beq.n	800156c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0320 	and.w	r3, r3, #32
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d107      	bne.n	80014f4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0204 	bic.w	r2, r2, #4
 80014f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a66      	ldr	r2, [pc, #408]	; (8001694 <HAL_DMA_IRQHandler+0x1f0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d029      	beq.n	8001552 <HAL_DMA_IRQHandler+0xae>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a65      	ldr	r2, [pc, #404]	; (8001698 <HAL_DMA_IRQHandler+0x1f4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d022      	beq.n	800154e <HAL_DMA_IRQHandler+0xaa>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a63      	ldr	r2, [pc, #396]	; (800169c <HAL_DMA_IRQHandler+0x1f8>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d01a      	beq.n	8001548 <HAL_DMA_IRQHandler+0xa4>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a62      	ldr	r2, [pc, #392]	; (80016a0 <HAL_DMA_IRQHandler+0x1fc>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d012      	beq.n	8001542 <HAL_DMA_IRQHandler+0x9e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a60      	ldr	r2, [pc, #384]	; (80016a4 <HAL_DMA_IRQHandler+0x200>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d00a      	beq.n	800153c <HAL_DMA_IRQHandler+0x98>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a5f      	ldr	r2, [pc, #380]	; (80016a8 <HAL_DMA_IRQHandler+0x204>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d102      	bne.n	8001536 <HAL_DMA_IRQHandler+0x92>
 8001530:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001534:	e00e      	b.n	8001554 <HAL_DMA_IRQHandler+0xb0>
 8001536:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800153a:	e00b      	b.n	8001554 <HAL_DMA_IRQHandler+0xb0>
 800153c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001540:	e008      	b.n	8001554 <HAL_DMA_IRQHandler+0xb0>
 8001542:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001546:	e005      	b.n	8001554 <HAL_DMA_IRQHandler+0xb0>
 8001548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154c:	e002      	b.n	8001554 <HAL_DMA_IRQHandler+0xb0>
 800154e:	2340      	movs	r3, #64	; 0x40
 8001550:	e000      	b.n	8001554 <HAL_DMA_IRQHandler+0xb0>
 8001552:	2304      	movs	r3, #4
 8001554:	4a55      	ldr	r2, [pc, #340]	; (80016ac <HAL_DMA_IRQHandler+0x208>)
 8001556:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 8094 	beq.w	800168a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800156a:	e08e      	b.n	800168a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	2202      	movs	r2, #2
 8001572:	409a      	lsls	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d056      	beq.n	800162a <HAL_DMA_IRQHandler+0x186>
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d051      	beq.n	800162a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0320 	and.w	r3, r3, #32
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10b      	bne.n	80015ac <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 020a 	bic.w	r2, r2, #10
 80015a2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a38      	ldr	r2, [pc, #224]	; (8001694 <HAL_DMA_IRQHandler+0x1f0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d029      	beq.n	800160a <HAL_DMA_IRQHandler+0x166>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a37      	ldr	r2, [pc, #220]	; (8001698 <HAL_DMA_IRQHandler+0x1f4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d022      	beq.n	8001606 <HAL_DMA_IRQHandler+0x162>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a35      	ldr	r2, [pc, #212]	; (800169c <HAL_DMA_IRQHandler+0x1f8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d01a      	beq.n	8001600 <HAL_DMA_IRQHandler+0x15c>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a34      	ldr	r2, [pc, #208]	; (80016a0 <HAL_DMA_IRQHandler+0x1fc>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d012      	beq.n	80015fa <HAL_DMA_IRQHandler+0x156>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a32      	ldr	r2, [pc, #200]	; (80016a4 <HAL_DMA_IRQHandler+0x200>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d00a      	beq.n	80015f4 <HAL_DMA_IRQHandler+0x150>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a31      	ldr	r2, [pc, #196]	; (80016a8 <HAL_DMA_IRQHandler+0x204>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d102      	bne.n	80015ee <HAL_DMA_IRQHandler+0x14a>
 80015e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015ec:	e00e      	b.n	800160c <HAL_DMA_IRQHandler+0x168>
 80015ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015f2:	e00b      	b.n	800160c <HAL_DMA_IRQHandler+0x168>
 80015f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015f8:	e008      	b.n	800160c <HAL_DMA_IRQHandler+0x168>
 80015fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fe:	e005      	b.n	800160c <HAL_DMA_IRQHandler+0x168>
 8001600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001604:	e002      	b.n	800160c <HAL_DMA_IRQHandler+0x168>
 8001606:	2320      	movs	r3, #32
 8001608:	e000      	b.n	800160c <HAL_DMA_IRQHandler+0x168>
 800160a:	2302      	movs	r3, #2
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <HAL_DMA_IRQHandler+0x208>)
 800160e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d034      	beq.n	800168a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001628:	e02f      	b.n	800168a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	2208      	movs	r2, #8
 8001630:	409a      	lsls	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4013      	ands	r3, r2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d028      	beq.n	800168c <HAL_DMA_IRQHandler+0x1e8>
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	2b00      	cmp	r3, #0
 8001642:	d023      	beq.n	800168c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 020e 	bic.w	r2, r2, #14
 8001652:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800165c:	2101      	movs	r1, #1
 800165e:	fa01 f202 	lsl.w	r2, r1, r2
 8001662:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	2b00      	cmp	r3, #0
 8001680:	d004      	beq.n	800168c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	4798      	blx	r3
    }
  }
  return;
 800168a:	bf00      	nop
 800168c:	bf00      	nop
}
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40020008 	.word	0x40020008
 8001698:	4002001c 	.word	0x4002001c
 800169c:	40020030 	.word	0x40020030
 80016a0:	40020044 	.word	0x40020044
 80016a4:	40020058 	.word	0x40020058
 80016a8:	4002006c 	.word	0x4002006c
 80016ac:	40020000 	.word	0x40020000

080016b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c6:	2101      	movs	r1, #1
 80016c8:	fa01 f202 	lsl.w	r2, r1, r2
 80016cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b10      	cmp	r3, #16
 80016dc:	d108      	bne.n	80016f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80016ee:	e007      	b.n	8001700 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	60da      	str	r2, [r3, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
	...

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b08b      	sub	sp, #44	; 0x2c
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001716:	2300      	movs	r3, #0
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171e:	e127      	b.n	8001970 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001720:	2201      	movs	r2, #1
 8001722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	4013      	ands	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	429a      	cmp	r2, r3
 800173a:	f040 8116 	bne.w	800196a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b12      	cmp	r3, #18
 8001744:	d034      	beq.n	80017b0 <HAL_GPIO_Init+0xa4>
 8001746:	2b12      	cmp	r3, #18
 8001748:	d80d      	bhi.n	8001766 <HAL_GPIO_Init+0x5a>
 800174a:	2b02      	cmp	r3, #2
 800174c:	d02b      	beq.n	80017a6 <HAL_GPIO_Init+0x9a>
 800174e:	2b02      	cmp	r3, #2
 8001750:	d804      	bhi.n	800175c <HAL_GPIO_Init+0x50>
 8001752:	2b00      	cmp	r3, #0
 8001754:	d031      	beq.n	80017ba <HAL_GPIO_Init+0xae>
 8001756:	2b01      	cmp	r3, #1
 8001758:	d01c      	beq.n	8001794 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800175a:	e048      	b.n	80017ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800175c:	2b03      	cmp	r3, #3
 800175e:	d043      	beq.n	80017e8 <HAL_GPIO_Init+0xdc>
 8001760:	2b11      	cmp	r3, #17
 8001762:	d01b      	beq.n	800179c <HAL_GPIO_Init+0x90>
          break;
 8001764:	e043      	b.n	80017ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001766:	4a89      	ldr	r2, [pc, #548]	; (800198c <HAL_GPIO_Init+0x280>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d026      	beq.n	80017ba <HAL_GPIO_Init+0xae>
 800176c:	4a87      	ldr	r2, [pc, #540]	; (800198c <HAL_GPIO_Init+0x280>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d806      	bhi.n	8001780 <HAL_GPIO_Init+0x74>
 8001772:	4a87      	ldr	r2, [pc, #540]	; (8001990 <HAL_GPIO_Init+0x284>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d020      	beq.n	80017ba <HAL_GPIO_Init+0xae>
 8001778:	4a86      	ldr	r2, [pc, #536]	; (8001994 <HAL_GPIO_Init+0x288>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d01d      	beq.n	80017ba <HAL_GPIO_Init+0xae>
          break;
 800177e:	e036      	b.n	80017ee <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001780:	4a85      	ldr	r2, [pc, #532]	; (8001998 <HAL_GPIO_Init+0x28c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d019      	beq.n	80017ba <HAL_GPIO_Init+0xae>
 8001786:	4a85      	ldr	r2, [pc, #532]	; (800199c <HAL_GPIO_Init+0x290>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d016      	beq.n	80017ba <HAL_GPIO_Init+0xae>
 800178c:	4a84      	ldr	r2, [pc, #528]	; (80019a0 <HAL_GPIO_Init+0x294>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0xae>
          break;
 8001792:	e02c      	b.n	80017ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	623b      	str	r3, [r7, #32]
          break;
 800179a:	e028      	b.n	80017ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	3304      	adds	r3, #4
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e023      	b.n	80017ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	3308      	adds	r3, #8
 80017ac:	623b      	str	r3, [r7, #32]
          break;
 80017ae:	e01e      	b.n	80017ee <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	330c      	adds	r3, #12
 80017b6:	623b      	str	r3, [r7, #32]
          break;
 80017b8:	e019      	b.n	80017ee <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d102      	bne.n	80017c8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017c2:	2304      	movs	r3, #4
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e012      	b.n	80017ee <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d105      	bne.n	80017dc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017d0:	2308      	movs	r3, #8
 80017d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	611a      	str	r2, [r3, #16]
          break;
 80017da:	e008      	b.n	80017ee <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017dc:	2308      	movs	r3, #8
 80017de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	615a      	str	r2, [r3, #20]
          break;
 80017e6:	e002      	b.n	80017ee <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
          break;
 80017ec:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2bff      	cmp	r3, #255	; 0xff
 80017f2:	d801      	bhi.n	80017f8 <HAL_GPIO_Init+0xec>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	e001      	b.n	80017fc <HAL_GPIO_Init+0xf0>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3304      	adds	r3, #4
 80017fc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	2bff      	cmp	r3, #255	; 0xff
 8001802:	d802      	bhi.n	800180a <HAL_GPIO_Init+0xfe>
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	e002      	b.n	8001810 <HAL_GPIO_Init+0x104>
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	3b08      	subs	r3, #8
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	210f      	movs	r1, #15
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	401a      	ands	r2, r3
 8001822:	6a39      	ldr	r1, [r7, #32]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	431a      	orrs	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 8096 	beq.w	800196a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800183e:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_GPIO_Init+0x298>)
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	4a58      	ldr	r2, [pc, #352]	; (80019a4 <HAL_GPIO_Init+0x298>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6193      	str	r3, [r2, #24]
 800184a:	4b56      	ldr	r3, [pc, #344]	; (80019a4 <HAL_GPIO_Init+0x298>)
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
 8001854:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001856:	4a54      	ldr	r2, [pc, #336]	; (80019a8 <HAL_GPIO_Init+0x29c>)
 8001858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	3302      	adds	r3, #2
 800185e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001862:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	220f      	movs	r2, #15
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4013      	ands	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4b      	ldr	r2, [pc, #300]	; (80019ac <HAL_GPIO_Init+0x2a0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_GPIO_Init+0x19e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4a      	ldr	r2, [pc, #296]	; (80019b0 <HAL_GPIO_Init+0x2a4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00d      	beq.n	80018a6 <HAL_GPIO_Init+0x19a>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a49      	ldr	r2, [pc, #292]	; (80019b4 <HAL_GPIO_Init+0x2a8>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d007      	beq.n	80018a2 <HAL_GPIO_Init+0x196>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a48      	ldr	r2, [pc, #288]	; (80019b8 <HAL_GPIO_Init+0x2ac>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <HAL_GPIO_Init+0x192>
 800189a:	2303      	movs	r3, #3
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x1a0>
 800189e:	2304      	movs	r3, #4
 80018a0:	e004      	b.n	80018ac <HAL_GPIO_Init+0x1a0>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e002      	b.n	80018ac <HAL_GPIO_Init+0x1a0>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x1a0>
 80018aa:	2300      	movs	r3, #0
 80018ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ae:	f002 0203 	and.w	r2, r2, #3
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	4093      	lsls	r3, r2
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018bc:	493a      	ldr	r1, [pc, #232]	; (80019a8 <HAL_GPIO_Init+0x29c>)
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018d6:	4b39      	ldr	r3, [pc, #228]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4938      	ldr	r1, [pc, #224]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]
 80018e2:	e006      	b.n	80018f2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018e4:	4b35      	ldr	r3, [pc, #212]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	4933      	ldr	r1, [pc, #204]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018fe:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	492e      	ldr	r1, [pc, #184]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
 800190a:	e006      	b.n	800191a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800190c:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	43db      	mvns	r3, r3
 8001914:	4929      	ldr	r1, [pc, #164]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001916:	4013      	ands	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001926:	4b25      	ldr	r3, [pc, #148]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	4924      	ldr	r1, [pc, #144]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
 8001932:	e006      	b.n	8001942 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	43db      	mvns	r3, r3
 800193c:	491f      	ldr	r1, [pc, #124]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 800193e:	4013      	ands	r3, r2
 8001940:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d006      	beq.n	800195c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800194e:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	491a      	ldr	r1, [pc, #104]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	60cb      	str	r3, [r1, #12]
 800195a:	e006      	b.n	800196a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	43db      	mvns	r3, r3
 8001964:	4915      	ldr	r1, [pc, #84]	; (80019bc <HAL_GPIO_Init+0x2b0>)
 8001966:	4013      	ands	r3, r2
 8001968:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	3301      	adds	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001976:	fa22 f303 	lsr.w	r3, r2, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	f47f aed0 	bne.w	8001720 <HAL_GPIO_Init+0x14>
  }
}
 8001980:	bf00      	nop
 8001982:	372c      	adds	r7, #44	; 0x2c
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	10210000 	.word	0x10210000
 8001990:	10110000 	.word	0x10110000
 8001994:	10120000 	.word	0x10120000
 8001998:	10310000 	.word	0x10310000
 800199c:	10320000 	.word	0x10320000
 80019a0:	10220000 	.word	0x10220000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	40010800 	.word	0x40010800
 80019b0:	40010c00 	.word	0x40010c00
 80019b4:	40011000 	.word	0x40011000
 80019b8:	40011400 	.word	0x40011400
 80019bc:	40010400 	.word	0x40010400

080019c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c2:	b08b      	sub	sp, #44	; 0x2c
 80019c4:	af06      	add	r7, sp, #24
 80019c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e0d3      	b.n	8001b7a <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d106      	bne.n	80019ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f004 faee 	bl	8005fc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2203      	movs	r2, #3
 80019f0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f001 fc64 	bl	80032c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	687e      	ldr	r6, [r7, #4]
 8001a06:	466d      	mov	r5, sp
 8001a08:	f106 0410 	add.w	r4, r6, #16
 8001a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a10:	6823      	ldr	r3, [r4, #0]
 8001a12:	602b      	str	r3, [r5, #0]
 8001a14:	1d33      	adds	r3, r6, #4
 8001a16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f001 fc2d 	bl	8003278 <USB_CoreInit>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2202      	movs	r2, #2
 8001a28:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0a4      	b.n	8001b7a <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 fc61 	bl	80032fe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	e035      	b.n	8001aae <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	015b      	lsls	r3, r3, #5
 8001a48:	4413      	add	r3, r2
 8001a4a:	3329      	adds	r3, #41	; 0x29
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	015b      	lsls	r3, r3, #5
 8001a56:	4413      	add	r3, r2
 8001a58:	3328      	adds	r3, #40	; 0x28
 8001a5a:	7bfa      	ldrb	r2, [r7, #15]
 8001a5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	7bfa      	ldrb	r2, [r7, #15]
 8001a62:	b291      	uxth	r1, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	015b      	lsls	r3, r3, #5
 8001a68:	4413      	add	r3, r2
 8001a6a:	3336      	adds	r3, #54	; 0x36
 8001a6c:	460a      	mov	r2, r1
 8001a6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	015b      	lsls	r3, r3, #5
 8001a76:	4413      	add	r3, r2
 8001a78:	332b      	adds	r3, #43	; 0x2b
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	015b      	lsls	r3, r3, #5
 8001a84:	4413      	add	r3, r2
 8001a86:	3338      	adds	r3, #56	; 0x38
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	015b      	lsls	r3, r3, #5
 8001a92:	4413      	add	r3, r2
 8001a94:	333c      	adds	r3, #60	; 0x3c
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	015b      	lsls	r3, r3, #5
 8001aa2:	4413      	add	r3, r2
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	73fb      	strb	r3, [r7, #15]
 8001aae:	7bfa      	ldrb	r2, [r7, #15]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d3c4      	bcc.n	8001a42 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	73fb      	strb	r3, [r7, #15]
 8001abc:	e031      	b.n	8001b22 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	015b      	lsls	r3, r3, #5
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f203 1329 	addw	r3, r3, #297	; 0x129
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ace:	7bfb      	ldrb	r3, [r7, #15]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	015b      	lsls	r3, r3, #5
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	015b      	lsls	r3, r3, #5
 8001ae4:	4413      	add	r3, r2
 8001ae6:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	015b      	lsls	r3, r3, #5
 8001af4:	4413      	add	r3, r2
 8001af6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	015b      	lsls	r3, r3, #5
 8001b04:	4413      	add	r3, r2
 8001b06:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	330a      	adds	r3, #10
 8001b14:	015b      	lsls	r3, r3, #5
 8001b16:	4413      	add	r3, r2
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d3c8      	bcc.n	8001abe <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	687e      	ldr	r6, [r7, #4]
 8001b34:	466d      	mov	r5, sp
 8001b36:	f106 0410 	add.w	r4, r6, #16
 8001b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	602b      	str	r3, [r5, #0]
 8001b42:	1d33      	adds	r3, r6, #4
 8001b44:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b46:	6838      	ldr	r0, [r7, #0]
 8001b48:	f001 fbe5 	bl	8003316 <USB_DevInit>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2202      	movs	r2, #2
 8001b56:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00d      	b.n	8001b7a <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f002 fc23 	bl	80043be <USB_DevDisconnect>

  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3714      	adds	r7, #20
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b82 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b082      	sub	sp, #8
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d101      	bne.n	8001b98 <HAL_PCD_Start+0x16>
 8001b94:	2302      	movs	r3, #2
 8001b96:	e016      	b.n	8001bc6 <HAL_PCD_Start+0x44>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f004 fc77 	bl	8006496 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f002 fbfc 	bl	80043aa <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f001 fb6e 	bl	8003298 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 fbf9 	bl	80043d2 <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bea:	d102      	bne.n	8001bf2 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 faf3 	bl	80021d8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fbeb 	bl	80043d2 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c06:	d112      	bne.n	8001c2e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c1a:	b292      	uxth	r2, r2
 8001c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f004 fa46 	bl	80060b2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c26:	2100      	movs	r1, #0
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f000 f8de 	bl	8001dea <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 fbcd 	bl	80043d2 <USB_ReadInterrupts>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c42:	d10b      	bne.n	8001c5c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001c56:	b292      	uxth	r2, r2
 8001c58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 fbb6 	bl	80043d2 <USB_ReadInterrupts>
 8001c66:	4603      	mov	r3, r0
 8001c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c70:	d10b      	bne.n	8001c8a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c84:	b292      	uxth	r2, r2
 8001c86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 fb9f 	bl	80043d2 <USB_ReadInterrupts>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c9e:	d126      	bne.n	8001cee <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0204 	bic.w	r2, r2, #4
 8001cb2:	b292      	uxth	r2, r2
 8001cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0208 	bic.w	r2, r2, #8
 8001cca:	b292      	uxth	r2, r2
 8001ccc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f004 fa27 	bl	8006124 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ce8:	b292      	uxth	r2, r2
 8001cea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f002 fb6d 	bl	80043d2 <USB_ReadInterrupts>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d02:	d13d      	bne.n	8001d80 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0208 	orr.w	r2, r2, #8
 8001d16:	b292      	uxth	r2, r2
 8001d18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d2e:	b292      	uxth	r2, r2
 8001d30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0204 	orr.w	r2, r2, #4
 8001d46:	b292      	uxth	r2, r2
 8001d48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f002 fb3e 	bl	80043d2 <USB_ReadInterrupts>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d60:	d10b      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d74:	b292      	uxth	r2, r2
 8001d76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f004 f9b8 	bl	80060f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f002 fb24 	bl	80043d2 <USB_ReadInterrupts>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d94:	d10e      	bne.n	8001db4 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001da8:	b292      	uxth	r2, r2
 8001daa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f004 f971 	bl	8006096 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 fb0a 	bl	80043d2 <USB_ReadInterrupts>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dc8:	d10b      	bne.n	8001de2 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ddc:	b292      	uxth	r2, r2
 8001dde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_PCD_SetAddress+0x1a>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e013      	b.n	8001e2c <HAL_PCD_SetAddress+0x42>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	78fa      	ldrb	r2, [r7, #3]
 8001e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f002 fab1 	bl	8004384 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	4608      	mov	r0, r1
 8001e3e:	4611      	mov	r1, r2
 8001e40:	461a      	mov	r2, r3
 8001e42:	4603      	mov	r3, r0
 8001e44:	70fb      	strb	r3, [r7, #3]
 8001e46:	460b      	mov	r3, r1
 8001e48:	803b      	strh	r3, [r7, #0]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	da0b      	bge.n	8001e72 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	015b      	lsls	r3, r3, #5
 8001e62:	3328      	adds	r3, #40	; 0x28
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	4413      	add	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	705a      	strb	r2, [r3, #1]
 8001e70:	e00b      	b.n	8001e8a <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e72:	78fb      	ldrb	r3, [r7, #3]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	015b      	lsls	r3, r3, #5
 8001e7a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e96:	883a      	ldrh	r2, [r7, #0]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	78ba      	ldrb	r2, [r7, #2]
 8001ea0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	785b      	ldrb	r3, [r3, #1]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d004      	beq.n	8001eb4 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001eb4:	78bb      	ldrb	r3, [r7, #2]
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d102      	bne.n	8001ec0 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d101      	bne.n	8001ece <HAL_PCD_EP_Open+0x9a>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e00e      	b.n	8001eec <HAL_PCD_EP_Open+0xb8>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68f9      	ldr	r1, [r7, #12]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f001 fa3f 	bl	8003360 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001eea:	7afb      	ldrb	r3, [r7, #11]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	da0b      	bge.n	8001f20 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	015b      	lsls	r3, r3, #5
 8001f10:	3328      	adds	r3, #40	; 0x28
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	705a      	strb	r2, [r3, #1]
 8001f1e:	e00b      	b.n	8001f38 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	015b      	lsls	r3, r3, #5
 8001f28:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_PCD_EP_Close+0x5e>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e00e      	b.n	8001f70 <HAL_PCD_EP_Close+0x7c>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68f9      	ldr	r1, [r7, #12]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 fceb 	bl	800393c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	460b      	mov	r3, r1
 8001f86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f88:	7afb      	ldrb	r3, [r7, #11]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	015b      	lsls	r3, r3, #5
 8001f90:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fbe:	7afb      	ldrb	r3, [r7, #11]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d106      	bne.n	8001fd6 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6979      	ldr	r1, [r7, #20]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f001 fe4a 	bl	8003c68 <USB_EPStartXfer>
 8001fd4:	e005      	b.n	8001fe2 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6979      	ldr	r1, [r7, #20]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 fe43 	bl	8003c68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	330a      	adds	r3, #10
 8002002:	015b      	lsls	r3, r3, #5
 8002004:	4413      	add	r3, r2
 8002006:	3304      	adds	r3, #4
 8002008:	681b      	ldr	r3, [r3, #0]
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	460b      	mov	r3, r1
 8002022:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002024:	7afb      	ldrb	r3, [r7, #11]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	015b      	lsls	r3, r3, #5
 800202c:	3328      	adds	r3, #40	; 0x28
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4413      	add	r3, r2
 8002032:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2200      	movs	r2, #0
 8002044:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2201      	movs	r2, #1
 800204a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800204c:	7afb      	ldrb	r3, [r7, #11]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	b2da      	uxtb	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002058:	7afb      	ldrb	r3, [r7, #11]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	2b00      	cmp	r3, #0
 8002060:	d106      	bne.n	8002070 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6979      	ldr	r1, [r7, #20]
 8002068:	4618      	mov	r0, r3
 800206a:	f001 fdfd 	bl	8003c68 <USB_EPStartXfer>
 800206e:	e005      	b.n	800207c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6979      	ldr	r1, [r7, #20]
 8002076:	4618      	mov	r0, r3
 8002078:	f001 fdf6 	bl	8003c68 <USB_EPStartXfer>
  }

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	460b      	mov	r3, r1
 8002090:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	f003 0207 	and.w	r2, r3, #7
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	429a      	cmp	r2, r3
 800209e:	d901      	bls.n	80020a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e046      	b.n	8002132 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	da0b      	bge.n	80020c4 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	015b      	lsls	r3, r3, #5
 80020b4:	3328      	adds	r3, #40	; 0x28
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2201      	movs	r2, #1
 80020c0:	705a      	strb	r2, [r3, #1]
 80020c2:	e009      	b.n	80020d8 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	015b      	lsls	r3, r3, #5
 80020c8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_PCD_EP_SetStall+0x72>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e01c      	b.n	8002132 <HAL_PCD_EP_SetStall+0xac>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68f9      	ldr	r1, [r7, #12]
 8002106:	4618      	mov	r0, r3
 8002108:	f002 f866 	bl	80041d8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	2b00      	cmp	r3, #0
 8002114:	d108      	bne.n	8002128 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8002120:	4619      	mov	r1, r3
 8002122:	4610      	mov	r0, r2
 8002124:	f002 f964 	bl	80043f0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	460b      	mov	r3, r1
 8002144:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002146:	78fb      	ldrb	r3, [r7, #3]
 8002148:	f003 020f 	and.w	r2, r3, #15
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	429a      	cmp	r2, r3
 8002152:	d901      	bls.n	8002158 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e03a      	b.n	80021ce <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800215c:	2b00      	cmp	r3, #0
 800215e:	da0b      	bge.n	8002178 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	015b      	lsls	r3, r3, #5
 8002168:	3328      	adds	r3, #40	; 0x28
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	705a      	strb	r2, [r3, #1]
 8002176:	e00b      	b.n	8002190 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	015b      	lsls	r3, r3, #5
 8002180:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	4413      	add	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	f003 0307 	and.w	r3, r3, #7
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d101      	bne.n	80021b0 <HAL_PCD_EP_ClrStall+0x76>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e00e      	b.n	80021ce <HAL_PCD_EP_ClrStall+0x94>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68f9      	ldr	r1, [r7, #12]
 80021be:	4618      	mov	r0, r3
 80021c0:	f002 f84c 	bl	800425c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b089      	sub	sp, #36	; 0x24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021e0:	e282      	b.n	80026e8 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ea:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80021ec:	8afb      	ldrh	r3, [r7, #22]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80021f6:	7d7b      	ldrb	r3, [r7, #21]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f040 8142 	bne.w	8002482 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80021fe:	8afb      	ldrh	r3, [r7, #22]
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b00      	cmp	r3, #0
 8002206:	d151      	bne.n	80022ac <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002214:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002218:	b29c      	uxth	r4, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8002222:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002226:	b29b      	uxth	r3, r3
 8002228:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3328      	adds	r3, #40	; 0x28
 800222e:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002238:	b29b      	uxth	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	3302      	adds	r3, #2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	4413      	add	r3, r2
 800224e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	441a      	add	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800226a:	2100      	movs	r1, #0
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f003 fefb 	bl	8006068 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8234 	beq.w	80026e8 <PCD_EP_ISR_Handler+0x510>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	2b00      	cmp	r3, #0
 8002286:	f040 822f 	bne.w	80026e8 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002296:	b2da      	uxtb	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	b292      	uxth	r2, r2
 800229e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80022aa:	e21d      	b.n	80026e8 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80022b2:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80022bc:	8a7b      	ldrh	r3, [r7, #18]
 80022be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d033      	beq.n	800232e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	3306      	adds	r3, #6
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002304:	b29b      	uxth	r3, r3
 8002306:	f002 f8c2 	bl	800448e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	b29a      	uxth	r2, r3
 8002312:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002316:	4013      	ands	r3, r2
 8002318:	b29c      	uxth	r4, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002322:	b292      	uxth	r2, r2
 8002324:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f003 fe74 	bl	8006014 <HAL_PCD_SetupStageCallback>
 800232c:	e1dc      	b.n	80026e8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800232e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002332:	2b00      	cmp	r3, #0
 8002334:	f280 81d8 	bge.w	80026e8 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	b29a      	uxth	r2, r3
 8002340:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002344:	4013      	ands	r3, r2
 8002346:	b29c      	uxth	r4, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8002350:	b292      	uxth	r2, r2
 8002352:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800235c:	b29b      	uxth	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	3306      	adds	r3, #6
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d019      	beq.n	80023bc <PCD_EP_ISR_Handler+0x1e4>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6818      	ldr	r0, [r3, #0]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6959      	ldr	r1, [r3, #20]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	f002 f874 	bl	800448e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	441a      	add	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80023b4:	2100      	movs	r1, #0
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f003 fe3e 	bl	8006038 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461c      	mov	r4, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	441c      	add	r4, r3
 80023ce:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80023d2:	461c      	mov	r4, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10e      	bne.n	80023fa <PCD_EP_ISR_Handler+0x222>
 80023dc:	8823      	ldrh	r3, [r4, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	8023      	strh	r3, [r4, #0]
 80023e8:	8823      	ldrh	r3, [r4, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	8023      	strh	r3, [r4, #0]
 80023f8:	e02d      	b.n	8002456 <PCD_EP_ISR_Handler+0x27e>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b3e      	cmp	r3, #62	; 0x3e
 8002400:	d812      	bhi.n	8002428 <PCD_EP_ISR_Handler+0x250>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	085b      	lsrs	r3, r3, #1
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <PCD_EP_ISR_Handler+0x244>
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	3301      	adds	r3, #1
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	b29b      	uxth	r3, r3
 8002420:	029b      	lsls	r3, r3, #10
 8002422:	b29b      	uxth	r3, r3
 8002424:	8023      	strh	r3, [r4, #0]
 8002426:	e016      	b.n	8002456 <PCD_EP_ISR_Handler+0x27e>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <PCD_EP_ISR_Handler+0x26a>
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	3b01      	subs	r3, #1
 8002440:	61bb      	str	r3, [r7, #24]
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	b29b      	uxth	r3, r3
 8002446:	029b      	lsls	r3, r3, #10
 8002448:	b29b      	uxth	r3, r3
 800244a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800244e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002452:	b29b      	uxth	r3, r3
 8002454:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002466:	b29c      	uxth	r4, r3
 8002468:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800246c:	b29c      	uxth	r4, r3
 800246e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002472:	b29c      	uxth	r4, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	4ba2      	ldr	r3, [pc, #648]	; (8002704 <PCD_EP_ISR_Handler+0x52c>)
 800247a:	4323      	orrs	r3, r4
 800247c:	b29b      	uxth	r3, r3
 800247e:	8013      	strh	r3, [r2, #0]
 8002480:	e132      	b.n	80026e8 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	461a      	mov	r2, r3
 8002488:	7d7b      	ldrb	r3, [r7, #21]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4413      	add	r3, r2
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002492:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002496:	2b00      	cmp	r3, #0
 8002498:	f280 80d1 	bge.w	800263e <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	7d7b      	ldrb	r3, [r7, #21]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024b0:	4013      	ands	r3, r2
 80024b2:	b29c      	uxth	r4, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	7d7b      	ldrb	r3, [r7, #21]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80024c4:	b292      	uxth	r2, r2
 80024c6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80024c8:	7d7b      	ldrb	r3, [r7, #21]
 80024ca:	015b      	lsls	r3, r3, #5
 80024cc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	7b1b      	ldrb	r3, [r3, #12]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d121      	bne.n	8002522 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4413      	add	r3, r2
 80024f2:	3306      	adds	r3, #6
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002506:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8002508:	8bfb      	ldrh	r3, [r7, #30]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d072      	beq.n	80025f4 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6959      	ldr	r1, [r3, #20]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	88da      	ldrh	r2, [r3, #6]
 800251a:	8bfb      	ldrh	r3, [r7, #30]
 800251c:	f001 ffb7 	bl	800448e <USB_ReadPMA>
 8002520:	e068      	b.n	80025f4 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	b29b      	uxth	r3, r3
 8002534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d021      	beq.n	8002580 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002544:	b29b      	uxth	r3, r3
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	3302      	adds	r3, #2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002564:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8002566:	8bfb      	ldrh	r3, [r7, #30]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d02a      	beq.n	80025c2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6959      	ldr	r1, [r3, #20]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	891a      	ldrh	r2, [r3, #8]
 8002578:	8bfb      	ldrh	r3, [r7, #30]
 800257a:	f001 ff88 	bl	800448e <USB_ReadPMA>
 800257e:	e020      	b.n	80025c2 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002588:	b29b      	uxth	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	3306      	adds	r3, #6
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	4413      	add	r3, r2
 800259e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025a8:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80025aa:	8bfb      	ldrh	r3, [r7, #30]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6959      	ldr	r1, [r3, #20]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	895a      	ldrh	r2, [r3, #10]
 80025bc:	8bfb      	ldrh	r3, [r7, #30]
 80025be:	f001 ff66 	bl	800448e <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025dc:	b29c      	uxth	r4, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	441a      	add	r2, r3
 80025ec:	4b46      	ldr	r3, [pc, #280]	; (8002708 <PCD_EP_ISR_Handler+0x530>)
 80025ee:	4323      	orrs	r3, r4
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	69da      	ldr	r2, [r3, #28]
 80025f8:	8bfb      	ldrh	r3, [r7, #30]
 80025fa:	441a      	add	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	8bfb      	ldrh	r3, [r7, #30]
 8002606:	441a      	add	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d004      	beq.n	800261e <PCD_EP_ISR_Handler+0x446>
 8002614:	8bfa      	ldrh	r2, [r7, #30]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	429a      	cmp	r2, r3
 800261c:	d206      	bcs.n	800262c <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	4619      	mov	r1, r3
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f003 fd07 	bl	8006038 <HAL_PCD_DataOutStageCallback>
 800262a:	e008      	b.n	800263e <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	7819      	ldrb	r1, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff fc9d 	bl	8001f78 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800263e:	8a7b      	ldrh	r3, [r7, #18]
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	2b00      	cmp	r3, #0
 8002646:	d04f      	beq.n	80026e8 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8002648:	7d7b      	ldrb	r3, [r7, #21]
 800264a:	015b      	lsls	r3, r3, #5
 800264c:	3328      	adds	r3, #40	; 0x28
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	7d7b      	ldrb	r3, [r7, #21]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
 8002664:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266c:	b29c      	uxth	r4, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	7d7b      	ldrb	r3, [r7, #21]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	441a      	add	r2, r3
 800267a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800267e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002682:	b29b      	uxth	r3, r3
 8002684:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800268e:	b29b      	uxth	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	3302      	adds	r3, #2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	695a      	ldr	r2, [r3, #20]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	441a      	add	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d106      	bne.n	80026d6 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f003 fcca 	bl	8006068 <HAL_PCD_DataInStageCallback>
 80026d4:	e008      	b.n	80026e8 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	7819      	ldrb	r1, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff fc96 	bl	8002014 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	b21b      	sxth	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f6ff ad74 	blt.w	80021e2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3724      	adds	r7, #36	; 0x24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd90      	pop	{r4, r7, pc}
 8002704:	ffff8080 	.word	0xffff8080
 8002708:	ffff80c0 	.word	0xffff80c0

0800270c <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	817b      	strh	r3, [r7, #10]
 800271a:	4613      	mov	r3, r2
 800271c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800271e:	897b      	ldrh	r3, [r7, #10]
 8002720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d008      	beq.n	800273c <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800272a:	897b      	ldrh	r3, [r7, #10]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	015b      	lsls	r3, r3, #5
 8002732:	3328      	adds	r3, #40	; 0x28
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	617b      	str	r3, [r7, #20]
 800273a:	e006      	b.n	800274a <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800273c:	897b      	ldrh	r3, [r7, #10]
 800273e:	015b      	lsls	r3, r3, #5
 8002740:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800274a:	893b      	ldrh	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d107      	bne.n	8002760 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2200      	movs	r2, #0
 8002754:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	b29a      	uxth	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	80da      	strh	r2, [r3, #6]
 800275e:	e00b      	b.n	8002778 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2201      	movs	r2, #1
 8002764:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	b29a      	uxth	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	0c1b      	lsrs	r3, r3, #16
 8002772:	b29a      	uxth	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e26c      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 8087 	beq.w	80028b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027a4:	4b92      	ldr	r3, [pc, #584]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 030c 	and.w	r3, r3, #12
 80027ac:	2b04      	cmp	r3, #4
 80027ae:	d00c      	beq.n	80027ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027b0:	4b8f      	ldr	r3, [pc, #572]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 030c 	and.w	r3, r3, #12
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d112      	bne.n	80027e2 <HAL_RCC_OscConfig+0x5e>
 80027bc:	4b8c      	ldr	r3, [pc, #560]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c8:	d10b      	bne.n	80027e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ca:	4b89      	ldr	r3, [pc, #548]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d06c      	beq.n	80028b0 <HAL_RCC_OscConfig+0x12c>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d168      	bne.n	80028b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e246      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ea:	d106      	bne.n	80027fa <HAL_RCC_OscConfig+0x76>
 80027ec:	4b80      	ldr	r3, [pc, #512]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a7f      	ldr	r2, [pc, #508]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80027f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	e02e      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0x98>
 8002802:	4b7b      	ldr	r3, [pc, #492]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a7a      	ldr	r2, [pc, #488]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b78      	ldr	r3, [pc, #480]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a77      	ldr	r2, [pc, #476]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002814:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e01d      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0xbc>
 8002826:	4b72      	ldr	r3, [pc, #456]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a71      	ldr	r2, [pc, #452]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	4b6f      	ldr	r3, [pc, #444]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a6e      	ldr	r2, [pc, #440]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	e00b      	b.n	8002858 <HAL_RCC_OscConfig+0xd4>
 8002840:	4b6b      	ldr	r3, [pc, #428]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a6a      	ldr	r2, [pc, #424]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b68      	ldr	r3, [pc, #416]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a67      	ldr	r2, [pc, #412]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002856:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d013      	beq.n	8002888 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002860:	f7fd ff48 	bl	80006f4 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002868:	f7fd ff44 	bl	80006f4 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e1fa      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b5d      	ldr	r3, [pc, #372]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0xe4>
 8002886:	e014      	b.n	80028b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fd ff34 	bl	80006f4 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002890:	f7fd ff30 	bl	80006f4 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b64      	cmp	r3, #100	; 0x64
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e1e6      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028a2:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x10c>
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d063      	beq.n	8002986 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028be:	4b4c      	ldr	r3, [pc, #304]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028ca:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d11c      	bne.n	8002910 <HAL_RCC_OscConfig+0x18c>
 80028d6:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_RCC_OscConfig+0x176>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e1ba      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b3d      	ldr	r3, [pc, #244]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4939      	ldr	r1, [pc, #228]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	e03a      	b.n	8002986 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fd fee9 	bl	80006f4 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002926:	f7fd fee5 	bl	80006f4 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e19b      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4927      	ldr	r1, [pc, #156]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295a:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <HAL_RCC_OscConfig+0x270>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7fd fec8 	bl	80006f4 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002968:	f7fd fec4 	bl	80006f4 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e17a      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d03a      	beq.n	8002a08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d019      	beq.n	80029ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <HAL_RCC_OscConfig+0x274>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a0:	f7fd fea8 	bl	80006f4 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a8:	f7fd fea4 	bl	80006f4 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e15a      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029c6:	2001      	movs	r0, #1
 80029c8:	f000 fac6 	bl	8002f58 <RCC_Delay>
 80029cc:	e01c      	b.n	8002a08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_RCC_OscConfig+0x274>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d4:	f7fd fe8e 	bl	80006f4 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029da:	e00f      	b.n	80029fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029dc:	f7fd fe8a 	bl	80006f4 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d908      	bls.n	80029fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e140      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
 80029f4:	42420000 	.word	0x42420000
 80029f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fc:	4b9e      	ldr	r3, [pc, #632]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e9      	bne.n	80029dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80a6 	beq.w	8002b62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a16:	2300      	movs	r3, #0
 8002a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a1a:	4b97      	ldr	r3, [pc, #604]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10d      	bne.n	8002a42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a26:	4b94      	ldr	r3, [pc, #592]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4a93      	ldr	r2, [pc, #588]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a30:	61d3      	str	r3, [r2, #28]
 8002a32:	4b91      	ldr	r3, [pc, #580]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a42:	4b8e      	ldr	r3, [pc, #568]	; (8002c7c <HAL_RCC_OscConfig+0x4f8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d118      	bne.n	8002a80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4e:	4b8b      	ldr	r3, [pc, #556]	; (8002c7c <HAL_RCC_OscConfig+0x4f8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a8a      	ldr	r2, [pc, #552]	; (8002c7c <HAL_RCC_OscConfig+0x4f8>)
 8002a54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a5a:	f7fd fe4b 	bl	80006f4 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a62:	f7fd fe47 	bl	80006f4 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b64      	cmp	r3, #100	; 0x64
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0fd      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a74:	4b81      	ldr	r3, [pc, #516]	; (8002c7c <HAL_RCC_OscConfig+0x4f8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d106      	bne.n	8002a96 <HAL_RCC_OscConfig+0x312>
 8002a88:	4b7b      	ldr	r3, [pc, #492]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a7a      	ldr	r2, [pc, #488]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	e02d      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x334>
 8002a9e:	4b76      	ldr	r3, [pc, #472]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a75      	ldr	r2, [pc, #468]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6213      	str	r3, [r2, #32]
 8002aaa:	4b73      	ldr	r3, [pc, #460]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4a72      	ldr	r2, [pc, #456]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6213      	str	r3, [r2, #32]
 8002ab6:	e01c      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d10c      	bne.n	8002ada <HAL_RCC_OscConfig+0x356>
 8002ac0:	4b6d      	ldr	r3, [pc, #436]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4a6c      	ldr	r2, [pc, #432]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	4b6a      	ldr	r3, [pc, #424]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	4a69      	ldr	r2, [pc, #420]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6213      	str	r3, [r2, #32]
 8002ad8:	e00b      	b.n	8002af2 <HAL_RCC_OscConfig+0x36e>
 8002ada:	4b67      	ldr	r3, [pc, #412]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4a66      	ldr	r2, [pc, #408]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ae0:	f023 0301 	bic.w	r3, r3, #1
 8002ae4:	6213      	str	r3, [r2, #32]
 8002ae6:	4b64      	ldr	r3, [pc, #400]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a63      	ldr	r2, [pc, #396]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002aec:	f023 0304 	bic.w	r3, r3, #4
 8002af0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d015      	beq.n	8002b26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afa:	f7fd fdfb 	bl	80006f4 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b00:	e00a      	b.n	8002b18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7fd fdf7 	bl	80006f4 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e0ab      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b18:	4b57      	ldr	r3, [pc, #348]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ee      	beq.n	8002b02 <HAL_RCC_OscConfig+0x37e>
 8002b24:	e014      	b.n	8002b50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b26:	f7fd fde5 	bl	80006f4 <HAL_GetTick>
 8002b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2c:	e00a      	b.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fd fde1 	bl	80006f4 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e095      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b44:	4b4c      	ldr	r3, [pc, #304]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1ee      	bne.n	8002b2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b50:	7dfb      	ldrb	r3, [r7, #23]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b56:	4b48      	ldr	r3, [pc, #288]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	4a47      	ldr	r2, [pc, #284]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 8081 	beq.w	8002c6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b6c:	4b42      	ldr	r3, [pc, #264]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d061      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d146      	bne.n	8002c0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b80:	4b3f      	ldr	r3, [pc, #252]	; (8002c80 <HAL_RCC_OscConfig+0x4fc>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b86:	f7fd fdb5 	bl	80006f4 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8c:	e008      	b.n	8002ba0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b8e:	f7fd fdb1 	bl	80006f4 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e067      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba0:	4b35      	ldr	r3, [pc, #212]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1f0      	bne.n	8002b8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d108      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bb6:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	492d      	ldr	r1, [pc, #180]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a19      	ldr	r1, [r3, #32]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	4927      	ldr	r1, [pc, #156]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <HAL_RCC_OscConfig+0x4fc>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7fd fd85 	bl	80006f4 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fd fd81 	bl	80006f4 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e037      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c00:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x46a>
 8002c0c:	e02f      	b.n	8002c6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <HAL_RCC_OscConfig+0x4fc>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fd fd6e 	bl	80006f4 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fd fd6a 	bl	80006f4 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e020      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x498>
 8002c3a:	e018      	b.n	8002c6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e013      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_OscConfig+0x4f4>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d106      	bne.n	8002c6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d001      	beq.n	8002c6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3718      	adds	r7, #24
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40007000 	.word	0x40007000
 8002c80:	42420060 	.word	0x42420060

08002c84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0d0      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c98:	4b6a      	ldr	r3, [pc, #424]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d910      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b67      	ldr	r3, [pc, #412]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 0207 	bic.w	r2, r3, #7
 8002cae:	4965      	ldr	r1, [pc, #404]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0b8      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce0:	4b59      	ldr	r3, [pc, #356]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf8:	4b53      	ldr	r3, [pc, #332]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4a52      	ldr	r2, [pc, #328]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d04:	4b50      	ldr	r3, [pc, #320]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	494d      	ldr	r1, [pc, #308]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d040      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d115      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e07f      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d107      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d42:	4b41      	ldr	r3, [pc, #260]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d109      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e073      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d52:	4b3d      	ldr	r3, [pc, #244]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e06b      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d62:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f023 0203 	bic.w	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4936      	ldr	r1, [pc, #216]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d74:	f7fd fcbe 	bl	80006f4 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7c:	f7fd fcba 	bl	80006f4 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e053      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 020c 	and.w	r2, r3, #12
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d1eb      	bne.n	8002d7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002da4:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d210      	bcs.n	8002dd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	4b24      	ldr	r3, [pc, #144]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 0207 	bic.w	r2, r3, #7
 8002dba:	4922      	ldr	r1, [pc, #136]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e032      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4916      	ldr	r1, [pc, #88]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	490e      	ldr	r1, [pc, #56]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e12:	f000 f821 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002e16:	4601      	mov	r1, r0
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <HAL_RCC_ClockConfig+0x1c8>)
 8002e24:	5cd3      	ldrb	r3, [r2, r3]
 8002e26:	fa21 f303 	lsr.w	r3, r1, r3
 8002e2a:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <HAL_RCC_ClockConfig+0x1cc>)
 8002e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCC_ClockConfig+0x1d0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fd fc1c 	bl	8000670 <HAL_InitTick>

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40022000 	.word	0x40022000
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	080065e4 	.word	0x080065e4
 8002e50:	20000000 	.word	0x20000000
 8002e54:	20000004 	.word	0x20000004

08002e58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	b490      	push	{r4, r7}
 8002e5a:	b08a      	sub	sp, #40	; 0x28
 8002e5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e5e:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e60:	1d3c      	adds	r4, r7, #4
 8002e62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e68:	4b28      	ldr	r3, [pc, #160]	; (8002f0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
 8002e72:	2300      	movs	r3, #0
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	; 0x24
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e82:	4b23      	ldr	r3, [pc, #140]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d002      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x40>
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x46>
 8002e96:	e02d      	b.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e98:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002e9a:	623b      	str	r3, [r7, #32]
      break;
 8002e9c:	e02d      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	0c9b      	lsrs	r3, r3, #18
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eaa:	4413      	add	r3, r2
 8002eac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002eb0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d013      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ebc:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	0c5b      	lsrs	r3, r3, #17
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002eca:	4413      	add	r3, r2
 8002ecc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ed0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	4a0f      	ldr	r2, [pc, #60]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ed6:	fb02 f203 	mul.w	r2, r2, r3
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	e004      	b.n	8002eee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ee8:	fb02 f303 	mul.w	r3, r2, r3
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	623b      	str	r3, [r7, #32]
      break;
 8002ef2:	e002      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ef6:	623b      	str	r3, [r7, #32]
      break;
 8002ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002efa:	6a3b      	ldr	r3, [r7, #32]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3728      	adds	r7, #40	; 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc90      	pop	{r4, r7}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	08006574 	.word	0x08006574
 8002f0c:	08006584 	.word	0x08006584
 8002f10:	40021000 	.word	0x40021000
 8002f14:	007a1200 	.word	0x007a1200
 8002f18:	003d0900 	.word	0x003d0900

08002f1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f20:	4b02      	ldr	r3, [pc, #8]	; (8002f2c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f22:	681b      	ldr	r3, [r3, #0]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	20000000 	.word	0x20000000

08002f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f34:	f7ff fff2 	bl	8002f1c <HAL_RCC_GetHCLKFreq>
 8002f38:	4601      	mov	r1, r0
 8002f3a:	4b05      	ldr	r3, [pc, #20]	; (8002f50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	0adb      	lsrs	r3, r3, #11
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	4a03      	ldr	r2, [pc, #12]	; (8002f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f46:	5cd3      	ldrb	r3, [r2, r3]
 8002f48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40021000 	.word	0x40021000
 8002f54:	080065f4 	.word	0x080065f4

08002f58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <RCC_Delay+0x34>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a0a      	ldr	r2, [pc, #40]	; (8002f90 <RCC_Delay+0x38>)
 8002f66:	fba2 2303 	umull	r2, r3, r2, r3
 8002f6a:	0a5b      	lsrs	r3, r3, #9
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	fb02 f303 	mul.w	r3, r2, r3
 8002f72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f74:	bf00      	nop
  }
  while (Delay --);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1e5a      	subs	r2, r3, #1
 8002f7a:	60fa      	str	r2, [r7, #12]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f9      	bne.n	8002f74 <RCC_Delay+0x1c>
}
 8002f80:	bf00      	nop
 8002f82:	3714      	adds	r7, #20
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	10624dd3 	.word	0x10624dd3

08002f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d07d      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb4:	4b4f      	ldr	r3, [pc, #316]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10d      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc0:	4b4c      	ldr	r3, [pc, #304]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	4a4b      	ldr	r2, [pc, #300]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fca:	61d3      	str	r3, [r2, #28]
 8002fcc:	4b49      	ldr	r3, [pc, #292]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fdc:	4b46      	ldr	r3, [pc, #280]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d118      	bne.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe8:	4b43      	ldr	r3, [pc, #268]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a42      	ldr	r2, [pc, #264]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff4:	f7fd fb7e 	bl	80006f4 <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffa:	e008      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffc:	f7fd fb7a 	bl	80006f4 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e06d      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300e:	4b3a      	ldr	r3, [pc, #232]	; (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800301a:	4b36      	ldr	r3, [pc, #216]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003022:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d02e      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003032:	68fa      	ldr	r2, [r7, #12]
 8003034:	429a      	cmp	r2, r3
 8003036:	d027      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003038:	4b2e      	ldr	r3, [pc, #184]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003040:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003042:	4b2e      	ldr	r3, [pc, #184]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003044:	2201      	movs	r2, #1
 8003046:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003048:	4b2c      	ldr	r3, [pc, #176]	; (80030fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800304a:	2200      	movs	r2, #0
 800304c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800304e:	4a29      	ldr	r2, [pc, #164]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d014      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305e:	f7fd fb49 	bl	80006f4 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003064:	e00a      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7fd fb45 	bl	80006f4 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	; 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d901      	bls.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e036      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307c:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0ee      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003088:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	4917      	ldr	r1, [pc, #92]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003096:	4313      	orrs	r3, r2
 8003098:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800309a:	7dfb      	ldrb	r3, [r7, #23]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d105      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a0:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030b8:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	490b      	ldr	r1, [pc, #44]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0310 	and.w	r3, r3, #16
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030d6:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	4904      	ldr	r1, [pc, #16]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40007000 	.word	0x40007000
 80030fc:	42420440 	.word	0x42420440

08003100 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b08d      	sub	sp, #52	; 0x34
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003108:	4b55      	ldr	r3, [pc, #340]	; (8003260 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800310a:	f107 040c 	add.w	r4, r7, #12
 800310e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003110:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003114:	4b53      	ldr	r3, [pc, #332]	; (8003264 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
 800311e:	2300      	movs	r3, #0
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003122:	2300      	movs	r3, #0
 8003124:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	2300      	movs	r3, #0
 800312c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d07f      	beq.n	8003234 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003134:	2b10      	cmp	r3, #16
 8003136:	d002      	beq.n	800313e <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8003138:	2b01      	cmp	r3, #1
 800313a:	d048      	beq.n	80031ce <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800313c:	e08b      	b.n	8003256 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 800313e:	4b4a      	ldr	r3, [pc, #296]	; (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003144:	4b48      	ldr	r3, [pc, #288]	; (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d07f      	beq.n	8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	0c9b      	lsrs	r3, r3, #18
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800315c:	4413      	add	r3, r2
 800315e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003162:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d018      	beq.n	80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800316e:	4b3e      	ldr	r3, [pc, #248]	; (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	0c5b      	lsrs	r3, r3, #17
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800317c:	4413      	add	r3, r2
 800317e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00d      	beq.n	80031aa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800318e:	4a37      	ldr	r2, [pc, #220]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	fbb2 f2f3 	udiv	r2, r2, r3
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	fb02 f303 	mul.w	r3, r2, r3
 800319c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800319e:	e004      	b.n	80031aa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	4a33      	ldr	r2, [pc, #204]	; (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80031a4:	fb02 f303 	mul.w	r3, r2, r3
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80031aa:	4b2f      	ldr	r3, [pc, #188]	; (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b6:	d102      	bne.n	80031be <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 80031b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80031bc:	e048      	b.n	8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 80031be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4a2c      	ldr	r2, [pc, #176]	; (8003274 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	085b      	lsrs	r3, r3, #1
 80031ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80031cc:	e040      	b.n	8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 80031ce:	4b26      	ldr	r3, [pc, #152]	; (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031de:	d108      	bne.n	80031f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 80031ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80031f0:	e01f      	b.n	8003232 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fc:	d109      	bne.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80031fe:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800320a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003210:	e00f      	b.n	8003232 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003218:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800321c:	d11a      	bne.n	8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003226:	2b00      	cmp	r3, #0
 8003228:	d014      	beq.n	8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800322a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800322e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003230:	e010      	b.n	8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003232:	e00f      	b.n	8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003234:	f7ff fe7c 	bl	8002f30 <HAL_RCC_GetPCLK2Freq>
 8003238:	4602      	mov	r2, r0
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	0b9b      	lsrs	r3, r3, #14
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	3301      	adds	r3, #1
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fbb2 f3f3 	udiv	r3, r2, r3
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800324e:	e002      	b.n	8003256 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003250:	bf00      	nop
 8003252:	e000      	b.n	8003256 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8003254:	bf00      	nop
    }
  }
  return (frequency);
 8003256:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003258:	4618      	mov	r0, r3
 800325a:	3734      	adds	r7, #52	; 0x34
 800325c:	46bd      	mov	sp, r7
 800325e:	bd90      	pop	{r4, r7, pc}
 8003260:	08006588 	.word	0x08006588
 8003264:	08006598 	.word	0x08006598
 8003268:	40021000 	.word	0x40021000
 800326c:	007a1200 	.word	0x007a1200
 8003270:	003d0900 	.word	0x003d0900
 8003274:	aaaaaaab 	.word	0xaaaaaaab

08003278 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003278:	b084      	sub	sp, #16
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	f107 0014 	add.w	r0, r7, #20
 8003286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	bc80      	pop	{r7}
 8003294:	b004      	add	sp, #16
 8003296:	4770      	bx	lr

08003298 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80032a0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80032a4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	89fb      	ldrh	r3, [r7, #14]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3714      	adds	r7, #20
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr

080032c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b085      	sub	sp, #20
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80032ce:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80032d2:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80032da:	b29b      	uxth	r3, r3
 80032dc:	b21a      	sxth	r2, r3
 80032de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	b21b      	sxth	r3, r3
 80032e6:	4013      	ands	r3, r2
 80032e8:	b21b      	sxth	r3, r3
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr

08003316 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003316:	b084      	sub	sp, #16
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	f107 0014 	add.w	r0, r7, #20
 8003324:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ffa5 	bl	8003298 <USB_EnableGlobalInt>

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800335a:	b004      	add	sp, #16
 800335c:	4770      	bx	lr
	...

08003360 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003360:	b490      	push	{r4, r7}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	881b      	ldrh	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003384:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	78db      	ldrb	r3, [r3, #3]
 800338a:	2b03      	cmp	r3, #3
 800338c:	d819      	bhi.n	80033c2 <USB_ActivateEndpoint+0x62>
 800338e:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <USB_ActivateEndpoint+0x34>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033a5 	.word	0x080033a5
 8003398:	080033b9 	.word	0x080033b9
 800339c:	080033c9 	.word	0x080033c9
 80033a0:	080033af 	.word	0x080033af
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80033a4:	89bb      	ldrh	r3, [r7, #12]
 80033a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033aa:	81bb      	strh	r3, [r7, #12]
      break;
 80033ac:	e00d      	b.n	80033ca <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80033ae:	89bb      	ldrh	r3, [r7, #12]
 80033b0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80033b4:	81bb      	strh	r3, [r7, #12]
      break;
 80033b6:	e008      	b.n	80033ca <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80033b8:	89bb      	ldrh	r3, [r7, #12]
 80033ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033be:	81bb      	strh	r3, [r7, #12]
      break;
 80033c0:	e003      	b.n	80033ca <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	73fb      	strb	r3, [r7, #15]
      break;
 80033c6:	e000      	b.n	80033ca <USB_ActivateEndpoint+0x6a>
      break;
 80033c8:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	441a      	add	r2, r3
 80033d4:	89bb      	ldrh	r3, [r7, #12]
 80033d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003400:	b29a      	uxth	r2, r3
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	b29b      	uxth	r3, r3
 8003408:	4313      	orrs	r3, r2
 800340a:	b29c      	uxth	r4, r3
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	441a      	add	r2, r3
 8003416:	4b8a      	ldr	r3, [pc, #552]	; (8003640 <USB_ActivateEndpoint+0x2e0>)
 8003418:	4323      	orrs	r3, r4
 800341a:	b29b      	uxth	r3, r3
 800341c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	7b1b      	ldrb	r3, [r3, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	f040 8112 	bne.w	800364c <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d067      	beq.n	8003500 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003430:	687c      	ldr	r4, [r7, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003438:	b29b      	uxth	r3, r3
 800343a:	441c      	add	r4, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	4423      	add	r3, r4
 8003444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003448:	461c      	mov	r4, r3
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	88db      	ldrh	r3, [r3, #6]
 800344e:	085b      	lsrs	r3, r3, #1
 8003450:	b29b      	uxth	r3, r3
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	b29b      	uxth	r3, r3
 8003456:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	b29c      	uxth	r4, r3
 8003466:	4623      	mov	r3, r4
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d014      	beq.n	800349a <USB_ActivateEndpoint+0x13a>
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	b29b      	uxth	r3, r3
 800347e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003486:	b29c      	uxth	r4, r3
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	441a      	add	r2, r3
 8003492:	4b6c      	ldr	r3, [pc, #432]	; (8003644 <USB_ActivateEndpoint+0x2e4>)
 8003494:	4323      	orrs	r3, r4
 8003496:	b29b      	uxth	r3, r3
 8003498:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	78db      	ldrb	r3, [r3, #3]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d018      	beq.n	80034d4 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034b8:	b29c      	uxth	r4, r3
 80034ba:	f084 0320 	eor.w	r3, r4, #32
 80034be:	b29c      	uxth	r4, r3
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	441a      	add	r2, r3
 80034ca:	4b5d      	ldr	r3, [pc, #372]	; (8003640 <USB_ActivateEndpoint+0x2e0>)
 80034cc:	4323      	orrs	r3, r4
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	8013      	strh	r3, [r2, #0]
 80034d2:	e22b      	b.n	800392c <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ea:	b29c      	uxth	r4, r3
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	441a      	add	r2, r3
 80034f6:	4b52      	ldr	r3, [pc, #328]	; (8003640 <USB_ActivateEndpoint+0x2e0>)
 80034f8:	4323      	orrs	r3, r4
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	8013      	strh	r3, [r2, #0]
 80034fe:	e215      	b.n	800392c <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003500:	687c      	ldr	r4, [r7, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003508:	b29b      	uxth	r3, r3
 800350a:	441c      	add	r4, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	4423      	add	r3, r4
 8003514:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003518:	461c      	mov	r4, r3
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	88db      	ldrh	r3, [r3, #6]
 800351e:	085b      	lsrs	r3, r3, #1
 8003520:	b29b      	uxth	r3, r3
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	b29b      	uxth	r3, r3
 8003526:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003528:	687c      	ldr	r4, [r7, #4]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003530:	b29b      	uxth	r3, r3
 8003532:	441c      	add	r4, r3
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	4423      	add	r3, r4
 800353c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003540:	461c      	mov	r4, r3
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10e      	bne.n	8003568 <USB_ActivateEndpoint+0x208>
 800354a:	8823      	ldrh	r3, [r4, #0]
 800354c:	b29b      	uxth	r3, r3
 800354e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003552:	b29b      	uxth	r3, r3
 8003554:	8023      	strh	r3, [r4, #0]
 8003556:	8823      	ldrh	r3, [r4, #0]
 8003558:	b29b      	uxth	r3, r3
 800355a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800355e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003562:	b29b      	uxth	r3, r3
 8003564:	8023      	strh	r3, [r4, #0]
 8003566:	e02d      	b.n	80035c4 <USB_ActivateEndpoint+0x264>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	2b3e      	cmp	r3, #62	; 0x3e
 800356e:	d812      	bhi.n	8003596 <USB_ActivateEndpoint+0x236>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	085b      	lsrs	r3, r3, #1
 8003576:	60bb      	str	r3, [r7, #8]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <USB_ActivateEndpoint+0x22a>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	3301      	adds	r3, #1
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	b29b      	uxth	r3, r3
 800358e:	029b      	lsls	r3, r3, #10
 8003590:	b29b      	uxth	r3, r3
 8003592:	8023      	strh	r3, [r4, #0]
 8003594:	e016      	b.n	80035c4 <USB_ActivateEndpoint+0x264>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	095b      	lsrs	r3, r3, #5
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 031f 	and.w	r3, r3, #31
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <USB_ActivateEndpoint+0x250>
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	029b      	lsls	r3, r3, #10
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	b29c      	uxth	r4, r3
 80035d2:	4623      	mov	r3, r4
 80035d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d014      	beq.n	8003606 <USB_ActivateEndpoint+0x2a6>
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f2:	b29c      	uxth	r4, r3
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	441a      	add	r2, r3
 80035fe:	4b12      	ldr	r3, [pc, #72]	; (8003648 <USB_ActivateEndpoint+0x2e8>)
 8003600:	4323      	orrs	r3, r4
 8003602:	b29b      	uxth	r3, r3
 8003604:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	b29b      	uxth	r3, r3
 8003614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361c:	b29c      	uxth	r4, r3
 800361e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003622:	b29c      	uxth	r4, r3
 8003624:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003628:	b29c      	uxth	r4, r3
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	441a      	add	r2, r3
 8003634:	4b02      	ldr	r3, [pc, #8]	; (8003640 <USB_ActivateEndpoint+0x2e0>)
 8003636:	4323      	orrs	r3, r4
 8003638:	b29b      	uxth	r3, r3
 800363a:	8013      	strh	r3, [r2, #0]
 800363c:	e176      	b.n	800392c <USB_ActivateEndpoint+0x5cc>
 800363e:	bf00      	nop
 8003640:	ffff8080 	.word	0xffff8080
 8003644:	ffff80c0 	.word	0xffff80c0
 8003648:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	b29b      	uxth	r3, r3
 800365a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003662:	b29c      	uxth	r4, r3
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	441a      	add	r2, r3
 800366e:	4b96      	ldr	r3, [pc, #600]	; (80038c8 <USB_ActivateEndpoint+0x568>)
 8003670:	4323      	orrs	r3, r4
 8003672:	b29b      	uxth	r3, r3
 8003674:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003676:	687c      	ldr	r4, [r7, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800367e:	b29b      	uxth	r3, r3
 8003680:	441c      	add	r4, r3
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	4423      	add	r3, r4
 800368a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800368e:	461c      	mov	r4, r3
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	891b      	ldrh	r3, [r3, #8]
 8003694:	085b      	lsrs	r3, r3, #1
 8003696:	b29b      	uxth	r3, r3
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	b29b      	uxth	r3, r3
 800369c:	8023      	strh	r3, [r4, #0]
 800369e:	687c      	ldr	r4, [r7, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	441c      	add	r4, r3
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	4423      	add	r3, r4
 80036b2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80036b6:	461c      	mov	r4, r3
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	895b      	ldrh	r3, [r3, #10]
 80036bc:	085b      	lsrs	r3, r3, #1
 80036be:	b29b      	uxth	r3, r3
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	785b      	ldrb	r3, [r3, #1]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f040 8088 	bne.w	80037e0 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	881b      	ldrh	r3, [r3, #0]
 80036dc:	b29c      	uxth	r4, r3
 80036de:	4623      	mov	r3, r4
 80036e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d014      	beq.n	8003712 <USB_ActivateEndpoint+0x3b2>
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fe:	b29c      	uxth	r4, r3
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	441a      	add	r2, r3
 800370a:	4b70      	ldr	r3, [pc, #448]	; (80038cc <USB_ActivateEndpoint+0x56c>)
 800370c:	4323      	orrs	r3, r4
 800370e:	b29b      	uxth	r3, r3
 8003710:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	b29c      	uxth	r4, r3
 8003720:	4623      	mov	r3, r4
 8003722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d014      	beq.n	8003754 <USB_ActivateEndpoint+0x3f4>
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	b29b      	uxth	r3, r3
 8003738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003740:	b29c      	uxth	r4, r3
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	441a      	add	r2, r3
 800374c:	4b60      	ldr	r3, [pc, #384]	; (80038d0 <USB_ActivateEndpoint+0x570>)
 800374e:	4323      	orrs	r3, r4
 8003750:	b29b      	uxth	r3, r3
 8003752:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	b29b      	uxth	r3, r3
 8003762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376a:	b29c      	uxth	r4, r3
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	441a      	add	r2, r3
 8003776:	4b56      	ldr	r3, [pc, #344]	; (80038d0 <USB_ActivateEndpoint+0x570>)
 8003778:	4323      	orrs	r3, r4
 800377a:	b29b      	uxth	r3, r3
 800377c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b29b      	uxth	r3, r3
 800378c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003790:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003794:	b29c      	uxth	r4, r3
 8003796:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800379a:	b29c      	uxth	r4, r3
 800379c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80037a0:	b29c      	uxth	r4, r3
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	441a      	add	r2, r3
 80037ac:	4b49      	ldr	r3, [pc, #292]	; (80038d4 <USB_ActivateEndpoint+0x574>)
 80037ae:	4323      	orrs	r3, r4
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ca:	b29c      	uxth	r4, r3
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	441a      	add	r2, r3
 80037d6:	4b3f      	ldr	r3, [pc, #252]	; (80038d4 <USB_ActivateEndpoint+0x574>)
 80037d8:	4323      	orrs	r3, r4
 80037da:	b29b      	uxth	r3, r3
 80037dc:	8013      	strh	r3, [r2, #0]
 80037de:	e0a5      	b.n	800392c <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	b29c      	uxth	r4, r3
 80037ee:	4623      	mov	r3, r4
 80037f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d014      	beq.n	8003822 <USB_ActivateEndpoint+0x4c2>
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	4413      	add	r3, r2
 8003802:	881b      	ldrh	r3, [r3, #0]
 8003804:	b29b      	uxth	r3, r3
 8003806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800380a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800380e:	b29c      	uxth	r4, r3
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	441a      	add	r2, r3
 800381a:	4b2c      	ldr	r3, [pc, #176]	; (80038cc <USB_ActivateEndpoint+0x56c>)
 800381c:	4323      	orrs	r3, r4
 800381e:	b29b      	uxth	r3, r3
 8003820:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	b29c      	uxth	r4, r3
 8003830:	4623      	mov	r3, r4
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d014      	beq.n	8003864 <USB_ActivateEndpoint+0x504>
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	b29b      	uxth	r3, r3
 8003848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003850:	b29c      	uxth	r4, r3
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	441a      	add	r2, r3
 800385c:	4b1c      	ldr	r3, [pc, #112]	; (80038d0 <USB_ActivateEndpoint+0x570>)
 800385e:	4323      	orrs	r3, r4
 8003860:	b29b      	uxth	r3, r3
 8003862:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	b29b      	uxth	r3, r3
 8003872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387a:	b29c      	uxth	r4, r3
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	441a      	add	r2, r3
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <USB_ActivateEndpoint+0x56c>)
 8003888:	4323      	orrs	r3, r4
 800388a:	b29b      	uxth	r3, r3
 800388c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	78db      	ldrb	r3, [r3, #3]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d020      	beq.n	80038d8 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ac:	b29c      	uxth	r4, r3
 80038ae:	f084 0320 	eor.w	r3, r4, #32
 80038b2:	b29c      	uxth	r4, r3
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	441a      	add	r2, r3
 80038be:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <USB_ActivateEndpoint+0x574>)
 80038c0:	4323      	orrs	r3, r4
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	8013      	strh	r3, [r2, #0]
 80038c6:	e01c      	b.n	8003902 <USB_ActivateEndpoint+0x5a2>
 80038c8:	ffff8180 	.word	0xffff8180
 80038cc:	ffffc080 	.word	0xffffc080
 80038d0:	ffff80c0 	.word	0xffff80c0
 80038d4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	4413      	add	r3, r2
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ee:	b29c      	uxth	r4, r3
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	441a      	add	r2, r3
 80038fa:	4b0f      	ldr	r3, [pc, #60]	; (8003938 <USB_ActivateEndpoint+0x5d8>)
 80038fc:	4323      	orrs	r3, r4
 80038fe:	b29b      	uxth	r3, r3
 8003900:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	4413      	add	r3, r2
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003918:	b29c      	uxth	r4, r3
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	441a      	add	r2, r3
 8003924:	4b04      	ldr	r3, [pc, #16]	; (8003938 <USB_ActivateEndpoint+0x5d8>)
 8003926:	4323      	orrs	r3, r4
 8003928:	b29b      	uxth	r3, r3
 800392a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800392c:	7bfb      	ldrb	r3, [r7, #15]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bc90      	pop	{r4, r7}
 8003936:	4770      	bx	lr
 8003938:	ffff8080 	.word	0xffff8080

0800393c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800393c:	b490      	push	{r4, r7}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	7b1b      	ldrb	r3, [r3, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d171      	bne.n	8003a32 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	785b      	ldrb	r3, [r3, #1]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d036      	beq.n	80039c4 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	b29c      	uxth	r4, r3
 8003964:	4623      	mov	r3, r4
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d014      	beq.n	8003998 <USB_DeactivateEndpoint+0x5c>
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003984:	b29c      	uxth	r4, r3
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	441a      	add	r2, r3
 8003990:	4b6b      	ldr	r3, [pc, #428]	; (8003b40 <USB_DeactivateEndpoint+0x204>)
 8003992:	4323      	orrs	r3, r4
 8003994:	b29b      	uxth	r3, r3
 8003996:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ae:	b29c      	uxth	r4, r3
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	441a      	add	r2, r3
 80039ba:	4b62      	ldr	r3, [pc, #392]	; (8003b44 <USB_DeactivateEndpoint+0x208>)
 80039bc:	4323      	orrs	r3, r4
 80039be:	b29b      	uxth	r3, r3
 80039c0:	8013      	strh	r3, [r2, #0]
 80039c2:	e144      	b.n	8003c4e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	b29c      	uxth	r4, r3
 80039d2:	4623      	mov	r3, r4
 80039d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d014      	beq.n	8003a06 <USB_DeactivateEndpoint+0xca>
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	b29c      	uxth	r4, r3
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	441a      	add	r2, r3
 80039fe:	4b52      	ldr	r3, [pc, #328]	; (8003b48 <USB_DeactivateEndpoint+0x20c>)
 8003a00:	4323      	orrs	r3, r4
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	881b      	ldrh	r3, [r3, #0]
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1c:	b29c      	uxth	r4, r3
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	441a      	add	r2, r3
 8003a28:	4b46      	ldr	r3, [pc, #280]	; (8003b44 <USB_DeactivateEndpoint+0x208>)
 8003a2a:	4323      	orrs	r3, r4
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	8013      	strh	r3, [r2, #0]
 8003a30:	e10d      	b.n	8003c4e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	785b      	ldrb	r3, [r3, #1]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f040 8088 	bne.w	8003b4c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	b29c      	uxth	r4, r3
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d014      	beq.n	8003a7e <USB_DeactivateEndpoint+0x142>
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6a:	b29c      	uxth	r4, r3
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	441a      	add	r2, r3
 8003a76:	4b34      	ldr	r3, [pc, #208]	; (8003b48 <USB_DeactivateEndpoint+0x20c>)
 8003a78:	4323      	orrs	r3, r4
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	b29c      	uxth	r4, r3
 8003a8c:	4623      	mov	r3, r4
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d014      	beq.n	8003ac0 <USB_DeactivateEndpoint+0x184>
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	881b      	ldrh	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aac:	b29c      	uxth	r4, r3
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	441a      	add	r2, r3
 8003ab8:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <USB_DeactivateEndpoint+0x204>)
 8003aba:	4323      	orrs	r3, r4
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad6:	b29c      	uxth	r4, r3
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	441a      	add	r2, r3
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <USB_DeactivateEndpoint+0x204>)
 8003ae4:	4323      	orrs	r3, r4
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b00:	b29c      	uxth	r4, r3
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	441a      	add	r2, r3
 8003b0c:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <USB_DeactivateEndpoint+0x208>)
 8003b0e:	4323      	orrs	r3, r4
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b2a:	b29c      	uxth	r4, r3
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	441a      	add	r2, r3
 8003b36:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <USB_DeactivateEndpoint+0x208>)
 8003b38:	4323      	orrs	r3, r4
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	8013      	strh	r3, [r2, #0]
 8003b3e:	e086      	b.n	8003c4e <USB_DeactivateEndpoint+0x312>
 8003b40:	ffff80c0 	.word	0xffff80c0
 8003b44:	ffff8080 	.word	0xffff8080
 8003b48:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	881b      	ldrh	r3, [r3, #0]
 8003b58:	b29c      	uxth	r4, r3
 8003b5a:	4623      	mov	r3, r4
 8003b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d014      	beq.n	8003b8e <USB_DeactivateEndpoint+0x252>
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	b29c      	uxth	r4, r3
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	441a      	add	r2, r3
 8003b86:	4b35      	ldr	r3, [pc, #212]	; (8003c5c <USB_DeactivateEndpoint+0x320>)
 8003b88:	4323      	orrs	r3, r4
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	b29c      	uxth	r4, r3
 8003b9c:	4623      	mov	r3, r4
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d014      	beq.n	8003bd0 <USB_DeactivateEndpoint+0x294>
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bbc:	b29c      	uxth	r4, r3
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	441a      	add	r2, r3
 8003bc8:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <USB_DeactivateEndpoint+0x324>)
 8003bca:	4323      	orrs	r3, r4
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be6:	b29c      	uxth	r4, r3
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	441a      	add	r2, r3
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <USB_DeactivateEndpoint+0x320>)
 8003bf4:	4323      	orrs	r3, r4
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c10:	b29c      	uxth	r4, r3
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	441a      	add	r2, r3
 8003c1c:	4b11      	ldr	r3, [pc, #68]	; (8003c64 <USB_DeactivateEndpoint+0x328>)
 8003c1e:	4323      	orrs	r3, r4
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	b29b      	uxth	r3, r3
 8003c32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3a:	b29c      	uxth	r4, r3
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	441a      	add	r2, r3
 8003c46:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <USB_DeactivateEndpoint+0x328>)
 8003c48:	4323      	orrs	r3, r4
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bc90      	pop	{r4, r7}
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	ffffc080 	.word	0xffffc080
 8003c60:	ffff80c0 	.word	0xffff80c0
 8003c64:	ffff8080 	.word	0xffff8080

08003c68 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003c68:	b590      	push	{r4, r7, lr}
 8003c6a:	b08d      	sub	sp, #52	; 0x34
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	785b      	ldrb	r3, [r3, #1]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	f040 8160 	bne.w	8003f3c <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	699a      	ldr	r2, [r3, #24]
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d909      	bls.n	8003c9c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	699a      	ldr	r2, [r3, #24]
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	1ad2      	subs	r2, r2, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	619a      	str	r2, [r3, #24]
 8003c9a:	e005      	b.n	8003ca8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	7b1b      	ldrb	r3, [r3, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d119      	bne.n	8003ce4 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	6959      	ldr	r1, [r3, #20]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	88da      	ldrh	r2, [r3, #6]
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fba2 	bl	8004406 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003cc2:	687c      	ldr	r4, [r7, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	441c      	add	r4, r3
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	4423      	add	r3, r4
 8003cd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cda:	461c      	mov	r4, r3
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	8023      	strh	r3, [r4, #0]
 8003ce2:	e10f      	b.n	8003f04 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d065      	beq.n	8003dc6 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003cfa:	687c      	ldr	r4, [r7, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	785b      	ldrb	r3, [r3, #1]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d148      	bne.n	8003d96 <USB_EPStartXfer+0x12e>
 8003d04:	687c      	ldr	r4, [r7, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	441c      	add	r4, r3
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	4423      	add	r3, r4
 8003d18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d1c:	461c      	mov	r4, r3
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10e      	bne.n	8003d42 <USB_EPStartXfer+0xda>
 8003d24:	8823      	ldrh	r3, [r4, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	8023      	strh	r3, [r4, #0]
 8003d30:	8823      	ldrh	r3, [r4, #0]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	8023      	strh	r3, [r4, #0]
 8003d40:	e03d      	b.n	8003dbe <USB_EPStartXfer+0x156>
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	2b3e      	cmp	r3, #62	; 0x3e
 8003d46:	d810      	bhi.n	8003d6a <USB_EPStartXfer+0x102>
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d50:	f003 0301 	and.w	r3, r3, #1
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <USB_EPStartXfer+0xf6>
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	029b      	lsls	r3, r3, #10
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	8023      	strh	r3, [r4, #0]
 8003d68:	e029      	b.n	8003dbe <USB_EPStartXfer+0x156>
 8003d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d102      	bne.n	8003d80 <USB_EPStartXfer+0x118>
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	029b      	lsls	r3, r3, #10
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	8023      	strh	r3, [r4, #0]
 8003d94:	e013      	b.n	8003dbe <USB_EPStartXfer+0x156>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	785b      	ldrb	r3, [r3, #1]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d10f      	bne.n	8003dbe <USB_EPStartXfer+0x156>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	441c      	add	r4, r3
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	4423      	add	r3, r4
 8003db0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	895b      	ldrh	r3, [r3, #10]
 8003dc2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003dc4:	e063      	b.n	8003e8e <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	785b      	ldrb	r3, [r3, #1]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d148      	bne.n	8003e60 <USB_EPStartXfer+0x1f8>
 8003dce:	687c      	ldr	r4, [r7, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	441c      	add	r4, r3
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	011b      	lsls	r3, r3, #4
 8003de0:	4423      	add	r3, r4
 8003de2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003de6:	461c      	mov	r4, r3
 8003de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10e      	bne.n	8003e0c <USB_EPStartXfer+0x1a4>
 8003dee:	8823      	ldrh	r3, [r4, #0]
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	8023      	strh	r3, [r4, #0]
 8003dfa:	8823      	ldrh	r3, [r4, #0]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	8023      	strh	r3, [r4, #0]
 8003e0a:	e03d      	b.n	8003e88 <USB_EPStartXfer+0x220>
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	2b3e      	cmp	r3, #62	; 0x3e
 8003e10:	d810      	bhi.n	8003e34 <USB_EPStartXfer+0x1cc>
 8003e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e14:	085b      	lsrs	r3, r3, #1
 8003e16:	623b      	str	r3, [r7, #32]
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <USB_EPStartXfer+0x1c0>
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	3301      	adds	r3, #1
 8003e26:	623b      	str	r3, [r7, #32]
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	029b      	lsls	r3, r3, #10
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	8023      	strh	r3, [r4, #0]
 8003e32:	e029      	b.n	8003e88 <USB_EPStartXfer+0x220>
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	623b      	str	r3, [r7, #32]
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	f003 031f 	and.w	r3, r3, #31
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d102      	bne.n	8003e4a <USB_EPStartXfer+0x1e2>
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	623b      	str	r3, [r7, #32]
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	029b      	lsls	r3, r3, #10
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	8023      	strh	r3, [r4, #0]
 8003e5e:	e013      	b.n	8003e88 <USB_EPStartXfer+0x220>
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	785b      	ldrb	r3, [r3, #1]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d10f      	bne.n	8003e88 <USB_EPStartXfer+0x220>
 8003e68:	687c      	ldr	r4, [r7, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	441c      	add	r4, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	4423      	add	r3, r4
 8003e7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e80:	461c      	mov	r4, r3
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	891b      	ldrh	r3, [r3, #8]
 8003e8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6959      	ldr	r1, [r3, #20]
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 fab4 	bl	8004406 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	785b      	ldrb	r3, [r3, #1]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d115      	bne.n	8003ed2 <USB_EPStartXfer+0x26a>
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebc:	b29c      	uxth	r4, r3
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	441a      	add	r2, r3
 8003ec8:	4b9a      	ldr	r3, [pc, #616]	; (8004134 <USB_EPStartXfer+0x4cc>)
 8003eca:	4323      	orrs	r3, r4
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	8013      	strh	r3, [r2, #0]
 8003ed0:	e018      	b.n	8003f04 <USB_EPStartXfer+0x29c>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	785b      	ldrb	r3, [r3, #1]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d114      	bne.n	8003f04 <USB_EPStartXfer+0x29c>
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef0:	b29c      	uxth	r4, r3
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	441a      	add	r2, r3
 8003efc:	4b8e      	ldr	r3, [pc, #568]	; (8004138 <USB_EPStartXfer+0x4d0>)
 8003efe:	4323      	orrs	r3, r4
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f1a:	b29c      	uxth	r4, r3
 8003f1c:	f084 0310 	eor.w	r3, r4, #16
 8003f20:	b29c      	uxth	r4, r3
 8003f22:	f084 0320 	eor.w	r3, r4, #32
 8003f26:	b29c      	uxth	r4, r3
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	441a      	add	r2, r3
 8003f32:	4b82      	ldr	r3, [pc, #520]	; (800413c <USB_EPStartXfer+0x4d4>)
 8003f34:	4323      	orrs	r3, r4
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	8013      	strh	r3, [r2, #0]
 8003f3a:	e146      	b.n	80041ca <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	699a      	ldr	r2, [r3, #24]
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d909      	bls.n	8003f5c <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	1ad2      	subs	r2, r2, r3
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	619a      	str	r2, [r3, #24]
 8003f5a:	e005      	b.n	8003f68 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2200      	movs	r2, #0
 8003f66:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	7b1b      	ldrb	r3, [r3, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d148      	bne.n	8004002 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003f70:	687c      	ldr	r4, [r7, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	441c      	add	r4, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	4423      	add	r3, r4
 8003f84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f88:	461c      	mov	r4, r3
 8003f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10e      	bne.n	8003fae <USB_EPStartXfer+0x346>
 8003f90:	8823      	ldrh	r3, [r4, #0]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	8023      	strh	r3, [r4, #0]
 8003f9c:	8823      	ldrh	r3, [r4, #0]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	8023      	strh	r3, [r4, #0]
 8003fac:	e0f2      	b.n	8004194 <USB_EPStartXfer+0x52c>
 8003fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb0:	2b3e      	cmp	r3, #62	; 0x3e
 8003fb2:	d810      	bhi.n	8003fd6 <USB_EPStartXfer+0x36e>
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	085b      	lsrs	r3, r3, #1
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <USB_EPStartXfer+0x362>
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	029b      	lsls	r3, r3, #10
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	8023      	strh	r3, [r4, #0]
 8003fd4:	e0de      	b.n	8004194 <USB_EPStartXfer+0x52c>
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	095b      	lsrs	r3, r3, #5
 8003fda:	61fb      	str	r3, [r7, #28]
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d102      	bne.n	8003fec <USB_EPStartXfer+0x384>
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	029b      	lsls	r3, r3, #10
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ff8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	8023      	strh	r3, [r4, #0]
 8004000:	e0c8      	b.n	8004194 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	785b      	ldrb	r3, [r3, #1]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d148      	bne.n	800409c <USB_EPStartXfer+0x434>
 800400a:	687c      	ldr	r4, [r7, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004012:	b29b      	uxth	r3, r3
 8004014:	441c      	add	r4, r3
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	4423      	add	r3, r4
 800401e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004022:	461c      	mov	r4, r3
 8004024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10e      	bne.n	8004048 <USB_EPStartXfer+0x3e0>
 800402a:	8823      	ldrh	r3, [r4, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004032:	b29b      	uxth	r3, r3
 8004034:	8023      	strh	r3, [r4, #0]
 8004036:	8823      	ldrh	r3, [r4, #0]
 8004038:	b29b      	uxth	r3, r3
 800403a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800403e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004042:	b29b      	uxth	r3, r3
 8004044:	8023      	strh	r3, [r4, #0]
 8004046:	e03d      	b.n	80040c4 <USB_EPStartXfer+0x45c>
 8004048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404a:	2b3e      	cmp	r3, #62	; 0x3e
 800404c:	d810      	bhi.n	8004070 <USB_EPStartXfer+0x408>
 800404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004050:	085b      	lsrs	r3, r3, #1
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <USB_EPStartXfer+0x3fc>
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	3301      	adds	r3, #1
 8004062:	61bb      	str	r3, [r7, #24]
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	b29b      	uxth	r3, r3
 8004068:	029b      	lsls	r3, r3, #10
 800406a:	b29b      	uxth	r3, r3
 800406c:	8023      	strh	r3, [r4, #0]
 800406e:	e029      	b.n	80040c4 <USB_EPStartXfer+0x45c>
 8004070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <USB_EPStartXfer+0x41e>
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	3b01      	subs	r3, #1
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	b29b      	uxth	r3, r3
 800408a:	029b      	lsls	r3, r3, #10
 800408c:	b29b      	uxth	r3, r3
 800408e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004096:	b29b      	uxth	r3, r3
 8004098:	8023      	strh	r3, [r4, #0]
 800409a:	e013      	b.n	80040c4 <USB_EPStartXfer+0x45c>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	785b      	ldrb	r3, [r3, #1]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d10f      	bne.n	80040c4 <USB_EPStartXfer+0x45c>
 80040a4:	687c      	ldr	r4, [r7, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	441c      	add	r4, r3
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	4423      	add	r3, r4
 80040b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040bc:	461c      	mov	r4, r3
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	8023      	strh	r3, [r4, #0]
 80040c4:	687c      	ldr	r4, [r7, #4]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d14e      	bne.n	800416c <USB_EPStartXfer+0x504>
 80040ce:	687c      	ldr	r4, [r7, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	441c      	add	r4, r3
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	4423      	add	r3, r4
 80040e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040e6:	461c      	mov	r4, r3
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10e      	bne.n	800410c <USB_EPStartXfer+0x4a4>
 80040ee:	8823      	ldrh	r3, [r4, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	8023      	strh	r3, [r4, #0]
 80040fa:	8823      	ldrh	r3, [r4, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004106:	b29b      	uxth	r3, r3
 8004108:	8023      	strh	r3, [r4, #0]
 800410a:	e043      	b.n	8004194 <USB_EPStartXfer+0x52c>
 800410c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410e:	2b3e      	cmp	r3, #62	; 0x3e
 8004110:	d816      	bhi.n	8004140 <USB_EPStartXfer+0x4d8>
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <USB_EPStartXfer+0x4c0>
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	3301      	adds	r3, #1
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	b29b      	uxth	r3, r3
 800412c:	029b      	lsls	r3, r3, #10
 800412e:	b29b      	uxth	r3, r3
 8004130:	8023      	strh	r3, [r4, #0]
 8004132:	e02f      	b.n	8004194 <USB_EPStartXfer+0x52c>
 8004134:	ffff80c0 	.word	0xffff80c0
 8004138:	ffffc080 	.word	0xffffc080
 800413c:	ffff8080 	.word	0xffff8080
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	617b      	str	r3, [r7, #20]
 8004146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004148:	f003 031f 	and.w	r3, r3, #31
 800414c:	2b00      	cmp	r3, #0
 800414e:	d102      	bne.n	8004156 <USB_EPStartXfer+0x4ee>
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	3b01      	subs	r3, #1
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	b29b      	uxth	r3, r3
 800415a:	029b      	lsls	r3, r3, #10
 800415c:	b29b      	uxth	r3, r3
 800415e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004166:	b29b      	uxth	r3, r3
 8004168:	8023      	strh	r3, [r4, #0]
 800416a:	e013      	b.n	8004194 <USB_EPStartXfer+0x52c>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	785b      	ldrb	r3, [r3, #1]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d10f      	bne.n	8004194 <USB_EPStartXfer+0x52c>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800417a:	b29b      	uxth	r3, r3
 800417c:	441c      	add	r4, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	4423      	add	r3, r4
 8004186:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800418a:	613b      	str	r3, [r7, #16]
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	b29a      	uxth	r2, r3
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041aa:	b29c      	uxth	r4, r3
 80041ac:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80041b0:	b29c      	uxth	r4, r3
 80041b2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80041b6:	b29c      	uxth	r4, r3
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	441a      	add	r2, r3
 80041c2:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <USB_EPStartXfer+0x56c>)
 80041c4:	4323      	orrs	r3, r4
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3734      	adds	r7, #52	; 0x34
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd90      	pop	{r4, r7, pc}
 80041d4:	ffff8080 	.word	0xffff8080

080041d8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041d8:	b490      	push	{r4, r7}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	785b      	ldrb	r3, [r3, #1]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d018      	beq.n	800421c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004200:	b29c      	uxth	r4, r3
 8004202:	f084 0310 	eor.w	r3, r4, #16
 8004206:	b29c      	uxth	r4, r3
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	441a      	add	r2, r3
 8004212:	4b11      	ldr	r3, [pc, #68]	; (8004258 <USB_EPSetStall+0x80>)
 8004214:	4323      	orrs	r3, r4
 8004216:	b29b      	uxth	r3, r3
 8004218:	8013      	strh	r3, [r2, #0]
 800421a:	e017      	b.n	800424c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	b29b      	uxth	r3, r3
 800422a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	b29c      	uxth	r4, r3
 8004234:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004238:	b29c      	uxth	r4, r3
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	441a      	add	r2, r3
 8004244:	4b04      	ldr	r3, [pc, #16]	; (8004258 <USB_EPSetStall+0x80>)
 8004246:	4323      	orrs	r3, r4
 8004248:	b29b      	uxth	r3, r3
 800424a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bc90      	pop	{r4, r7}
 8004256:	4770      	bx	lr
 8004258:	ffff8080 	.word	0xffff8080

0800425c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800425c:	b490      	push	{r4, r7}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	7b1b      	ldrb	r3, [r3, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d17d      	bne.n	800436a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	785b      	ldrb	r3, [r3, #1]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d03d      	beq.n	80042f2 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29c      	uxth	r4, r3
 8004284:	4623      	mov	r3, r4
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b00      	cmp	r3, #0
 800428c:	d014      	beq.n	80042b8 <USB_EPClearStall+0x5c>
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	b29b      	uxth	r3, r3
 800429c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a4:	b29c      	uxth	r4, r3
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	441a      	add	r2, r3
 80042b0:	4b31      	ldr	r3, [pc, #196]	; (8004378 <USB_EPClearStall+0x11c>)
 80042b2:	4323      	orrs	r3, r4
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	78db      	ldrb	r3, [r3, #3]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d054      	beq.n	800436a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d6:	b29c      	uxth	r4, r3
 80042d8:	f084 0320 	eor.w	r3, r4, #32
 80042dc:	b29c      	uxth	r4, r3
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	441a      	add	r2, r3
 80042e8:	4b24      	ldr	r3, [pc, #144]	; (800437c <USB_EPClearStall+0x120>)
 80042ea:	4323      	orrs	r3, r4
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	8013      	strh	r3, [r2, #0]
 80042f0:	e03b      	b.n	800436a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29c      	uxth	r4, r3
 8004300:	4623      	mov	r3, r4
 8004302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d014      	beq.n	8004334 <USB_EPClearStall+0xd8>
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	b29b      	uxth	r3, r3
 8004318:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004320:	b29c      	uxth	r4, r3
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	441a      	add	r2, r3
 800432c:	4b14      	ldr	r3, [pc, #80]	; (8004380 <USB_EPClearStall+0x124>)
 800432e:	4323      	orrs	r3, r4
 8004330:	b29b      	uxth	r3, r3
 8004332:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	b29b      	uxth	r3, r3
 8004342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800434a:	b29c      	uxth	r4, r3
 800434c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004350:	b29c      	uxth	r4, r3
 8004352:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004356:	b29c      	uxth	r4, r3
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	441a      	add	r2, r3
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <USB_EPClearStall+0x120>)
 8004364:	4323      	orrs	r3, r4
 8004366:	b29b      	uxth	r3, r3
 8004368:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bc90      	pop	{r4, r7}
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	ffff80c0 	.word	0xffff80c0
 800437c:	ffff8080 	.word	0xffff8080
 8004380:	ffffc080 	.word	0xffffc080

08004384 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	460b      	mov	r3, r1
 800438e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d103      	bne.n	800439e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2280      	movs	r2, #128	; 0x80
 800439a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc80      	pop	{r7}
 80043a8:	4770      	bx	lr

080043aa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr

080043be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b085      	sub	sp, #20
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80043e4:	68fb      	ldr	r3, [r7, #12]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	bc80      	pop	{r7}
 8004404:	4770      	bx	lr

08004406 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004406:	b480      	push	{r7}
 8004408:	b08d      	sub	sp, #52	; 0x34
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	4611      	mov	r1, r2
 8004412:	461a      	mov	r2, r3
 8004414:	460b      	mov	r3, r1
 8004416:	80fb      	strh	r3, [r7, #6]
 8004418:	4613      	mov	r3, r2
 800441a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800441c:	88bb      	ldrh	r3, [r7, #4]
 800441e:	3301      	adds	r3, #1
 8004420:	085b      	lsrs	r3, r3, #1
 8004422:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	005a      	lsls	r2, r3, #1
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004438:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800443e:	e01e      	b.n	800447e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	3301      	adds	r3, #1
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	b29b      	uxth	r3, r3
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	b29b      	uxth	r3, r3
 8004456:	461a      	mov	r2, r3
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	b29a      	uxth	r2, r3
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004468:	3302      	adds	r3, #2
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	3302      	adds	r3, #2
 8004470:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004474:	3301      	adds	r3, #1
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	3b01      	subs	r3, #1
 800447c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800447e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1dd      	bne.n	8004440 <USB_WritePMA+0x3a>
  }
}
 8004484:	bf00      	nop
 8004486:	3734      	adds	r7, #52	; 0x34
 8004488:	46bd      	mov	sp, r7
 800448a:	bc80      	pop	{r7}
 800448c:	4770      	bx	lr

0800448e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800448e:	b480      	push	{r7}
 8004490:	b08b      	sub	sp, #44	; 0x2c
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	4611      	mov	r1, r2
 800449a:	461a      	mov	r2, r3
 800449c:	460b      	mov	r3, r1
 800449e:	80fb      	strh	r3, [r7, #6]
 80044a0:	4613      	mov	r3, r2
 80044a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80044a4:	88bb      	ldrh	r3, [r7, #4]
 80044a6:	085b      	lsrs	r3, r3, #1
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80044b4:	88fb      	ldrh	r3, [r7, #6]
 80044b6:	005a      	lsls	r2, r3, #1
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044c0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
 80044c6:	e01b      	b.n	8004500 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	3302      	adds	r3, #2
 80044d4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3301      	adds	r3, #1
 80044e2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	0a1b      	lsrs	r3, r3, #8
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3301      	adds	r3, #1
 80044f2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	3302      	adds	r3, #2
 80044f8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	3b01      	subs	r3, #1
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e0      	bne.n	80044c8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004506:	88bb      	ldrh	r3, [r7, #4]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	701a      	strb	r2, [r3, #0]
  }
}
 8004522:	bf00      	nop
 8004524:	372c      	adds	r7, #44	; 0x2c
 8004526:	46bd      	mov	sp, r7
 8004528:	bc80      	pop	{r7}
 800452a:	4770      	bx	lr

0800452c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	7c1b      	ldrb	r3, [r3, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d115      	bne.n	8004570 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004548:	2202      	movs	r2, #2
 800454a:	2181      	movs	r1, #129	; 0x81
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f001 fe6c 	bl	800622a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800455c:	2202      	movs	r2, #2
 800455e:	2101      	movs	r1, #1
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f001 fe62 	bl	800622a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800456e:	e012      	b.n	8004596 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004570:	2340      	movs	r3, #64	; 0x40
 8004572:	2202      	movs	r2, #2
 8004574:	2181      	movs	r1, #129	; 0x81
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f001 fe57 	bl	800622a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004582:	2340      	movs	r3, #64	; 0x40
 8004584:	2202      	movs	r2, #2
 8004586:	2101      	movs	r1, #1
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f001 fe4e 	bl	800622a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004596:	2308      	movs	r3, #8
 8004598:	2203      	movs	r2, #3
 800459a:	2182      	movs	r1, #130	; 0x82
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f001 fe44 	bl	800622a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80045a8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80045ac:	f001 ff5e 	bl	800646c <USBD_static_malloc>
 80045b0:	4602      	mov	r2, r0
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d102      	bne.n	80045c8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80045c2:	2301      	movs	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
 80045c6:	e026      	b.n	8004616 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045ce:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2200      	movs	r2, #0
 80045de:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	7c1b      	ldrb	r3, [r3, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045fc:	2101      	movs	r1, #1
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f001 fefd 	bl	80063fe <USBD_LL_PrepareReceive>
 8004604:	e007      	b.n	8004616 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800460c:	2340      	movs	r3, #64	; 0x40
 800460e:	2101      	movs	r1, #1
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f001 fef4 	bl	80063fe <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004616:	7bfb      	ldrb	r3, [r7, #15]
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004630:	2181      	movs	r1, #129	; 0x81
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f001 fe1f 	bl	8006276 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800463e:	2101      	movs	r1, #1
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f001 fe18 	bl	8006276 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800464e:	2182      	movs	r1, #130	; 0x82
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f001 fe10 	bl	8006276 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00e      	beq.n	8004684 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004676:	4618      	mov	r0, r3
 8004678:	f001 ff04 	bl	8006484 <USBD_static_free>
    pdev->pClassData = NULL;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b086      	sub	sp, #24
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800469e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d039      	beq.n	800472c <USBD_CDC_Setup+0x9e>
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d17c      	bne.n	80047b6 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	88db      	ldrh	r3, [r3, #6]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d029      	beq.n	8004718 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	b25b      	sxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	da11      	bge.n	80046f2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80046da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	88d2      	ldrh	r2, [r2, #6]
 80046e0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80046e2:	6939      	ldr	r1, [r7, #16]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	88db      	ldrh	r3, [r3, #6]
 80046e8:	461a      	mov	r2, r3
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f001 f9f6 	bl	8005adc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80046f0:	e068      	b.n	80047c4 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	785a      	ldrb	r2, [r3, #1]
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	88db      	ldrh	r3, [r3, #6]
 8004700:	b2da      	uxtb	r2, r3
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004708:	6939      	ldr	r1, [r7, #16]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	88db      	ldrh	r3, [r3, #6]
 800470e:	461a      	mov	r2, r3
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f001 fa11 	bl	8005b38 <USBD_CtlPrepareRx>
      break;
 8004716:	e055      	b.n	80047c4 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	7850      	ldrb	r0, [r2, #1]
 8004724:	2200      	movs	r2, #0
 8004726:	6839      	ldr	r1, [r7, #0]
 8004728:	4798      	blx	r3
      break;
 800472a:	e04b      	b.n	80047c4 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	785b      	ldrb	r3, [r3, #1]
 8004730:	2b0a      	cmp	r3, #10
 8004732:	d017      	beq.n	8004764 <USBD_CDC_Setup+0xd6>
 8004734:	2b0b      	cmp	r3, #11
 8004736:	d029      	beq.n	800478c <USBD_CDC_Setup+0xfe>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d133      	bne.n	80047a4 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004742:	2b03      	cmp	r3, #3
 8004744:	d107      	bne.n	8004756 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004746:	f107 030c 	add.w	r3, r7, #12
 800474a:	2202      	movs	r2, #2
 800474c:	4619      	mov	r1, r3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f001 f9c4 	bl	8005adc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004754:	e02e      	b.n	80047b4 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004756:	6839      	ldr	r1, [r7, #0]
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f001 f955 	bl	8005a08 <USBD_CtlError>
            ret = USBD_FAIL;
 800475e:	2302      	movs	r3, #2
 8004760:	75fb      	strb	r3, [r7, #23]
          break;
 8004762:	e027      	b.n	80047b4 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800476a:	2b03      	cmp	r3, #3
 800476c:	d107      	bne.n	800477e <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800476e:	f107 030f 	add.w	r3, r7, #15
 8004772:	2201      	movs	r2, #1
 8004774:	4619      	mov	r1, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f001 f9b0 	bl	8005adc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800477c:	e01a      	b.n	80047b4 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800477e:	6839      	ldr	r1, [r7, #0]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f001 f941 	bl	8005a08 <USBD_CtlError>
            ret = USBD_FAIL;
 8004786:	2302      	movs	r3, #2
 8004788:	75fb      	strb	r3, [r7, #23]
          break;
 800478a:	e013      	b.n	80047b4 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004792:	2b03      	cmp	r3, #3
 8004794:	d00d      	beq.n	80047b2 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004796:	6839      	ldr	r1, [r7, #0]
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 f935 	bl	8005a08 <USBD_CtlError>
            ret = USBD_FAIL;
 800479e:	2302      	movs	r3, #2
 80047a0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80047a2:	e006      	b.n	80047b2 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80047a4:	6839      	ldr	r1, [r7, #0]
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f001 f92e 	bl	8005a08 <USBD_CtlError>
          ret = USBD_FAIL;
 80047ac:	2302      	movs	r3, #2
 80047ae:	75fb      	strb	r3, [r7, #23]
          break;
 80047b0:	e000      	b.n	80047b4 <USBD_CDC_Setup+0x126>
          break;
 80047b2:	bf00      	nop
      }
      break;
 80047b4:	e006      	b.n	80047c4 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80047b6:	6839      	ldr	r1, [r7, #0]
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f001 f925 	bl	8005a08 <USBD_CtlError>
      ret = USBD_FAIL;
 80047be:	2302      	movs	r3, #2
 80047c0:	75fb      	strb	r3, [r7, #23]
      break;
 80047c2:	bf00      	nop
  }

  return ret;
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	460b      	mov	r3, r1
 80047d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047e0:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80047e8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d037      	beq.n	8004864 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80047f4:	78fa      	ldrb	r2, [r7, #3]
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	331c      	adds	r3, #28
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d026      	beq.n	8004858 <USBD_CDC_DataIn+0x8a>
 800480a:	78fa      	ldrb	r2, [r7, #3]
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	331c      	adds	r3, #28
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	68b9      	ldr	r1, [r7, #8]
 8004820:	0152      	lsls	r2, r2, #5
 8004822:	440a      	add	r2, r1
 8004824:	3238      	adds	r2, #56	; 0x38
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	fbb3 f1f2 	udiv	r1, r3, r2
 800482c:	fb02 f201 	mul.w	r2, r2, r1
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d110      	bne.n	8004858 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	4413      	add	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	440b      	add	r3, r1
 8004844:	331c      	adds	r3, #28
 8004846:	2200      	movs	r2, #0
 8004848:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800484a:	78f9      	ldrb	r1, [r7, #3]
 800484c:	2300      	movs	r3, #0
 800484e:	2200      	movs	r2, #0
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f001 fdb1 	bl	80063b8 <USBD_LL_Transmit>
 8004856:	e003      	b.n	8004860 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	e000      	b.n	8004866 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8004864:	2302      	movs	r3, #2
  }
}
 8004866:	4618      	mov	r0, r3
 8004868:	3710      	adds	r7, #16
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b084      	sub	sp, #16
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	460b      	mov	r3, r1
 8004878:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004880:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	4619      	mov	r1, r3
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f001 fddc 	bl	8006444 <USBD_LL_GetRxDataSize>
 800488c:	4602      	mov	r2, r0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00d      	beq.n	80048ba <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80048b2:	4611      	mov	r1, r2
 80048b4:	4798      	blx	r3

    return USBD_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	e000      	b.n	80048bc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80048ba:	2302      	movs	r3, #2
  }
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048d2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d015      	beq.n	800490a <USBD_CDC_EP0_RxReady+0x46>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80048e4:	2bff      	cmp	r3, #255	; 0xff
 80048e6:	d010      	beq.n	800490a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80048f6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80048fe:	b292      	uxth	r2, r2
 8004900:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	22ff      	movs	r2, #255	; 0xff
 8004906:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2243      	movs	r2, #67	; 0x43
 8004920:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004922:	4b03      	ldr	r3, [pc, #12]	; (8004930 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004924:	4618      	mov	r0, r3
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	20000094 	.word	0x20000094

08004934 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2243      	movs	r2, #67	; 0x43
 8004940:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004942:	4b03      	ldr	r3, [pc, #12]	; (8004950 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	bc80      	pop	{r7}
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20000050 	.word	0x20000050

08004954 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2243      	movs	r2, #67	; 0x43
 8004960:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004962:	4b03      	ldr	r3, [pc, #12]	; (8004970 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004964:	4618      	mov	r0, r3
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	bc80      	pop	{r7}
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	200000d8 	.word	0x200000d8

08004974 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	220a      	movs	r2, #10
 8004980:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004982:	4b03      	ldr	r3, [pc, #12]	; (8004990 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004984:	4618      	mov	r0, r3
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	2000000c 	.word	0x2000000c

08004994 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800499e:	2302      	movs	r3, #2
 80049a0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bc80      	pop	{r7}
 80049be:	4770      	bx	lr

080049c0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	4613      	mov	r3, r2
 80049cc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049d4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80049de:	88fa      	ldrh	r2, [r7, #6]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bc80      	pop	{r7}
 80049f0:	4770      	bx	lr

080049f2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b085      	sub	sp, #20
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a02:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr

08004a18 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d01c      	beq.n	8004a6c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d115      	bne.n	8004a68 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2181      	movs	r1, #129	; 0x81
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f001 fcaa 	bl	80063b8 <USBD_LL_Transmit>

      return USBD_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	e002      	b.n	8004a6e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e000      	b.n	8004a6e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004a6c:	2302      	movs	r3, #2
  }
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b084      	sub	sp, #16
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d017      	beq.n	8004ac0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	7c1b      	ldrb	r3, [r3, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f001 fcaa 	bl	80063fe <USBD_LL_PrepareReceive>
 8004aaa:	e007      	b.n	8004abc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ab2:	2340      	movs	r3, #64	; 0x40
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f001 fca1 	bl	80063fe <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	e000      	b.n	8004ac2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004ac0:	2302      	movs	r3, #2
  }
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e01a      	b.n	8004b18 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	79fa      	ldrb	r2, [r7, #7]
 8004b0e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f001 fb15 	bl	8006140 <USBD_LL_Init>

  return USBD_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d006      	beq.n	8004b42 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	73fb      	strb	r3, [r7, #15]
 8004b40:	e001      	b.n	8004b46 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004b42:	2302      	movs	r3, #2
 8004b44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bc80      	pop	{r7}
 8004b50:	4770      	bx	lr

08004b52 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f001 fb4a 	bl	80061f4 <USBD_LL_Start>

  return USBD_OK;
 8004b60:	2300      	movs	r3, #0
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bc80      	pop	{r7}
 8004b7c:	4770      	bx	lr

08004b7e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b084      	sub	sp, #16
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	460b      	mov	r3, r1
 8004b88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00c      	beq.n	8004bb2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	78fa      	ldrb	r2, [r7, #3]
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	4798      	blx	r3
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	78fa      	ldrb	r2, [r7, #3]
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	4798      	blx	r3

  return USBD_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
 8004bea:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004bf2:	6839      	ldr	r1, [r7, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fecb 	bl	8005990 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004c08:	461a      	mov	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c16:	f003 031f 	and.w	r3, r3, #31
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d00c      	beq.n	8004c38 <USBD_LL_SetupStage+0x56>
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d302      	bcc.n	8004c28 <USBD_LL_SetupStage+0x46>
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d010      	beq.n	8004c48 <USBD_LL_SetupStage+0x66>
 8004c26:	e017      	b.n	8004c58 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f9cb 	bl	8004fcc <USBD_StdDevReq>
      break;
 8004c36:	e01a      	b.n	8004c6e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fa2d 	bl	80050a0 <USBD_StdItfReq>
      break;
 8004c46:	e012      	b.n	8004c6e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fa6b 	bl	800512c <USBD_StdEPReq>
      break;
 8004c56:	e00a      	b.n	8004c6e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004c5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	4619      	mov	r1, r3
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f001 fb24 	bl	80062b4 <USBD_LL_StallEP>
      break;
 8004c6c:	bf00      	nop
  }

  return USBD_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	460b      	mov	r3, r1
 8004c82:	607a      	str	r2, [r7, #4]
 8004c84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004c86:	7afb      	ldrb	r3, [r7, #11]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d14b      	bne.n	8004d24 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004c92:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d134      	bne.n	8004d08 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d919      	bls.n	8004cde <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	1ad2      	subs	r2, r2, r3
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d203      	bcs.n	8004ccc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	e002      	b.n	8004cd2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 ff4c 	bl	8005b74 <USBD_CtlContinueRx>
 8004cdc:	e038      	b.n	8004d50 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004cf0:	2b03      	cmp	r3, #3
 8004cf2:	d105      	bne.n	8004d00 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 ff49 	bl	8005b98 <USBD_CtlSendStatus>
 8004d06:	e023      	b.n	8004d50 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d0e:	2b05      	cmp	r3, #5
 8004d10:	d11e      	bne.n	8004d50 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f001 fac9 	bl	80062b4 <USBD_LL_StallEP>
 8004d22:	e015      	b.n	8004d50 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00d      	beq.n	8004d4c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d108      	bne.n	8004d4c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	7afa      	ldrb	r2, [r7, #11]
 8004d44:	4611      	mov	r1, r2
 8004d46:	68f8      	ldr	r0, [r7, #12]
 8004d48:	4798      	blx	r3
 8004d4a:	e001      	b.n	8004d50 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e000      	b.n	8004d52 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b086      	sub	sp, #24
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	460b      	mov	r3, r1
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004d68:	7afb      	ldrb	r3, [r7, #11]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d17f      	bne.n	8004e6e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3314      	adds	r3, #20
 8004d72:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d15c      	bne.n	8004e38 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d915      	bls.n	8004db6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	1ad2      	subs	r2, r2, r3
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	b29b      	uxth	r3, r3
 8004d9e:	461a      	mov	r2, r3
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	68f8      	ldr	r0, [r7, #12]
 8004da4:	f000 feb6 	bl	8005b14 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004da8:	2300      	movs	r3, #0
 8004daa:	2200      	movs	r2, #0
 8004dac:	2100      	movs	r1, #0
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f001 fb25 	bl	80063fe <USBD_LL_PrepareReceive>
 8004db4:	e04e      	b.n	8004e54 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	6912      	ldr	r2, [r2, #16]
 8004dbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8004dc2:	fb02 f201 	mul.w	r2, r2, r1
 8004dc6:	1a9b      	subs	r3, r3, r2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d11c      	bne.n	8004e06 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d316      	bcc.n	8004e06 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d20f      	bcs.n	8004e06 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004de6:	2200      	movs	r2, #0
 8004de8:	2100      	movs	r1, #0
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f000 fe92 	bl	8005b14 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004df8:	2300      	movs	r3, #0
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f001 fafd 	bl	80063fe <USBD_LL_PrepareReceive>
 8004e04:	e026      	b.n	8004e54 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d105      	bne.n	8004e28 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004e28:	2180      	movs	r1, #128	; 0x80
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f001 fa42 	bl	80062b4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 fec4 	bl	8005bbe <USBD_CtlReceiveStatus>
 8004e36:	e00d      	b.n	8004e54 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004e3e:	2b04      	cmp	r3, #4
 8004e40:	d004      	beq.n	8004e4c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d103      	bne.n	8004e54 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004e4c:	2180      	movs	r1, #128	; 0x80
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f001 fa30 	bl	80062b4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d11d      	bne.n	8004e9a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f7ff fe83 	bl	8004b6a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004e6c:	e015      	b.n	8004e9a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00d      	beq.n	8004e96 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004e80:	2b03      	cmp	r3, #3
 8004e82:	d108      	bne.n	8004e96 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	7afa      	ldrb	r2, [r7, #11]
 8004e8e:	4611      	mov	r1, r2
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	4798      	blx	r3
 8004e94:	e001      	b.n	8004e9a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004e96:	2302      	movs	r3, #2
 8004e98:	e000      	b.n	8004e9c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004eac:	2340      	movs	r3, #64	; 0x40
 8004eae:	2200      	movs	r2, #0
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f001 f9b9 	bl	800622a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2240      	movs	r2, #64	; 0x40
 8004ec4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ec8:	2340      	movs	r3, #64	; 0x40
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2180      	movs	r1, #128	; 0x80
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f001 f9ab 	bl	800622a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2240      	movs	r2, #64	; 0x40
 8004ede:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d009      	beq.n	8004f1c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6852      	ldr	r2, [r2, #4]
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	4611      	mov	r1, r2
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	4798      	blx	r3
  }

  return USBD_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	460b      	mov	r3, r1
 8004f30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	78fa      	ldrb	r2, [r7, #3]
 8004f36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr

08004f44 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2204      	movs	r2, #4
 8004f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bc80      	pop	{r7}
 8004f6a:	4770      	bx	lr

08004f6c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d105      	bne.n	8004f8a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr

08004f96 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fa4:	2b03      	cmp	r3, #3
 8004fa6:	d10b      	bne.n	8004fc0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3708      	adds	r7, #8
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d004      	beq.n	8004ff0 <USBD_StdDevReq+0x24>
 8004fe6:	2b40      	cmp	r3, #64	; 0x40
 8004fe8:	d002      	beq.n	8004ff0 <USBD_StdDevReq+0x24>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d008      	beq.n	8005000 <USBD_StdDevReq+0x34>
 8004fee:	e04c      	b.n	800508a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	6839      	ldr	r1, [r7, #0]
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	4798      	blx	r3
      break;
 8004ffe:	e049      	b.n	8005094 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	785b      	ldrb	r3, [r3, #1]
 8005004:	2b09      	cmp	r3, #9
 8005006:	d83a      	bhi.n	800507e <USBD_StdDevReq+0xb2>
 8005008:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <USBD_StdDevReq+0x44>)
 800500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500e:	bf00      	nop
 8005010:	08005061 	.word	0x08005061
 8005014:	08005075 	.word	0x08005075
 8005018:	0800507f 	.word	0x0800507f
 800501c:	0800506b 	.word	0x0800506b
 8005020:	0800507f 	.word	0x0800507f
 8005024:	08005043 	.word	0x08005043
 8005028:	08005039 	.word	0x08005039
 800502c:	0800507f 	.word	0x0800507f
 8005030:	08005057 	.word	0x08005057
 8005034:	0800504d 	.word	0x0800504d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005038:	6839      	ldr	r1, [r7, #0]
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f9d4 	bl	80053e8 <USBD_GetDescriptor>
          break;
 8005040:	e022      	b.n	8005088 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005042:	6839      	ldr	r1, [r7, #0]
 8005044:	6878      	ldr	r0, [r7, #4]
 8005046:	f000 fb37 	bl	80056b8 <USBD_SetAddress>
          break;
 800504a:	e01d      	b.n	8005088 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800504c:	6839      	ldr	r1, [r7, #0]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 fb74 	bl	800573c <USBD_SetConfig>
          break;
 8005054:	e018      	b.n	8005088 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005056:	6839      	ldr	r1, [r7, #0]
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fbfd 	bl	8005858 <USBD_GetConfig>
          break;
 800505e:	e013      	b.n	8005088 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005060:	6839      	ldr	r1, [r7, #0]
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fc2c 	bl	80058c0 <USBD_GetStatus>
          break;
 8005068:	e00e      	b.n	8005088 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800506a:	6839      	ldr	r1, [r7, #0]
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fc5a 	bl	8005926 <USBD_SetFeature>
          break;
 8005072:	e009      	b.n	8005088 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005074:	6839      	ldr	r1, [r7, #0]
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fc69 	bl	800594e <USBD_ClrFeature>
          break;
 800507c:	e004      	b.n	8005088 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800507e:	6839      	ldr	r1, [r7, #0]
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fcc1 	bl	8005a08 <USBD_CtlError>
          break;
 8005086:	bf00      	nop
      }
      break;
 8005088:	e004      	b.n	8005094 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800508a:	6839      	ldr	r1, [r7, #0]
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fcbb 	bl	8005a08 <USBD_CtlError>
      break;
 8005092:	bf00      	nop
  }

  return ret;
 8005094:	7bfb      	ldrb	r3, [r7, #15]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop

080050a0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050b6:	2b20      	cmp	r3, #32
 80050b8:	d003      	beq.n	80050c2 <USBD_StdItfReq+0x22>
 80050ba:	2b40      	cmp	r3, #64	; 0x40
 80050bc:	d001      	beq.n	80050c2 <USBD_StdItfReq+0x22>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d12a      	bne.n	8005118 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80050c8:	3b01      	subs	r3, #1
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d81d      	bhi.n	800510a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	889b      	ldrh	r3, [r3, #4]
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d813      	bhi.n	8005100 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	6839      	ldr	r1, [r7, #0]
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	4798      	blx	r3
 80050e6:	4603      	mov	r3, r0
 80050e8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	88db      	ldrh	r3, [r3, #6]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d110      	bne.n	8005114 <USBD_StdItfReq+0x74>
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d10d      	bne.n	8005114 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 fd4d 	bl	8005b98 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80050fe:	e009      	b.n	8005114 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8005100:	6839      	ldr	r1, [r7, #0]
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fc80 	bl	8005a08 <USBD_CtlError>
          break;
 8005108:	e004      	b.n	8005114 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800510a:	6839      	ldr	r1, [r7, #0]
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fc7b 	bl	8005a08 <USBD_CtlError>
          break;
 8005112:	e000      	b.n	8005116 <USBD_StdItfReq+0x76>
          break;
 8005114:	bf00      	nop
      }
      break;
 8005116:	e004      	b.n	8005122 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005118:	6839      	ldr	r1, [r7, #0]
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fc74 	bl	8005a08 <USBD_CtlError>
      break;
 8005120:	bf00      	nop
  }

  return USBD_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3710      	adds	r7, #16
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	889b      	ldrh	r3, [r3, #4]
 800513e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005148:	2b20      	cmp	r3, #32
 800514a:	d004      	beq.n	8005156 <USBD_StdEPReq+0x2a>
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d002      	beq.n	8005156 <USBD_StdEPReq+0x2a>
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <USBD_StdEPReq+0x3a>
 8005154:	e13d      	b.n	80053d2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	6839      	ldr	r1, [r7, #0]
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	4798      	blx	r3
      break;
 8005164:	e13a      	b.n	80053dc <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800516e:	2b20      	cmp	r3, #32
 8005170:	d10a      	bne.n	8005188 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	6839      	ldr	r1, [r7, #0]
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	4798      	blx	r3
 8005180:	4603      	mov	r3, r0
 8005182:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	e12a      	b.n	80053de <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	785b      	ldrb	r3, [r3, #1]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d03e      	beq.n	800520e <USBD_StdEPReq+0xe2>
 8005190:	2b03      	cmp	r3, #3
 8005192:	d002      	beq.n	800519a <USBD_StdEPReq+0x6e>
 8005194:	2b00      	cmp	r3, #0
 8005196:	d070      	beq.n	800527a <USBD_StdEPReq+0x14e>
 8005198:	e115      	b.n	80053c6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d002      	beq.n	80051aa <USBD_StdEPReq+0x7e>
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d015      	beq.n	80051d4 <USBD_StdEPReq+0xa8>
 80051a8:	e02b      	b.n	8005202 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80051aa:	7bbb      	ldrb	r3, [r7, #14]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00c      	beq.n	80051ca <USBD_StdEPReq+0x9e>
 80051b0:	7bbb      	ldrb	r3, [r7, #14]
 80051b2:	2b80      	cmp	r3, #128	; 0x80
 80051b4:	d009      	beq.n	80051ca <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80051b6:	7bbb      	ldrb	r3, [r7, #14]
 80051b8:	4619      	mov	r1, r3
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f001 f87a 	bl	80062b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80051c0:	2180      	movs	r1, #128	; 0x80
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f001 f876 	bl	80062b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80051c8:	e020      	b.n	800520c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80051ca:	6839      	ldr	r1, [r7, #0]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fc1b 	bl	8005a08 <USBD_CtlError>
              break;
 80051d2:	e01b      	b.n	800520c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	885b      	ldrh	r3, [r3, #2]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10e      	bne.n	80051fa <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80051dc:	7bbb      	ldrb	r3, [r7, #14]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00b      	beq.n	80051fa <USBD_StdEPReq+0xce>
 80051e2:	7bbb      	ldrb	r3, [r7, #14]
 80051e4:	2b80      	cmp	r3, #128	; 0x80
 80051e6:	d008      	beq.n	80051fa <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	88db      	ldrh	r3, [r3, #6]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d104      	bne.n	80051fa <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80051f0:	7bbb      	ldrb	r3, [r7, #14]
 80051f2:	4619      	mov	r1, r3
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f001 f85d 	bl	80062b4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 fccc 	bl	8005b98 <USBD_CtlSendStatus>

              break;
 8005200:	e004      	b.n	800520c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8005202:	6839      	ldr	r1, [r7, #0]
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fbff 	bl	8005a08 <USBD_CtlError>
              break;
 800520a:	bf00      	nop
          }
          break;
 800520c:	e0e0      	b.n	80053d0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005214:	2b02      	cmp	r3, #2
 8005216:	d002      	beq.n	800521e <USBD_StdEPReq+0xf2>
 8005218:	2b03      	cmp	r3, #3
 800521a:	d015      	beq.n	8005248 <USBD_StdEPReq+0x11c>
 800521c:	e026      	b.n	800526c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800521e:	7bbb      	ldrb	r3, [r7, #14]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00c      	beq.n	800523e <USBD_StdEPReq+0x112>
 8005224:	7bbb      	ldrb	r3, [r7, #14]
 8005226:	2b80      	cmp	r3, #128	; 0x80
 8005228:	d009      	beq.n	800523e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800522a:	7bbb      	ldrb	r3, [r7, #14]
 800522c:	4619      	mov	r1, r3
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f001 f840 	bl	80062b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005234:	2180      	movs	r1, #128	; 0x80
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f001 f83c 	bl	80062b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800523c:	e01c      	b.n	8005278 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800523e:	6839      	ldr	r1, [r7, #0]
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fbe1 	bl	8005a08 <USBD_CtlError>
              break;
 8005246:	e017      	b.n	8005278 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	885b      	ldrh	r3, [r3, #2]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d112      	bne.n	8005276 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005250:	7bbb      	ldrb	r3, [r7, #14]
 8005252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005256:	2b00      	cmp	r3, #0
 8005258:	d004      	beq.n	8005264 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800525a:	7bbb      	ldrb	r3, [r7, #14]
 800525c:	4619      	mov	r1, r3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f001 f847 	bl	80062f2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fc97 	bl	8005b98 <USBD_CtlSendStatus>
              }
              break;
 800526a:	e004      	b.n	8005276 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800526c:	6839      	ldr	r1, [r7, #0]
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fbca 	bl	8005a08 <USBD_CtlError>
              break;
 8005274:	e000      	b.n	8005278 <USBD_StdEPReq+0x14c>
              break;
 8005276:	bf00      	nop
          }
          break;
 8005278:	e0aa      	b.n	80053d0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005280:	2b02      	cmp	r3, #2
 8005282:	d002      	beq.n	800528a <USBD_StdEPReq+0x15e>
 8005284:	2b03      	cmp	r3, #3
 8005286:	d032      	beq.n	80052ee <USBD_StdEPReq+0x1c2>
 8005288:	e097      	b.n	80053ba <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800528a:	7bbb      	ldrb	r3, [r7, #14]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <USBD_StdEPReq+0x174>
 8005290:	7bbb      	ldrb	r3, [r7, #14]
 8005292:	2b80      	cmp	r3, #128	; 0x80
 8005294:	d004      	beq.n	80052a0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005296:	6839      	ldr	r1, [r7, #0]
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fbb5 	bl	8005a08 <USBD_CtlError>
                break;
 800529e:	e091      	b.n	80053c4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	da0b      	bge.n	80052c0 <USBD_StdEPReq+0x194>
 80052a8:	7bbb      	ldrb	r3, [r7, #14]
 80052aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	3310      	adds	r3, #16
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	4413      	add	r3, r2
 80052bc:	3304      	adds	r3, #4
 80052be:	e00b      	b.n	80052d8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80052c0:	7bbb      	ldrb	r3, [r7, #14]
 80052c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052c6:	4613      	mov	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	4413      	add	r3, r2
 80052d6:	3304      	adds	r3, #4
 80052d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2202      	movs	r2, #2
 80052e4:	4619      	mov	r1, r3
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fbf8 	bl	8005adc <USBD_CtlSendData>
              break;
 80052ec:	e06a      	b.n	80053c4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80052ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	da11      	bge.n	800531a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80052f6:	7bbb      	ldrb	r3, [r7, #14]
 80052f8:	f003 020f 	and.w	r2, r3, #15
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	4613      	mov	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	4413      	add	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	440b      	add	r3, r1
 8005308:	3318      	adds	r3, #24
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d117      	bne.n	8005340 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fb78 	bl	8005a08 <USBD_CtlError>
                  break;
 8005318:	e054      	b.n	80053c4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800531a:	7bbb      	ldrb	r3, [r7, #14]
 800531c:	f003 020f 	and.w	r2, r3, #15
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d104      	bne.n	8005340 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005336:	6839      	ldr	r1, [r7, #0]
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fb65 	bl	8005a08 <USBD_CtlError>
                  break;
 800533e:	e041      	b.n	80053c4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005344:	2b00      	cmp	r3, #0
 8005346:	da0b      	bge.n	8005360 <USBD_StdEPReq+0x234>
 8005348:	7bbb      	ldrb	r3, [r7, #14]
 800534a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	3310      	adds	r3, #16
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	4413      	add	r3, r2
 800535c:	3304      	adds	r3, #4
 800535e:	e00b      	b.n	8005378 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005360:	7bbb      	ldrb	r3, [r7, #14]
 8005362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	4413      	add	r3, r2
 8005376:	3304      	adds	r3, #4
 8005378:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800537a:	7bbb      	ldrb	r3, [r7, #14]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <USBD_StdEPReq+0x25a>
 8005380:	7bbb      	ldrb	r3, [r7, #14]
 8005382:	2b80      	cmp	r3, #128	; 0x80
 8005384:	d103      	bne.n	800538e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e00e      	b.n	80053ac <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800538e:	7bbb      	ldrb	r3, [r7, #14]
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 ffcc 	bl	8006330 <USBD_LL_IsStallEP>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2201      	movs	r2, #1
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	e002      	b.n	80053ac <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2202      	movs	r2, #2
 80053b0:	4619      	mov	r1, r3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fb92 	bl	8005adc <USBD_CtlSendData>
              break;
 80053b8:	e004      	b.n	80053c4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80053ba:	6839      	ldr	r1, [r7, #0]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fb23 	bl	8005a08 <USBD_CtlError>
              break;
 80053c2:	bf00      	nop
          }
          break;
 80053c4:	e004      	b.n	80053d0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80053c6:	6839      	ldr	r1, [r7, #0]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 fb1d 	bl	8005a08 <USBD_CtlError>
          break;
 80053ce:	bf00      	nop
      }
      break;
 80053d0:	e004      	b.n	80053dc <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80053d2:	6839      	ldr	r1, [r7, #0]
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fb17 	bl	8005a08 <USBD_CtlError>
      break;
 80053da:	bf00      	nop
  }

  return ret;
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80053fa:	2300      	movs	r3, #0
 80053fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	885b      	ldrh	r3, [r3, #2]
 8005402:	0a1b      	lsrs	r3, r3, #8
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	2b06      	cmp	r3, #6
 800540a:	f200 8128 	bhi.w	800565e <USBD_GetDescriptor+0x276>
 800540e:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <USBD_GetDescriptor+0x2c>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	08005431 	.word	0x08005431
 8005418:	08005449 	.word	0x08005449
 800541c:	08005489 	.word	0x08005489
 8005420:	0800565f 	.word	0x0800565f
 8005424:	0800565f 	.word	0x0800565f
 8005428:	080055ff 	.word	0x080055ff
 800542c:	0800562b 	.word	0x0800562b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	7c12      	ldrb	r2, [r2, #16]
 800543c:	f107 0108 	add.w	r1, r7, #8
 8005440:	4610      	mov	r0, r2
 8005442:	4798      	blx	r3
 8005444:	60f8      	str	r0, [r7, #12]
      break;
 8005446:	e112      	b.n	800566e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	7c1b      	ldrb	r3, [r3, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10d      	bne.n	800546c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005458:	f107 0208 	add.w	r2, r7, #8
 800545c:	4610      	mov	r0, r2
 800545e:	4798      	blx	r3
 8005460:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	3301      	adds	r3, #1
 8005466:	2202      	movs	r2, #2
 8005468:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800546a:	e100      	b.n	800566e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	f107 0208 	add.w	r2, r7, #8
 8005478:	4610      	mov	r0, r2
 800547a:	4798      	blx	r3
 800547c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3301      	adds	r3, #1
 8005482:	2202      	movs	r2, #2
 8005484:	701a      	strb	r2, [r3, #0]
      break;
 8005486:	e0f2      	b.n	800566e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	885b      	ldrh	r3, [r3, #2]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b05      	cmp	r3, #5
 8005490:	f200 80ac 	bhi.w	80055ec <USBD_GetDescriptor+0x204>
 8005494:	a201      	add	r2, pc, #4	; (adr r2, 800549c <USBD_GetDescriptor+0xb4>)
 8005496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549a:	bf00      	nop
 800549c:	080054b5 	.word	0x080054b5
 80054a0:	080054e9 	.word	0x080054e9
 80054a4:	0800551d 	.word	0x0800551d
 80054a8:	08005551 	.word	0x08005551
 80054ac:	08005585 	.word	0x08005585
 80054b0:	080055b9 	.word	0x080055b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00b      	beq.n	80054d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	7c12      	ldrb	r2, [r2, #16]
 80054cc:	f107 0108 	add.w	r1, r7, #8
 80054d0:	4610      	mov	r0, r2
 80054d2:	4798      	blx	r3
 80054d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80054d6:	e091      	b.n	80055fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 fa94 	bl	8005a08 <USBD_CtlError>
            err++;
 80054e0:	7afb      	ldrb	r3, [r7, #11]
 80054e2:	3301      	adds	r3, #1
 80054e4:	72fb      	strb	r3, [r7, #11]
          break;
 80054e6:	e089      	b.n	80055fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00b      	beq.n	800550c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	7c12      	ldrb	r2, [r2, #16]
 8005500:	f107 0108 	add.w	r1, r7, #8
 8005504:	4610      	mov	r0, r2
 8005506:	4798      	blx	r3
 8005508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800550a:	e077      	b.n	80055fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800550c:	6839      	ldr	r1, [r7, #0]
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fa7a 	bl	8005a08 <USBD_CtlError>
            err++;
 8005514:	7afb      	ldrb	r3, [r7, #11]
 8005516:	3301      	adds	r3, #1
 8005518:	72fb      	strb	r3, [r7, #11]
          break;
 800551a:	e06f      	b.n	80055fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00b      	beq.n	8005540 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	7c12      	ldrb	r2, [r2, #16]
 8005534:	f107 0108 	add.w	r1, r7, #8
 8005538:	4610      	mov	r0, r2
 800553a:	4798      	blx	r3
 800553c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800553e:	e05d      	b.n	80055fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005540:	6839      	ldr	r1, [r7, #0]
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fa60 	bl	8005a08 <USBD_CtlError>
            err++;
 8005548:	7afb      	ldrb	r3, [r7, #11]
 800554a:	3301      	adds	r3, #1
 800554c:	72fb      	strb	r3, [r7, #11]
          break;
 800554e:	e055      	b.n	80055fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00b      	beq.n	8005574 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	7c12      	ldrb	r2, [r2, #16]
 8005568:	f107 0108 	add.w	r1, r7, #8
 800556c:	4610      	mov	r0, r2
 800556e:	4798      	blx	r3
 8005570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005572:	e043      	b.n	80055fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005574:	6839      	ldr	r1, [r7, #0]
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 fa46 	bl	8005a08 <USBD_CtlError>
            err++;
 800557c:	7afb      	ldrb	r3, [r7, #11]
 800557e:	3301      	adds	r3, #1
 8005580:	72fb      	strb	r3, [r7, #11]
          break;
 8005582:	e03b      	b.n	80055fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800558a:	695b      	ldr	r3, [r3, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00b      	beq.n	80055a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	7c12      	ldrb	r2, [r2, #16]
 800559c:	f107 0108 	add.w	r1, r7, #8
 80055a0:	4610      	mov	r0, r2
 80055a2:	4798      	blx	r3
 80055a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055a6:	e029      	b.n	80055fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055a8:	6839      	ldr	r1, [r7, #0]
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fa2c 	bl	8005a08 <USBD_CtlError>
            err++;
 80055b0:	7afb      	ldrb	r3, [r7, #11]
 80055b2:	3301      	adds	r3, #1
 80055b4:	72fb      	strb	r3, [r7, #11]
          break;
 80055b6:	e021      	b.n	80055fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00b      	beq.n	80055dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	687a      	ldr	r2, [r7, #4]
 80055ce:	7c12      	ldrb	r2, [r2, #16]
 80055d0:	f107 0108 	add.w	r1, r7, #8
 80055d4:	4610      	mov	r0, r2
 80055d6:	4798      	blx	r3
 80055d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80055da:	e00f      	b.n	80055fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fa12 	bl	8005a08 <USBD_CtlError>
            err++;
 80055e4:	7afb      	ldrb	r3, [r7, #11]
 80055e6:	3301      	adds	r3, #1
 80055e8:	72fb      	strb	r3, [r7, #11]
          break;
 80055ea:	e007      	b.n	80055fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fa0a 	bl	8005a08 <USBD_CtlError>
          err++;
 80055f4:	7afb      	ldrb	r3, [r7, #11]
 80055f6:	3301      	adds	r3, #1
 80055f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80055fa:	e038      	b.n	800566e <USBD_GetDescriptor+0x286>
 80055fc:	e037      	b.n	800566e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	7c1b      	ldrb	r3, [r3, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800560c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800560e:	f107 0208 	add.w	r2, r7, #8
 8005612:	4610      	mov	r0, r2
 8005614:	4798      	blx	r3
 8005616:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005618:	e029      	b.n	800566e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 f9f3 	bl	8005a08 <USBD_CtlError>
        err++;
 8005622:	7afb      	ldrb	r3, [r7, #11]
 8005624:	3301      	adds	r3, #1
 8005626:	72fb      	strb	r3, [r7, #11]
      break;
 8005628:	e021      	b.n	800566e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	7c1b      	ldrb	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d10d      	bne.n	800564e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	f107 0208 	add.w	r2, r7, #8
 800563e:	4610      	mov	r0, r2
 8005640:	4798      	blx	r3
 8005642:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	3301      	adds	r3, #1
 8005648:	2207      	movs	r2, #7
 800564a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800564c:	e00f      	b.n	800566e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800564e:	6839      	ldr	r1, [r7, #0]
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 f9d9 	bl	8005a08 <USBD_CtlError>
        err++;
 8005656:	7afb      	ldrb	r3, [r7, #11]
 8005658:	3301      	adds	r3, #1
 800565a:	72fb      	strb	r3, [r7, #11]
      break;
 800565c:	e007      	b.n	800566e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800565e:	6839      	ldr	r1, [r7, #0]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f9d1 	bl	8005a08 <USBD_CtlError>
      err++;
 8005666:	7afb      	ldrb	r3, [r7, #11]
 8005668:	3301      	adds	r3, #1
 800566a:	72fb      	strb	r3, [r7, #11]
      break;
 800566c:	bf00      	nop
  }

  if (err != 0U)
 800566e:	7afb      	ldrb	r3, [r7, #11]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d11c      	bne.n	80056ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005674:	893b      	ldrh	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d011      	beq.n	800569e <USBD_GetDescriptor+0x2b6>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	88db      	ldrh	r3, [r3, #6]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00d      	beq.n	800569e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	88da      	ldrh	r2, [r3, #6]
 8005686:	893b      	ldrh	r3, [r7, #8]
 8005688:	4293      	cmp	r3, r2
 800568a:	bf28      	it	cs
 800568c:	4613      	movcs	r3, r2
 800568e:	b29b      	uxth	r3, r3
 8005690:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005692:	893b      	ldrh	r3, [r7, #8]
 8005694:	461a      	mov	r2, r3
 8005696:	68f9      	ldr	r1, [r7, #12]
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fa1f 	bl	8005adc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	88db      	ldrh	r3, [r3, #6]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d104      	bne.n	80056b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fa76 	bl	8005b98 <USBD_CtlSendStatus>
 80056ac:	e000      	b.n	80056b0 <USBD_GetDescriptor+0x2c8>
    return;
 80056ae:	bf00      	nop
    }
  }
}
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop

080056b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	889b      	ldrh	r3, [r3, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d130      	bne.n	800572c <USBD_SetAddress+0x74>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	88db      	ldrh	r3, [r3, #6]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d12c      	bne.n	800572c <USBD_SetAddress+0x74>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	885b      	ldrh	r3, [r3, #2]
 80056d6:	2b7f      	cmp	r3, #127	; 0x7f
 80056d8:	d828      	bhi.n	800572c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	885b      	ldrh	r3, [r3, #2]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d104      	bne.n	80056fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f988 	bl	8005a08 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056f8:	e01c      	b.n	8005734 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	7bfa      	ldrb	r2, [r7, #15]
 80056fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	4619      	mov	r1, r3
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 fe37 	bl	800637a <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fa43 	bl	8005b98 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005712:	7bfb      	ldrb	r3, [r7, #15]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005720:	e008      	b.n	8005734 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800572a:	e003      	b.n	8005734 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800572c:	6839      	ldr	r1, [r7, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f000 f96a 	bl	8005a08 <USBD_CtlError>
  }
}
 8005734:	bf00      	nop
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	885b      	ldrh	r3, [r3, #2]
 800574a:	b2da      	uxtb	r2, r3
 800574c:	4b41      	ldr	r3, [pc, #260]	; (8005854 <USBD_SetConfig+0x118>)
 800574e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005750:	4b40      	ldr	r3, [pc, #256]	; (8005854 <USBD_SetConfig+0x118>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d904      	bls.n	8005762 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f954 	bl	8005a08 <USBD_CtlError>
 8005760:	e075      	b.n	800584e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005768:	2b02      	cmp	r3, #2
 800576a:	d002      	beq.n	8005772 <USBD_SetConfig+0x36>
 800576c:	2b03      	cmp	r3, #3
 800576e:	d023      	beq.n	80057b8 <USBD_SetConfig+0x7c>
 8005770:	e062      	b.n	8005838 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005772:	4b38      	ldr	r3, [pc, #224]	; (8005854 <USBD_SetConfig+0x118>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d01a      	beq.n	80057b0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800577a:	4b36      	ldr	r3, [pc, #216]	; (8005854 <USBD_SetConfig+0x118>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	461a      	mov	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2203      	movs	r2, #3
 8005788:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800578c:	4b31      	ldr	r3, [pc, #196]	; (8005854 <USBD_SetConfig+0x118>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	4619      	mov	r1, r3
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff f9f3 	bl	8004b7e <USBD_SetClassConfig>
 8005798:	4603      	mov	r3, r0
 800579a:	2b02      	cmp	r3, #2
 800579c:	d104      	bne.n	80057a8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 f931 	bl	8005a08 <USBD_CtlError>
            return;
 80057a6:	e052      	b.n	800584e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f9f5 	bl	8005b98 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80057ae:	e04e      	b.n	800584e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f9f1 	bl	8005b98 <USBD_CtlSendStatus>
        break;
 80057b6:	e04a      	b.n	800584e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80057b8:	4b26      	ldr	r3, [pc, #152]	; (8005854 <USBD_SetConfig+0x118>)
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d112      	bne.n	80057e6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80057c8:	4b22      	ldr	r3, [pc, #136]	; (8005854 <USBD_SetConfig+0x118>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	461a      	mov	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80057d2:	4b20      	ldr	r3, [pc, #128]	; (8005854 <USBD_SetConfig+0x118>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	4619      	mov	r1, r3
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff f9ef 	bl	8004bbc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f9da 	bl	8005b98 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80057e4:	e033      	b.n	800584e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80057e6:	4b1b      	ldr	r3, [pc, #108]	; (8005854 <USBD_SetConfig+0x118>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d01d      	beq.n	8005830 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff f9dd 	bl	8004bbc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005802:	4b14      	ldr	r3, [pc, #80]	; (8005854 <USBD_SetConfig+0x118>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800580c:	4b11      	ldr	r3, [pc, #68]	; (8005854 <USBD_SetConfig+0x118>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7ff f9b3 	bl	8004b7e <USBD_SetClassConfig>
 8005818:	4603      	mov	r3, r0
 800581a:	2b02      	cmp	r3, #2
 800581c:	d104      	bne.n	8005828 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f8f1 	bl	8005a08 <USBD_CtlError>
            return;
 8005826:	e012      	b.n	800584e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f9b5 	bl	8005b98 <USBD_CtlSendStatus>
        break;
 800582e:	e00e      	b.n	800584e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 f9b1 	bl	8005b98 <USBD_CtlSendStatus>
        break;
 8005836:	e00a      	b.n	800584e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f8e4 	bl	8005a08 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005840:	4b04      	ldr	r3, [pc, #16]	; (8005854 <USBD_SetConfig+0x118>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	4619      	mov	r1, r3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff f9b8 	bl	8004bbc <USBD_ClrClassConfig>
        break;
 800584c:	bf00      	nop
    }
  }
}
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000198 	.word	0x20000198

08005858 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	88db      	ldrh	r3, [r3, #6]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d004      	beq.n	8005874 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800586a:	6839      	ldr	r1, [r7, #0]
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f8cb 	bl	8005a08 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005872:	e021      	b.n	80058b8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800587a:	2b01      	cmp	r3, #1
 800587c:	db17      	blt.n	80058ae <USBD_GetConfig+0x56>
 800587e:	2b02      	cmp	r3, #2
 8005880:	dd02      	ble.n	8005888 <USBD_GetConfig+0x30>
 8005882:	2b03      	cmp	r3, #3
 8005884:	d00b      	beq.n	800589e <USBD_GetConfig+0x46>
 8005886:	e012      	b.n	80058ae <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3308      	adds	r3, #8
 8005892:	2201      	movs	r2, #1
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f920 	bl	8005adc <USBD_CtlSendData>
        break;
 800589c:	e00c      	b.n	80058b8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3304      	adds	r3, #4
 80058a2:	2201      	movs	r2, #1
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f918 	bl	8005adc <USBD_CtlSendData>
        break;
 80058ac:	e004      	b.n	80058b8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f8a9 	bl	8005a08 <USBD_CtlError>
        break;
 80058b6:	bf00      	nop
}
 80058b8:	bf00      	nop
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058d0:	3b01      	subs	r3, #1
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d81e      	bhi.n	8005914 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	88db      	ldrh	r3, [r3, #6]
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d004      	beq.n	80058e8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f891 	bl	8005a08 <USBD_CtlError>
        break;
 80058e6:	e01a      	b.n	800591e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d005      	beq.n	8005904 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f043 0202 	orr.w	r2, r3, #2
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	330c      	adds	r3, #12
 8005908:	2202      	movs	r2, #2
 800590a:	4619      	mov	r1, r3
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f8e5 	bl	8005adc <USBD_CtlSendData>
      break;
 8005912:	e004      	b.n	800591e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f876 	bl	8005a08 <USBD_CtlError>
      break;
 800591c:	bf00      	nop
  }
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b082      	sub	sp, #8
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
 800592e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	885b      	ldrh	r3, [r3, #2]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d106      	bne.n	8005946 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f929 	bl	8005b98 <USBD_CtlSendStatus>
  }
}
 8005946:	bf00      	nop
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b082      	sub	sp, #8
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
 8005956:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800595e:	3b01      	subs	r3, #1
 8005960:	2b02      	cmp	r3, #2
 8005962:	d80b      	bhi.n	800597c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	885b      	ldrh	r3, [r3, #2]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d10c      	bne.n	8005986 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 f90f 	bl	8005b98 <USBD_CtlSendStatus>
      }
      break;
 800597a:	e004      	b.n	8005986 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f842 	bl	8005a08 <USBD_CtlError>
      break;
 8005984:	e000      	b.n	8005988 <USBD_ClrFeature+0x3a>
      break;
 8005986:	bf00      	nop
  }
}
 8005988:	bf00      	nop
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781a      	ldrb	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	785a      	ldrb	r2, [r3, #1]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	3302      	adds	r3, #2
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	3303      	adds	r3, #3
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	021b      	lsls	r3, r3, #8
 80059bc:	b29b      	uxth	r3, r3
 80059be:	4413      	add	r3, r2
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	3304      	adds	r3, #4
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	3305      	adds	r3, #5
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	b29b      	uxth	r3, r3
 80059da:	4413      	add	r3, r2
 80059dc:	b29a      	uxth	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	3306      	adds	r3, #6
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	3307      	adds	r3, #7
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	4413      	add	r3, r2
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	80da      	strh	r2, [r3, #6]

}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr

08005a08 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005a12:	2180      	movs	r1, #128	; 0x80
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fc4d 	bl	80062b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fc49 	bl	80062b4 <USBD_LL_StallEP>
}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b086      	sub	sp, #24
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d032      	beq.n	8005aa6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f834 	bl	8005aae <USBD_GetLen>
 8005a46:	4603      	mov	r3, r0
 8005a48:	3301      	adds	r3, #1
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	1c5a      	adds	r2, r3, #1
 8005a58:	75fa      	strb	r2, [r7, #23]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4413      	add	r3, r2
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	7812      	ldrb	r2, [r2, #0]
 8005a64:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005a66:	7dfb      	ldrb	r3, [r7, #23]
 8005a68:	1c5a      	adds	r2, r3, #1
 8005a6a:	75fa      	strb	r2, [r7, #23]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4413      	add	r3, r2
 8005a72:	2203      	movs	r2, #3
 8005a74:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005a76:	e012      	b.n	8005a9e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	1c5a      	adds	r2, r3, #1
 8005a7c:	60fa      	str	r2, [r7, #12]
 8005a7e:	7dfa      	ldrb	r2, [r7, #23]
 8005a80:	1c51      	adds	r1, r2, #1
 8005a82:	75f9      	strb	r1, [r7, #23]
 8005a84:	4611      	mov	r1, r2
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	440a      	add	r2, r1
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	75fa      	strb	r2, [r7, #23]
 8005a94:	461a      	mov	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	4413      	add	r3, r2
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e8      	bne.n	8005a78 <USBD_GetString+0x4e>
    }
  }
}
 8005aa6:	bf00      	nop
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}

08005aae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b085      	sub	sp, #20
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005aba:	e005      	b.n	8005ac8 <USBD_GetLen+0x1a>
  {
    len++;
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1f5      	bne.n	8005abc <USBD_GetLen+0xe>
  }

  return len;
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bc80      	pop	{r7}
 8005ada:	4770      	bx	lr

08005adc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2202      	movs	r2, #2
 8005aee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005af2:	88fa      	ldrh	r2, [r7, #6]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005af8:	88fa      	ldrh	r2, [r7, #6]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005afe:	88fb      	ldrh	r3, [r7, #6]
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	2100      	movs	r1, #0
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 fc57 	bl	80063b8 <USBD_LL_Transmit>

  return USBD_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	2100      	movs	r1, #0
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 fc45 	bl	80063b8 <USBD_LL_Transmit>

  return USBD_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	4613      	mov	r3, r2
 8005b44:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2203      	movs	r2, #3
 8005b4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005b56:	88fa      	ldrh	r2, [r7, #6]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	2100      	movs	r1, #0
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 fc4a 	bl	80063fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b82:	88fb      	ldrh	r3, [r7, #6]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	2100      	movs	r1, #0
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 fc38 	bl	80063fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2200      	movs	r2, #0
 8005bac:	2100      	movs	r1, #0
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fc02 	bl	80063b8 <USBD_LL_Transmit>

  return USBD_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2205      	movs	r2, #5
 8005bca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bce:	2300      	movs	r3, #0
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fc12 	bl	80063fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005be8:	2200      	movs	r2, #0
 8005bea:	4912      	ldr	r1, [pc, #72]	; (8005c34 <MX_USB_DEVICE_Init+0x50>)
 8005bec:	4812      	ldr	r0, [pc, #72]	; (8005c38 <MX_USB_DEVICE_Init+0x54>)
 8005bee:	f7fe ff6c 	bl	8004aca <USBD_Init>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005bf8:	f7fa fbec 	bl	80003d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005bfc:	490f      	ldr	r1, [pc, #60]	; (8005c3c <MX_USB_DEVICE_Init+0x58>)
 8005bfe:	480e      	ldr	r0, [pc, #56]	; (8005c38 <MX_USB_DEVICE_Init+0x54>)
 8005c00:	f7fe ff8e 	bl	8004b20 <USBD_RegisterClass>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005c0a:	f7fa fbe3 	bl	80003d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005c0e:	490c      	ldr	r1, [pc, #48]	; (8005c40 <MX_USB_DEVICE_Init+0x5c>)
 8005c10:	4809      	ldr	r0, [pc, #36]	; (8005c38 <MX_USB_DEVICE_Init+0x54>)
 8005c12:	f7fe febf 	bl	8004994 <USBD_CDC_RegisterInterface>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005c1c:	f7fa fbda 	bl	80003d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005c20:	4805      	ldr	r0, [pc, #20]	; (8005c38 <MX_USB_DEVICE_Init+0x54>)
 8005c22:	f7fe ff96 	bl	8004b52 <USBD_Start>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005c2c:	f7fa fbd2 	bl	80003d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005c30:	bf00      	nop
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	2000012c 	.word	0x2000012c
 8005c38:	20000434 	.word	0x20000434
 8005c3c:	20000018 	.word	0x20000018
 8005c40:	2000011c 	.word	0x2000011c

08005c44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005c48:	2200      	movs	r2, #0
 8005c4a:	4905      	ldr	r1, [pc, #20]	; (8005c60 <CDC_Init_FS+0x1c>)
 8005c4c:	4805      	ldr	r0, [pc, #20]	; (8005c64 <CDC_Init_FS+0x20>)
 8005c4e:	f7fe feb7 	bl	80049c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005c52:	4905      	ldr	r1, [pc, #20]	; (8005c68 <CDC_Init_FS+0x24>)
 8005c54:	4803      	ldr	r0, [pc, #12]	; (8005c64 <CDC_Init_FS+0x20>)
 8005c56:	f7fe fecc 	bl	80049f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005c5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	200006fc 	.word	0x200006fc
 8005c64:	20000434 	.word	0x20000434
 8005c68:	200006f8 	.word	0x200006f8

08005c6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005c70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bc80      	pop	{r7}
 8005c78:	4770      	bx	lr
	...

08005c7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	6039      	str	r1, [r7, #0]
 8005c86:	71fb      	strb	r3, [r7, #7]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005c8c:	79fb      	ldrb	r3, [r7, #7]
 8005c8e:	2b23      	cmp	r3, #35	; 0x23
 8005c90:	d84a      	bhi.n	8005d28 <CDC_Control_FS+0xac>
 8005c92:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <CDC_Control_FS+0x1c>)
 8005c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c98:	08005d29 	.word	0x08005d29
 8005c9c:	08005d29 	.word	0x08005d29
 8005ca0:	08005d29 	.word	0x08005d29
 8005ca4:	08005d29 	.word	0x08005d29
 8005ca8:	08005d29 	.word	0x08005d29
 8005cac:	08005d29 	.word	0x08005d29
 8005cb0:	08005d29 	.word	0x08005d29
 8005cb4:	08005d29 	.word	0x08005d29
 8005cb8:	08005d29 	.word	0x08005d29
 8005cbc:	08005d29 	.word	0x08005d29
 8005cc0:	08005d29 	.word	0x08005d29
 8005cc4:	08005d29 	.word	0x08005d29
 8005cc8:	08005d29 	.word	0x08005d29
 8005ccc:	08005d29 	.word	0x08005d29
 8005cd0:	08005d29 	.word	0x08005d29
 8005cd4:	08005d29 	.word	0x08005d29
 8005cd8:	08005d29 	.word	0x08005d29
 8005cdc:	08005d29 	.word	0x08005d29
 8005ce0:	08005d29 	.word	0x08005d29
 8005ce4:	08005d29 	.word	0x08005d29
 8005ce8:	08005d29 	.word	0x08005d29
 8005cec:	08005d29 	.word	0x08005d29
 8005cf0:	08005d29 	.word	0x08005d29
 8005cf4:	08005d29 	.word	0x08005d29
 8005cf8:	08005d29 	.word	0x08005d29
 8005cfc:	08005d29 	.word	0x08005d29
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d29 	.word	0x08005d29
 8005d08:	08005d29 	.word	0x08005d29
 8005d0c:	08005d29 	.word	0x08005d29
 8005d10:	08005d29 	.word	0x08005d29
 8005d14:	08005d29 	.word	0x08005d29
 8005d18:	08005d29 	.word	0x08005d29
 8005d1c:	08005d29 	.word	0x08005d29
 8005d20:	08005d29 	.word	0x08005d29
 8005d24:	08005d29 	.word	0x08005d29
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005d28:	bf00      	nop
  }

  return (USBD_OK);
 8005d2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop

08005d38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	4805      	ldr	r0, [pc, #20]	; (8005d5c <CDC_Receive_FS+0x24>)
 8005d46:	f7fe fe54 	bl	80049f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005d4a:	4804      	ldr	r0, [pc, #16]	; (8005d5c <CDC_Receive_FS+0x24>)
 8005d4c:	f7fe fe93 	bl	8004a76 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005d50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000434 	.word	0x20000434

08005d60 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005d70:	4b0d      	ldr	r3, [pc, #52]	; (8005da8 <CDC_Transmit_FS+0x48>)
 8005d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d76:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e00b      	b.n	8005d9e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005d86:	887b      	ldrh	r3, [r7, #2]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	4806      	ldr	r0, [pc, #24]	; (8005da8 <CDC_Transmit_FS+0x48>)
 8005d8e:	f7fe fe17 	bl	80049c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005d92:	4805      	ldr	r0, [pc, #20]	; (8005da8 <CDC_Transmit_FS+0x48>)
 8005d94:	f7fe fe40 	bl	8004a18 <USBD_CDC_TransmitPacket>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000434 	.word	0x20000434

08005dac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	6039      	str	r1, [r7, #0]
 8005db6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2212      	movs	r2, #18
 8005dbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005dbe:	4b03      	ldr	r3, [pc, #12]	; (8005dcc <USBD_FS_DeviceDescriptor+0x20>)
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bc80      	pop	{r7}
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	20000148 	.word	0x20000148

08005dd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	6039      	str	r1, [r7, #0]
 8005dda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2204      	movs	r2, #4
 8005de0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005de2:	4b03      	ldr	r3, [pc, #12]	; (8005df0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bc80      	pop	{r7}
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	2000015c 	.word	0x2000015c

08005df4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	6039      	str	r1, [r7, #0]
 8005dfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e00:	79fb      	ldrb	r3, [r7, #7]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d105      	bne.n	8005e12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	4907      	ldr	r1, [pc, #28]	; (8005e28 <USBD_FS_ProductStrDescriptor+0x34>)
 8005e0a:	4808      	ldr	r0, [pc, #32]	; (8005e2c <USBD_FS_ProductStrDescriptor+0x38>)
 8005e0c:	f7ff fe0d 	bl	8005a2a <USBD_GetString>
 8005e10:	e004      	b.n	8005e1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	4904      	ldr	r1, [pc, #16]	; (8005e28 <USBD_FS_ProductStrDescriptor+0x34>)
 8005e16:	4805      	ldr	r0, [pc, #20]	; (8005e2c <USBD_FS_ProductStrDescriptor+0x38>)
 8005e18:	f7ff fe07 	bl	8005a2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e1c:	4b02      	ldr	r3, [pc, #8]	; (8005e28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3708      	adds	r7, #8
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	20000700 	.word	0x20000700
 8005e2c:	0800659c 	.word	0x0800659c

08005e30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	6039      	str	r1, [r7, #0]
 8005e3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	4904      	ldr	r1, [pc, #16]	; (8005e50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005e40:	4804      	ldr	r0, [pc, #16]	; (8005e54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005e42:	f7ff fdf2 	bl	8005a2a <USBD_GetString>
  return USBD_StrDesc;
 8005e46:	4b02      	ldr	r3, [pc, #8]	; (8005e50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20000700 	.word	0x20000700
 8005e54:	080065b4 	.word	0x080065b4

08005e58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	4603      	mov	r3, r0
 8005e60:	6039      	str	r1, [r7, #0]
 8005e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	221a      	movs	r2, #26
 8005e68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005e6a:	f000 f843 	bl	8005ef4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005e6e:	4b02      	ldr	r3, [pc, #8]	; (8005e78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20000160 	.word	0x20000160

08005e7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4603      	mov	r3, r0
 8005e84:	6039      	str	r1, [r7, #0]
 8005e86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d105      	bne.n	8005e9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	4907      	ldr	r1, [pc, #28]	; (8005eb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e92:	4808      	ldr	r0, [pc, #32]	; (8005eb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005e94:	f7ff fdc9 	bl	8005a2a <USBD_GetString>
 8005e98:	e004      	b.n	8005ea4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e9a:	683a      	ldr	r2, [r7, #0]
 8005e9c:	4904      	ldr	r1, [pc, #16]	; (8005eb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005e9e:	4805      	ldr	r0, [pc, #20]	; (8005eb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005ea0:	f7ff fdc3 	bl	8005a2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ea4:	4b02      	ldr	r3, [pc, #8]	; (8005eb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000700 	.word	0x20000700
 8005eb4:	080065c8 	.word	0x080065c8

08005eb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	6039      	str	r1, [r7, #0]
 8005ec2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005ec4:	79fb      	ldrb	r3, [r7, #7]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d105      	bne.n	8005ed6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	4907      	ldr	r1, [pc, #28]	; (8005eec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005ece:	4808      	ldr	r0, [pc, #32]	; (8005ef0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005ed0:	f7ff fdab 	bl	8005a2a <USBD_GetString>
 8005ed4:	e004      	b.n	8005ee0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	4904      	ldr	r1, [pc, #16]	; (8005eec <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005eda:	4805      	ldr	r0, [pc, #20]	; (8005ef0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005edc:	f7ff fda5 	bl	8005a2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ee0:	4b02      	ldr	r3, [pc, #8]	; (8005eec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000700 	.word	0x20000700
 8005ef0:	080065d4 	.word	0x080065d4

08005ef4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005efa:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <Get_SerialNum+0x44>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005f00:	4b0e      	ldr	r3, [pc, #56]	; (8005f3c <Get_SerialNum+0x48>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005f06:	4b0e      	ldr	r3, [pc, #56]	; (8005f40 <Get_SerialNum+0x4c>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4413      	add	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d009      	beq.n	8005f2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005f1a:	2208      	movs	r2, #8
 8005f1c:	4909      	ldr	r1, [pc, #36]	; (8005f44 <Get_SerialNum+0x50>)
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f814 	bl	8005f4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005f24:	2204      	movs	r2, #4
 8005f26:	4908      	ldr	r1, [pc, #32]	; (8005f48 <Get_SerialNum+0x54>)
 8005f28:	68b8      	ldr	r0, [r7, #8]
 8005f2a:	f000 f80f 	bl	8005f4c <IntToUnicode>
  }
}
 8005f2e:	bf00      	nop
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	1ffff7e8 	.word	0x1ffff7e8
 8005f3c:	1ffff7ec 	.word	0x1ffff7ec
 8005f40:	1ffff7f0 	.word	0x1ffff7f0
 8005f44:	20000162 	.word	0x20000162
 8005f48:	20000172 	.word	0x20000172

08005f4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	4613      	mov	r3, r2
 8005f58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005f5e:	2300      	movs	r3, #0
 8005f60:	75fb      	strb	r3, [r7, #23]
 8005f62:	e027      	b.n	8005fb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	0f1b      	lsrs	r3, r3, #28
 8005f68:	2b09      	cmp	r3, #9
 8005f6a:	d80b      	bhi.n	8005f84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	0f1b      	lsrs	r3, r3, #28
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	4619      	mov	r1, r3
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	440b      	add	r3, r1
 8005f7c:	3230      	adds	r2, #48	; 0x30
 8005f7e:	b2d2      	uxtb	r2, r2
 8005f80:	701a      	strb	r2, [r3, #0]
 8005f82:	e00a      	b.n	8005f9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	0f1b      	lsrs	r3, r3, #28
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	4619      	mov	r1, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	440b      	add	r3, r1
 8005f94:	3237      	adds	r2, #55	; 0x37
 8005f96:	b2d2      	uxtb	r2, r2
 8005f98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005fa0:	7dfb      	ldrb	r3, [r7, #23]
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	4413      	add	r3, r2
 8005faa:	2200      	movs	r2, #0
 8005fac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005fae:	7dfb      	ldrb	r3, [r7, #23]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	75fb      	strb	r3, [r7, #23]
 8005fb4:	7dfa      	ldrb	r2, [r7, #23]
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d3d3      	bcc.n	8005f64 <IntToUnicode+0x18>
  }
}
 8005fbc:	bf00      	nop
 8005fbe:	371c      	adds	r7, #28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bc80      	pop	{r7}
 8005fc4:	4770      	bx	lr
	...

08005fc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a0d      	ldr	r2, [pc, #52]	; (800600c <HAL_PCD_MspInit+0x44>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d113      	bne.n	8006002 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005fda:	4b0d      	ldr	r3, [pc, #52]	; (8006010 <HAL_PCD_MspInit+0x48>)
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	4a0c      	ldr	r2, [pc, #48]	; (8006010 <HAL_PCD_MspInit+0x48>)
 8005fe0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005fe4:	61d3      	str	r3, [r2, #28]
 8005fe6:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <HAL_PCD_MspInit+0x48>)
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	2014      	movs	r0, #20
 8005ff8:	f7fb f963 	bl	80012c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8005ffc:	2014      	movs	r0, #20
 8005ffe:	f7fb f97c 	bl	80012fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006002:	bf00      	nop
 8006004:	3710      	adds	r7, #16
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40005c00 	.word	0x40005c00
 8006010:	40021000 	.word	0x40021000

08006014 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006028:	4619      	mov	r1, r3
 800602a:	4610      	mov	r0, r2
 800602c:	f7fe fdd9 	bl	8004be2 <USBD_LL_SetupStage>
}
 8006030:	bf00      	nop
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	015b      	lsls	r3, r3, #5
 8006050:	4413      	add	r3, r2
 8006052:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	4619      	mov	r1, r3
 800605c:	f7fe fe0c 	bl	8004c78 <USBD_LL_DataOutStage>
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800607a:	78fb      	ldrb	r3, [r7, #3]
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	015b      	lsls	r3, r3, #5
 8006080:	4413      	add	r3, r2
 8006082:	333c      	adds	r3, #60	; 0x3c
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	4619      	mov	r1, r3
 800608a:	f7fe fe66 	bl	8004d5a <USBD_LL_DataInStage>
}
 800608e:	bf00      	nop
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b082      	sub	sp, #8
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fe ff76 	bl	8004f96 <USBD_LL_SOF>
}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80060ba:	2301      	movs	r3, #1
 80060bc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d001      	beq.n	80060ca <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80060c6:	f7fa f985 	bl	80003d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80060d0:	7bfa      	ldrb	r2, [r7, #15]
 80060d2:	4611      	mov	r1, r2
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fe ff26 	bl	8004f26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fe fedf 	bl	8004ea4 <USBD_LL_Reset>
}
 80060e6:	bf00      	nop
 80060e8:	3710      	adds	r7, #16
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fe ff20 	bl	8004f44 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800610c:	4b04      	ldr	r3, [pc, #16]	; (8006120 <HAL_PCD_SuspendCallback+0x30>)
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	4a03      	ldr	r2, [pc, #12]	; (8006120 <HAL_PCD_SuspendCallback+0x30>)
 8006112:	f043 0306 	orr.w	r3, r3, #6
 8006116:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	e000ed00 	.word	0xe000ed00

08006124 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8006132:	4618      	mov	r0, r3
 8006134:	f7fe ff1a 	bl	8004f6c <USBD_LL_Resume>
}
 8006138:	bf00      	nop
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8006148:	4a28      	ldr	r2, [pc, #160]	; (80061ec <USBD_LL_Init+0xac>)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a26      	ldr	r2, [pc, #152]	; (80061ec <USBD_LL_Init+0xac>)
 8006154:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8006158:	4b24      	ldr	r3, [pc, #144]	; (80061ec <USBD_LL_Init+0xac>)
 800615a:	4a25      	ldr	r2, [pc, #148]	; (80061f0 <USBD_LL_Init+0xb0>)
 800615c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800615e:	4b23      	ldr	r3, [pc, #140]	; (80061ec <USBD_LL_Init+0xac>)
 8006160:	2208      	movs	r2, #8
 8006162:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006164:	4b21      	ldr	r3, [pc, #132]	; (80061ec <USBD_LL_Init+0xac>)
 8006166:	2202      	movs	r2, #2
 8006168:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800616a:	4b20      	ldr	r3, [pc, #128]	; (80061ec <USBD_LL_Init+0xac>)
 800616c:	2200      	movs	r2, #0
 800616e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006170:	4b1e      	ldr	r3, [pc, #120]	; (80061ec <USBD_LL_Init+0xac>)
 8006172:	2200      	movs	r2, #0
 8006174:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006176:	4b1d      	ldr	r3, [pc, #116]	; (80061ec <USBD_LL_Init+0xac>)
 8006178:	2200      	movs	r2, #0
 800617a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800617c:	481b      	ldr	r0, [pc, #108]	; (80061ec <USBD_LL_Init+0xac>)
 800617e:	f7fb fc1f 	bl	80019c0 <HAL_PCD_Init>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8006188:	f7fa f924 	bl	80003d4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006192:	2318      	movs	r3, #24
 8006194:	2200      	movs	r2, #0
 8006196:	2100      	movs	r1, #0
 8006198:	f7fc fab8 	bl	800270c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80061a2:	2358      	movs	r3, #88	; 0x58
 80061a4:	2200      	movs	r2, #0
 80061a6:	2180      	movs	r1, #128	; 0x80
 80061a8:	f7fc fab0 	bl	800270c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80061b2:	23c0      	movs	r3, #192	; 0xc0
 80061b4:	2200      	movs	r2, #0
 80061b6:	2181      	movs	r1, #129	; 0x81
 80061b8:	f7fc faa8 	bl	800270c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80061c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80061c6:	2200      	movs	r2, #0
 80061c8:	2101      	movs	r1, #1
 80061ca:	f7fc fa9f 	bl	800270c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80061d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061d8:	2200      	movs	r2, #0
 80061da:	2182      	movs	r1, #130	; 0x82
 80061dc:	f7fc fa96 	bl	800270c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3708      	adds	r7, #8
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	20000800 	.word	0x20000800
 80061f0:	40005c00 	.word	0x40005c00

080061f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006200:	2300      	movs	r3, #0
 8006202:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800620a:	4618      	mov	r0, r3
 800620c:	f7fb fcb9 	bl	8001b82 <HAL_PCD_Start>
 8006210:	4603      	mov	r3, r0
 8006212:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006214:	7bfb      	ldrb	r3, [r7, #15]
 8006216:	4618      	mov	r0, r3
 8006218:	f000 f948 	bl	80064ac <USBD_Get_USB_Status>
 800621c:	4603      	mov	r3, r0
 800621e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006220:	7bbb      	ldrb	r3, [r7, #14]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	4608      	mov	r0, r1
 8006234:	4611      	mov	r1, r2
 8006236:	461a      	mov	r2, r3
 8006238:	4603      	mov	r3, r0
 800623a:	70fb      	strb	r3, [r7, #3]
 800623c:	460b      	mov	r3, r1
 800623e:	70bb      	strb	r3, [r7, #2]
 8006240:	4613      	mov	r3, r2
 8006242:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006252:	78bb      	ldrb	r3, [r7, #2]
 8006254:	883a      	ldrh	r2, [r7, #0]
 8006256:	78f9      	ldrb	r1, [r7, #3]
 8006258:	f7fb fdec 	bl	8001e34 <HAL_PCD_EP_Open>
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006260:	7bfb      	ldrb	r3, [r7, #15]
 8006262:	4618      	mov	r0, r3
 8006264:	f000 f922 	bl	80064ac <USBD_Get_USB_Status>
 8006268:	4603      	mov	r3, r0
 800626a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800626c:	7bbb      	ldrb	r3, [r7, #14]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006290:	78fa      	ldrb	r2, [r7, #3]
 8006292:	4611      	mov	r1, r2
 8006294:	4618      	mov	r0, r3
 8006296:	f7fb fe2d 	bl	8001ef4 <HAL_PCD_EP_Close>
 800629a:	4603      	mov	r3, r0
 800629c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800629e:	7bfb      	ldrb	r3, [r7, #15]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 f903 	bl	80064ac <USBD_Get_USB_Status>
 80062a6:	4603      	mov	r3, r0
 80062a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80062aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062ce:	78fa      	ldrb	r2, [r7, #3]
 80062d0:	4611      	mov	r1, r2
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fb fed7 	bl	8002086 <HAL_PCD_EP_SetStall>
 80062d8:	4603      	mov	r3, r0
 80062da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 f8e4 	bl	80064ac <USBD_Get_USB_Status>
 80062e4:	4603      	mov	r3, r0
 80062e6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80062e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	460b      	mov	r3, r1
 80062fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800630c:	78fa      	ldrb	r2, [r7, #3]
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f7fb ff12 	bl	800213a <HAL_PCD_EP_ClrStall>
 8006316:	4603      	mov	r3, r0
 8006318:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800631a:	7bfb      	ldrb	r3, [r7, #15]
 800631c:	4618      	mov	r0, r3
 800631e:	f000 f8c5 	bl	80064ac <USBD_Get_USB_Status>
 8006322:	4603      	mov	r3, r0
 8006324:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006326:	7bbb      	ldrb	r3, [r7, #14]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	460b      	mov	r3, r1
 800633a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006342:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006348:	2b00      	cmp	r3, #0
 800634a:	da08      	bge.n	800635e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	015b      	lsls	r3, r3, #5
 8006356:	4413      	add	r3, r2
 8006358:	332a      	adds	r3, #42	; 0x2a
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	e008      	b.n	8006370 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	015b      	lsls	r3, r3, #5
 8006368:	4413      	add	r3, r2
 800636a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800636e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	bc80      	pop	{r7}
 8006378:	4770      	bx	lr

0800637a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b084      	sub	sp, #16
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	460b      	mov	r3, r1
 8006384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800638a:	2300      	movs	r3, #0
 800638c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006394:	78fa      	ldrb	r2, [r7, #3]
 8006396:	4611      	mov	r1, r2
 8006398:	4618      	mov	r0, r3
 800639a:	f7fb fd26 	bl	8001dea <HAL_PCD_SetAddress>
 800639e:	4603      	mov	r3, r0
 80063a0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 f881 	bl	80064ac <USBD_Get_USB_Status>
 80063aa:	4603      	mov	r3, r0
 80063ac:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80063ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	607a      	str	r2, [r7, #4]
 80063c2:	461a      	mov	r2, r3
 80063c4:	460b      	mov	r3, r1
 80063c6:	72fb      	strb	r3, [r7, #11]
 80063c8:	4613      	mov	r3, r2
 80063ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063cc:	2300      	movs	r3, #0
 80063ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063d0:	2300      	movs	r3, #0
 80063d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80063da:	893b      	ldrh	r3, [r7, #8]
 80063dc:	7af9      	ldrb	r1, [r7, #11]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	f7fb fe18 	bl	8002014 <HAL_PCD_EP_Transmit>
 80063e4:	4603      	mov	r3, r0
 80063e6:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 f85e 	bl	80064ac <USBD_Get_USB_Status>
 80063f0:	4603      	mov	r3, r0
 80063f2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80063f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b086      	sub	sp, #24
 8006402:	af00      	add	r7, sp, #0
 8006404:	60f8      	str	r0, [r7, #12]
 8006406:	607a      	str	r2, [r7, #4]
 8006408:	461a      	mov	r2, r3
 800640a:	460b      	mov	r3, r1
 800640c:	72fb      	strb	r3, [r7, #11]
 800640e:	4613      	mov	r3, r2
 8006410:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006420:	893b      	ldrh	r3, [r7, #8]
 8006422:	7af9      	ldrb	r1, [r7, #11]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	f7fb fda7 	bl	8001f78 <HAL_PCD_EP_Receive>
 800642a:	4603      	mov	r3, r0
 800642c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	4618      	mov	r0, r3
 8006432:	f000 f83b 	bl	80064ac <USBD_Get_USB_Status>
 8006436:	4603      	mov	r3, r0
 8006438:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800643a:	7dbb      	ldrb	r3, [r7, #22]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3718      	adds	r7, #24
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	460b      	mov	r3, r1
 800644e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006456:	78fa      	ldrb	r2, [r7, #3]
 8006458:	4611      	mov	r1, r2
 800645a:	4618      	mov	r0, r3
 800645c:	f7fb fdc6 	bl	8001fec <HAL_PCD_EP_GetRxCount>
 8006460:	4603      	mov	r3, r0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3708      	adds	r7, #8
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
	...

0800646c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006474:	4b02      	ldr	r3, [pc, #8]	; (8006480 <USBD_static_malloc+0x14>)
}
 8006476:	4618      	mov	r0, r3
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr
 8006480:	2000019c 	.word	0x2000019c

08006484 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]

}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr

08006496 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	460b      	mov	r3, r1
 80064a0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc80      	pop	{r7}
 80064aa:	4770      	bx	lr

080064ac <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	4603      	mov	r3, r0
 80064b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	2b03      	cmp	r3, #3
 80064be:	d817      	bhi.n	80064f0 <USBD_Get_USB_Status+0x44>
 80064c0:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <USBD_Get_USB_Status+0x1c>)
 80064c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c6:	bf00      	nop
 80064c8:	080064d9 	.word	0x080064d9
 80064cc:	080064df 	.word	0x080064df
 80064d0:	080064e5 	.word	0x080064e5
 80064d4:	080064eb 	.word	0x080064eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80064d8:	2300      	movs	r3, #0
 80064da:	73fb      	strb	r3, [r7, #15]
    break;
 80064dc:	e00b      	b.n	80064f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80064de:	2302      	movs	r3, #2
 80064e0:	73fb      	strb	r3, [r7, #15]
    break;
 80064e2:	e008      	b.n	80064f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80064e4:	2301      	movs	r3, #1
 80064e6:	73fb      	strb	r3, [r7, #15]
    break;
 80064e8:	e005      	b.n	80064f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80064ea:	2302      	movs	r3, #2
 80064ec:	73fb      	strb	r3, [r7, #15]
    break;
 80064ee:	e002      	b.n	80064f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80064f0:	2302      	movs	r3, #2
 80064f2:	73fb      	strb	r3, [r7, #15]
    break;
 80064f4:	bf00      	nop
  }
  return usb_status;
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bc80      	pop	{r7}
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop

08006504 <__libc_init_array>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	2500      	movs	r5, #0
 8006508:	4e0c      	ldr	r6, [pc, #48]	; (800653c <__libc_init_array+0x38>)
 800650a:	4c0d      	ldr	r4, [pc, #52]	; (8006540 <__libc_init_array+0x3c>)
 800650c:	1ba4      	subs	r4, r4, r6
 800650e:	10a4      	asrs	r4, r4, #2
 8006510:	42a5      	cmp	r5, r4
 8006512:	d109      	bne.n	8006528 <__libc_init_array+0x24>
 8006514:	f000 f822 	bl	800655c <_init>
 8006518:	2500      	movs	r5, #0
 800651a:	4e0a      	ldr	r6, [pc, #40]	; (8006544 <__libc_init_array+0x40>)
 800651c:	4c0a      	ldr	r4, [pc, #40]	; (8006548 <__libc_init_array+0x44>)
 800651e:	1ba4      	subs	r4, r4, r6
 8006520:	10a4      	asrs	r4, r4, #2
 8006522:	42a5      	cmp	r5, r4
 8006524:	d105      	bne.n	8006532 <__libc_init_array+0x2e>
 8006526:	bd70      	pop	{r4, r5, r6, pc}
 8006528:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800652c:	4798      	blx	r3
 800652e:	3501      	adds	r5, #1
 8006530:	e7ee      	b.n	8006510 <__libc_init_array+0xc>
 8006532:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006536:	4798      	blx	r3
 8006538:	3501      	adds	r5, #1
 800653a:	e7f2      	b.n	8006522 <__libc_init_array+0x1e>
 800653c:	080065fc 	.word	0x080065fc
 8006540:	080065fc 	.word	0x080065fc
 8006544:	080065fc 	.word	0x080065fc
 8006548:	08006600 	.word	0x08006600

0800654c <memset>:
 800654c:	4603      	mov	r3, r0
 800654e:	4402      	add	r2, r0
 8006550:	4293      	cmp	r3, r2
 8006552:	d100      	bne.n	8006556 <memset+0xa>
 8006554:	4770      	bx	lr
 8006556:	f803 1b01 	strb.w	r1, [r3], #1
 800655a:	e7f9      	b.n	8006550 <memset+0x4>

0800655c <_init>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	bf00      	nop
 8006560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006562:	bc08      	pop	{r3}
 8006564:	469e      	mov	lr, r3
 8006566:	4770      	bx	lr

08006568 <_fini>:
 8006568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656a:	bf00      	nop
 800656c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800656e:	bc08      	pop	{r3}
 8006570:	469e      	mov	lr, r3
 8006572:	4770      	bx	lr
