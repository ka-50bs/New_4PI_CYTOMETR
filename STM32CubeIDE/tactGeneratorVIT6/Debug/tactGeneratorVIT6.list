
tactGeneratorVIT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001aa0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001d38  08001d38  00011d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d48  08001d48  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001d48  08001d48  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d48  08001d48  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d48  08001d48  00011d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d4c  08001d4c  00011d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08001d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  24000010  08001d60  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000030  08001d60  00020030  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc3c  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a22  00000000  00000000  0002dc7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000710  00000000  00000000  0002f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000668  00000000  00000000  0002fdb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033d2d  00000000  00000000  00030418  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000067a5  00000000  00000000  00064145  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0014b4e6  00000000  00000000  0006a8ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b5dd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b00  00000000  00000000  001b5e4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001d20 	.word	0x08001d20

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001d20 	.word	0x08001d20

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 f9fe 	bl	80006dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f80a 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f8b8 	bl	8000458 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80002e8:	2101      	movs	r1, #1
 80002ea:	4802      	ldr	r0, [pc, #8]	; (80002f4 <main+0x1c>)
 80002ec:	f000 fd41 	bl	8000d72 <HAL_GPIO_TogglePin>
 80002f0:	e7fa      	b.n	80002e8 <main+0x10>
 80002f2:	bf00      	nop
 80002f4:	58020000 	.word	0x58020000

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b0a4      	sub	sp, #144	; 0x90
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000302:	224c      	movs	r2, #76	; 0x4c
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f001 fd02 	bl	8001d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000310:	2220      	movs	r2, #32
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f001 fcfb 	bl	8001d10 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800031a:	f107 030c 	add.w	r3, r7, #12
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]
 800032a:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800032c:	2002      	movs	r0, #2
 800032e:	f000 fd3b 	bl	8000da8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]
 8000336:	4b44      	ldr	r3, [pc, #272]	; (8000448 <SystemClock_Config+0x150>)
 8000338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800033a:	4a43      	ldr	r2, [pc, #268]	; (8000448 <SystemClock_Config+0x150>)
 800033c:	f023 0301 	bic.w	r3, r3, #1
 8000340:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000342:	4b41      	ldr	r3, [pc, #260]	; (8000448 <SystemClock_Config+0x150>)
 8000344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000346:	f003 0301 	and.w	r3, r3, #1
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	4b3f      	ldr	r3, [pc, #252]	; (800044c <SystemClock_Config+0x154>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000354:	4a3d      	ldr	r2, [pc, #244]	; (800044c <SystemClock_Config+0x154>)
 8000356:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b3b      	ldr	r3, [pc, #236]	; (800044c <SystemClock_Config+0x154>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000368:	bf00      	nop
 800036a:	4b38      	ldr	r3, [pc, #224]	; (800044c <SystemClock_Config+0x154>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000376:	d1f8      	bne.n	800036a <SystemClock_Config+0x72>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000378:	2302      	movs	r3, #2
 800037a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800037c:	2301      	movs	r3, #1
 800037e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000380:	2340      	movs	r3, #64	; 0x40
 8000382:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000384:	2302      	movs	r3, #2
 8000386:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000388:	2300      	movs	r3, #0
 800038a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 32;
 800038c:	2320      	movs	r3, #32
 800038e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000390:	2364      	movs	r3, #100	; 0x64
 8000392:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000394:	2302      	movs	r3, #2
 8000396:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000398:	2302      	movs	r3, #2
 800039a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800039c:	2302      	movs	r3, #2
 800039e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80003a2:	2304      	movs	r3, #4
 80003a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003a8:	2300      	movs	r3, #0
 80003aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80003ae:	2300      	movs	r3, #0
 80003b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fd2f 	bl	8000e1c <HAL_RCC_OscConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80003c4:	f000 f8ae 	bl	8000524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	233f      	movs	r3, #63	; 0x3f
 80003ca:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003cc:	2303      	movs	r3, #3
 80003ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003e0:	2300      	movs	r3, #0
 80003e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003e4:	2300      	movs	r3, #0
 80003e6:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003ec:	2101      	movs	r1, #1
 80003ee:	4618      	mov	r0, r3
 80003f0:	f001 f8ec 	bl	80015cc <HAL_RCC_ClockConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x106>
  {
    Error_Handler();
 80003fa:	f000 f893 	bl	8000524 <Error_Handler>
  }
  /** Enable the SYSCFG APB clock 
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <SystemClock_Config+0x158>)
 8000400:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000404:	4a12      	ldr	r2, [pc, #72]	; (8000450 <SystemClock_Config+0x158>)
 8000406:	f043 0302 	orr.w	r3, r3, #2
 800040a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800040e:	4b10      	ldr	r3, [pc, #64]	; (8000450 <SystemClock_Config+0x158>)
 8000410:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000414:	f003 0302 	and.w	r3, r3, #2
 8000418:	607b      	str	r3, [r7, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
  /** Configures CRS 
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800041c:	2300      	movs	r3, #0
 800041e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_PIN;
 8000420:	2300      	movs	r3, #0
 8000422:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8000424:	2300      	movs	r3, #0
 8000426:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1);
 8000428:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <SystemClock_Config+0x15c>)
 800042a:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 800042c:	2322      	movs	r3, #34	; 0x22
 800042e:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8000430:	2320      	movs	r3, #32
 8000432:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8000434:	f107 030c 	add.w	r3, r7, #12
 8000438:	4618      	mov	r0, r3
 800043a:	f001 fbef 	bl	8001c1c <HAL_RCCEx_CRSConfig>
}
 800043e:	bf00      	nop
 8000440:	3790      	adds	r7, #144	; 0x90
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	58000400 	.word	0x58000400
 800044c:	58024800 	.word	0x58024800
 8000450:	58024400 	.word	0x58024400
 8000454:	02dc6bff 	.word	0x02dc6bff

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	f107 030c 	add.w	r3, r7, #12
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800046e:	4b2a      	ldr	r3, [pc, #168]	; (8000518 <MX_GPIO_Init+0xc0>)
 8000470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000474:	4a28      	ldr	r2, [pc, #160]	; (8000518 <MX_GPIO_Init+0xc0>)
 8000476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800047a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800047e:	4b26      	ldr	r3, [pc, #152]	; (8000518 <MX_GPIO_Init+0xc0>)
 8000480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000488:	60bb      	str	r3, [r7, #8]
 800048a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048c:	4b22      	ldr	r3, [pc, #136]	; (8000518 <MX_GPIO_Init+0xc0>)
 800048e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000492:	4a21      	ldr	r2, [pc, #132]	; (8000518 <MX_GPIO_Init+0xc0>)
 8000494:	f043 0301 	orr.w	r3, r3, #1
 8000498:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800049c:	4b1e      	ldr	r3, [pc, #120]	; (8000518 <MX_GPIO_Init+0xc0>)
 800049e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004aa:	4b1b      	ldr	r3, [pc, #108]	; (8000518 <MX_GPIO_Init+0xc0>)
 80004ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004b0:	4a19      	ldr	r2, [pc, #100]	; (8000518 <MX_GPIO_Init+0xc0>)
 80004b2:	f043 0302 	orr.w	r3, r3, #2
 80004b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004ba:	4b17      	ldr	r3, [pc, #92]	; (8000518 <MX_GPIO_Init+0xc0>)
 80004bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c0:	f003 0302 	and.w	r3, r3, #2
 80004c4:	603b      	str	r3, [r7, #0]
 80004c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2101      	movs	r1, #1
 80004cc:	4813      	ldr	r0, [pc, #76]	; (800051c <MX_GPIO_Init+0xc4>)
 80004ce:	f000 fc37 	bl	8000d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004d2:	2301      	movs	r3, #1
 80004d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	2301      	movs	r3, #1
 80004d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	4619      	mov	r1, r3
 80004e8:	480c      	ldr	r0, [pc, #48]	; (800051c <MX_GPIO_Init+0xc4>)
 80004ea:	f000 fa79 	bl	80009e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004ee:	2308      	movs	r3, #8
 80004f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f2:	2302      	movs	r3, #2
 80004f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_CRS_SYNC;
 80004fe:	230a      	movs	r3, #10
 8000500:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000502:	f107 030c 	add.w	r3, r7, #12
 8000506:	4619      	mov	r1, r3
 8000508:	4805      	ldr	r0, [pc, #20]	; (8000520 <MX_GPIO_Init+0xc8>)
 800050a:	f000 fa69 	bl	80009e0 <HAL_GPIO_Init>

}
 800050e:	bf00      	nop
 8000510:	3720      	adds	r7, #32
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	58024400 	.word	0x58024400
 800051c:	58020000 	.word	0x58020000
 8000520:	58020400 	.word	0x58020400

08000524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
	...

08000534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <HAL_MspInit+0x30>)
 800053c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000540:	4a08      	ldr	r2, [pc, #32]	; (8000564 <HAL_MspInit+0x30>)
 8000542:	f043 0302 	orr.w	r3, r3, #2
 8000546:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800054a:	4b06      	ldr	r3, [pc, #24]	; (8000564 <HAL_MspInit+0x30>)
 800054c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000550:	f003 0302 	and.w	r3, r3, #2
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	58024400 	.word	0x58024400

08000568 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800057a:	e7fe      	b.n	800057a <HardFault_Handler+0x4>

0800057c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000580:	e7fe      	b.n	8000580 <MemManage_Handler+0x4>

08000582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000586:	e7fe      	b.n	8000586 <BusFault_Handler+0x4>

08000588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800058c:	e7fe      	b.n	800058c <UsageFault_Handler+0x4>

0800058e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a0:	bf00      	nop
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005bc:	f000 f900 	bl	80007c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005c8:	4b29      	ldr	r3, [pc, #164]	; (8000670 <SystemInit+0xac>)
 80005ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005ce:	4a28      	ldr	r2, [pc, #160]	; (8000670 <SystemInit+0xac>)
 80005d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <SystemInit+0xb0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a25      	ldr	r2, [pc, #148]	; (8000674 <SystemInit+0xb0>)
 80005de:	f043 0301 	orr.w	r3, r3, #1
 80005e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005e4:	4b23      	ldr	r3, [pc, #140]	; (8000674 <SystemInit+0xb0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80005ea:	4b22      	ldr	r3, [pc, #136]	; (8000674 <SystemInit+0xb0>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4921      	ldr	r1, [pc, #132]	; (8000674 <SystemInit+0xb0>)
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <SystemInit+0xb4>)
 80005f2:	4013      	ands	r3, r2
 80005f4:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80005f6:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <SystemInit+0xb0>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <SystemInit+0xb0>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <SystemInit+0xb0>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <SystemInit+0xb0>)
 800060a:	2200      	movs	r2, #0
 800060c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <SystemInit+0xb0>)
 8000610:	2200      	movs	r2, #0
 8000612:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000614:	4b17      	ldr	r3, [pc, #92]	; (8000674 <SystemInit+0xb0>)
 8000616:	2200      	movs	r2, #0
 8000618:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800061a:	4b16      	ldr	r3, [pc, #88]	; (8000674 <SystemInit+0xb0>)
 800061c:	2200      	movs	r2, #0
 800061e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <SystemInit+0xb0>)
 8000622:	2200      	movs	r2, #0
 8000624:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <SystemInit+0xb0>)
 8000628:	2200      	movs	r2, #0
 800062a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <SystemInit+0xb0>)
 800062e:	2200      	movs	r2, #0
 8000630:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <SystemInit+0xb0>)
 8000634:	2200      	movs	r2, #0
 8000636:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <SystemInit+0xb0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <SystemInit+0xb0>)
 800063e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000642:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <SystemInit+0xb0>)
 8000646:	2200      	movs	r2, #0
 8000648:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <SystemInit+0xb8>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <SystemInit+0xbc>)
 8000650:	4013      	ands	r3, r2
 8000652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000656:	d202      	bcs.n	800065e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <SystemInit+0xc0>)
 800065a:	2201      	movs	r2, #1
 800065c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800065e:	4b04      	ldr	r3, [pc, #16]	; (8000670 <SystemInit+0xac>)
 8000660:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000664:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00
 8000674:	58024400 	.word	0x58024400
 8000678:	eaf6ed7f 	.word	0xeaf6ed7f
 800067c:	5c001000 	.word	0x5c001000
 8000680:	ffff0000 	.word	0xffff0000
 8000684:	51008108 	.word	0x51008108

08000688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800068c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800068e:	e003      	b.n	8000698 <LoopCopyDataInit>

08000690 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000692:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000694:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000696:	3104      	adds	r1, #4

08000698 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800069c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800069e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006a0:	d3f6      	bcc.n	8000690 <CopyDataInit>
  ldr  r2, =_sbss
 80006a2:	4a0b      	ldr	r2, [pc, #44]	; (80006d0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006a4:	e002      	b.n	80006ac <LoopFillZerobss>

080006a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006a8:	f842 3b04 	str.w	r3, [r2], #4

080006ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006b0:	d3f9      	bcc.n	80006a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006b2:	f7ff ff87 	bl	80005c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b6:	f001 fb07 	bl	8001cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ba:	f7ff fe0d 	bl	80002d8 <main>
  bx  lr    
 80006be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006c0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80006c4:	08001d50 	.word	0x08001d50
  ldr  r0, =_sdata
 80006c8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80006cc:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 80006d0:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 80006d4:	24000030 	.word	0x24000030

080006d8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC3_IRQHandler>
	...

080006dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e2:	2003      	movs	r0, #3
 80006e4:	f000 f94a 	bl	800097c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80006e8:	f001 f926 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80006ec:	4601      	mov	r1, r0
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <HAL_Init+0x68>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	0a1b      	lsrs	r3, r3, #8
 80006f4:	f003 030f 	and.w	r3, r3, #15
 80006f8:	4a13      	ldr	r2, [pc, #76]	; (8000748 <HAL_Init+0x6c>)
 80006fa:	5cd3      	ldrb	r3, [r2, r3]
 80006fc:	f003 031f 	and.w	r3, r3, #31
 8000700:	fa21 f303 	lsr.w	r3, r1, r3
 8000704:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <HAL_Init+0x68>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_Init+0x6c>)
 8000710:	5cd3      	ldrb	r3, [r2, r3]
 8000712:	f003 031f 	and.w	r3, r3, #31
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	fa22 f303 	lsr.w	r3, r2, r3
 800071c:	4a0b      	ldr	r2, [pc, #44]	; (800074c <HAL_Init+0x70>)
 800071e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000720:	4a0b      	ldr	r2, [pc, #44]	; (8000750 <HAL_Init+0x74>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000726:	2000      	movs	r0, #0
 8000728:	f000 f814 	bl	8000754 <HAL_InitTick>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e002      	b.n	800073c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000736:	f7ff fefd 	bl	8000534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073a:	2300      	movs	r3, #0
}
 800073c:	4618      	mov	r0, r3
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	58024400 	.word	0x58024400
 8000748:	08001d38 	.word	0x08001d38
 800074c:	24000004 	.word	0x24000004
 8000750:	24000000 	.word	0x24000000

08000754 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <HAL_InitTick+0x60>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d101      	bne.n	8000768 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000764:	2301      	movs	r3, #1
 8000766:	e021      	b.n	80007ac <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <HAL_InitTick+0x64>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <HAL_InitTick+0x60>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	4619      	mov	r1, r3
 8000772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000776:	fbb3 f3f1 	udiv	r3, r3, r1
 800077a:	fbb2 f3f3 	udiv	r3, r2, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f000 f921 	bl	80009c6 <HAL_SYSTICK_Config>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
 800078c:	e00e      	b.n	80007ac <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2b0f      	cmp	r3, #15
 8000792:	d80a      	bhi.n	80007aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000794:	2200      	movs	r2, #0
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	f04f 30ff 	mov.w	r0, #4294967295
 800079c:	f000 f8f9 	bl	8000992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <HAL_InitTick+0x68>)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007a6:	2300      	movs	r3, #0
 80007a8:	e000      	b.n	80007ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80007aa:	2301      	movs	r3, #1
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2400000c 	.word	0x2400000c
 80007b8:	24000000 	.word	0x24000000
 80007bc:	24000008 	.word	0x24000008

080007c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <HAL_IncTick+0x20>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <HAL_IncTick+0x24>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	4a04      	ldr	r2, [pc, #16]	; (80007e4 <HAL_IncTick+0x24>)
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	2400000c 	.word	0x2400000c
 80007e4:	2400002c 	.word	0x2400002c

080007e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return uwTick;
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <HAL_GetTick+0x14>)
 80007ee:	681b      	ldr	r3, [r3, #0]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	2400002c 	.word	0x2400002c

08000800 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <HAL_GetREVID+0x14>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	0c1b      	lsrs	r3, r3, #16
}
 800080a:	4618      	mov	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	5c001000 	.word	0x5c001000

08000818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <__NVIC_SetPriorityGrouping+0x40>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <__NVIC_SetPriorityGrouping+0x44>)
 8000842:	4313      	orrs	r3, r2
 8000844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000846:	4a04      	ldr	r2, [pc, #16]	; (8000858 <__NVIC_SetPriorityGrouping+0x40>)
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	60d3      	str	r3, [r2, #12]
}
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000ed00 	.word	0xe000ed00
 800085c:	05fa0000 	.word	0x05fa0000

08000860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <__NVIC_GetPriorityGrouping+0x18>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	f003 0307 	and.w	r3, r3, #7
}
 800086e:	4618      	mov	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	6039      	str	r1, [r7, #0]
 8000886:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800088c:	2b00      	cmp	r3, #0
 800088e:	db0a      	blt.n	80008a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	b2da      	uxtb	r2, r3
 8000894:	490c      	ldr	r1, [pc, #48]	; (80008c8 <__NVIC_SetPriority+0x4c>)
 8000896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800089a:	0112      	lsls	r2, r2, #4
 800089c:	b2d2      	uxtb	r2, r2
 800089e:	440b      	add	r3, r1
 80008a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008a4:	e00a      	b.n	80008bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4908      	ldr	r1, [pc, #32]	; (80008cc <__NVIC_SetPriority+0x50>)
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	f003 030f 	and.w	r3, r3, #15
 80008b2:	3b04      	subs	r3, #4
 80008b4:	0112      	lsls	r2, r2, #4
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	440b      	add	r3, r1
 80008ba:	761a      	strb	r2, [r3, #24]
}
 80008bc:	bf00      	nop
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	e000e100 	.word	0xe000e100
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b089      	sub	sp, #36	; 0x24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	f1c3 0307 	rsb	r3, r3, #7
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	bf28      	it	cs
 80008ee:	2304      	movcs	r3, #4
 80008f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	3304      	adds	r3, #4
 80008f6:	2b06      	cmp	r3, #6
 80008f8:	d902      	bls.n	8000900 <NVIC_EncodePriority+0x30>
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	3b03      	subs	r3, #3
 80008fe:	e000      	b.n	8000902 <NVIC_EncodePriority+0x32>
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000904:	f04f 32ff 	mov.w	r2, #4294967295
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43da      	mvns	r2, r3
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	401a      	ands	r2, r3
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000918:	f04f 31ff 	mov.w	r1, #4294967295
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	fa01 f303 	lsl.w	r3, r1, r3
 8000922:	43d9      	mvns	r1, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000928:	4313      	orrs	r3, r2
         );
}
 800092a:	4618      	mov	r0, r3
 800092c:	3724      	adds	r7, #36	; 0x24
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
	...

08000938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3b01      	subs	r3, #1
 8000944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000948:	d301      	bcc.n	800094e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800094a:	2301      	movs	r3, #1
 800094c:	e00f      	b.n	800096e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <SysTick_Config+0x40>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000956:	210f      	movs	r1, #15
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f7ff ff8e 	bl	800087c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <SysTick_Config+0x40>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000966:	4b04      	ldr	r3, [pc, #16]	; (8000978 <SysTick_Config+0x40>)
 8000968:	2207      	movs	r2, #7
 800096a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	e000e010 	.word	0xe000e010

0800097c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ff47 	bl	8000818 <__NVIC_SetPriorityGrouping>
}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	4603      	mov	r3, r0
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
 800099e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009a0:	f7ff ff5e 	bl	8000860 <__NVIC_GetPriorityGrouping>
 80009a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f7ff ff90 	bl	80008d0 <NVIC_EncodePriority>
 80009b0:	4602      	mov	r2, r0
 80009b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff ff5f 	bl	800087c <__NVIC_SetPriority>
}
 80009be:	bf00      	nop
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f7ff ffb2 	bl	8000938 <SysTick_Config>
 80009d4:	4603      	mov	r3, r0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80009ee:	4b89      	ldr	r3, [pc, #548]	; (8000c14 <HAL_GPIO_Init+0x234>)
 80009f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80009f2:	e194      	b.n	8000d1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	2101      	movs	r1, #1
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	f000 8186 	beq.w	8000d18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d00b      	beq.n	8000a2c <HAL_GPIO_Init+0x4c>
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d007      	beq.n	8000a2c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a20:	2b11      	cmp	r3, #17
 8000a22:	d003      	beq.n	8000a2c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	2b12      	cmp	r3, #18
 8000a2a:	d130      	bne.n	8000a8e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	2203      	movs	r2, #3
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	69ba      	ldr	r2, [r7, #24]
 8000a40:	4013      	ands	r3, r2
 8000a42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a62:	2201      	movs	r2, #1
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	091b      	lsrs	r3, r3, #4
 8000a78:	f003 0201 	and.w	r2, r3, #1
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	69ba      	ldr	r2, [r7, #24]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a94:	69fb      	ldr	r3, [r7, #28]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	2203      	movs	r2, #3
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	2b02      	cmp	r3, #2
 8000ac4:	d003      	beq.n	8000ace <HAL_GPIO_Init+0xee>
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	2b12      	cmp	r3, #18
 8000acc:	d123      	bne.n	8000b16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	08da      	lsrs	r2, r3, #3
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3208      	adds	r2, #8
 8000ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	220f      	movs	r2, #15
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	4013      	ands	r3, r2
 8000af0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	691a      	ldr	r2, [r3, #16]
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	69ba      	ldr	r2, [r7, #24]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	08da      	lsrs	r2, r3, #3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3208      	adds	r2, #8
 8000b10:	69b9      	ldr	r1, [r7, #24]
 8000b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	2203      	movs	r2, #3
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f003 0203 	and.w	r2, r3, #3
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	69ba      	ldr	r2, [r7, #24]
 8000b48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f000 80e0 	beq.w	8000d18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b58:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <HAL_GPIO_Init+0x238>)
 8000b5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b5e:	4a2e      	ldr	r2, [pc, #184]	; (8000c18 <HAL_GPIO_Init+0x238>)
 8000b60:	f043 0302 	orr.w	r3, r3, #2
 8000b64:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b68:	4b2b      	ldr	r3, [pc, #172]	; (8000c18 <HAL_GPIO_Init+0x238>)
 8000b6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b76:	4a29      	ldr	r2, [pc, #164]	; (8000c1c <HAL_GPIO_Init+0x23c>)
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	f003 0303 	and.w	r3, r3, #3
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	220f      	movs	r2, #15
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	4013      	ands	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a20      	ldr	r2, [pc, #128]	; (8000c20 <HAL_GPIO_Init+0x240>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d052      	beq.n	8000c48 <HAL_GPIO_Init+0x268>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <HAL_GPIO_Init+0x244>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d031      	beq.n	8000c0e <HAL_GPIO_Init+0x22e>
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a1e      	ldr	r2, [pc, #120]	; (8000c28 <HAL_GPIO_Init+0x248>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d02b      	beq.n	8000c0a <HAL_GPIO_Init+0x22a>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <HAL_GPIO_Init+0x24c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d025      	beq.n	8000c06 <HAL_GPIO_Init+0x226>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a1c      	ldr	r2, [pc, #112]	; (8000c30 <HAL_GPIO_Init+0x250>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d01f      	beq.n	8000c02 <HAL_GPIO_Init+0x222>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a1b      	ldr	r2, [pc, #108]	; (8000c34 <HAL_GPIO_Init+0x254>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d019      	beq.n	8000bfe <HAL_GPIO_Init+0x21e>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4a1a      	ldr	r2, [pc, #104]	; (8000c38 <HAL_GPIO_Init+0x258>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d013      	beq.n	8000bfa <HAL_GPIO_Init+0x21a>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <HAL_GPIO_Init+0x25c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d00d      	beq.n	8000bf6 <HAL_GPIO_Init+0x216>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <HAL_GPIO_Init+0x260>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d007      	beq.n	8000bf2 <HAL_GPIO_Init+0x212>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <HAL_GPIO_Init+0x264>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d101      	bne.n	8000bee <HAL_GPIO_Init+0x20e>
 8000bea:	2309      	movs	r3, #9
 8000bec:	e02d      	b.n	8000c4a <HAL_GPIO_Init+0x26a>
 8000bee:	230a      	movs	r3, #10
 8000bf0:	e02b      	b.n	8000c4a <HAL_GPIO_Init+0x26a>
 8000bf2:	2308      	movs	r3, #8
 8000bf4:	e029      	b.n	8000c4a <HAL_GPIO_Init+0x26a>
 8000bf6:	2307      	movs	r3, #7
 8000bf8:	e027      	b.n	8000c4a <HAL_GPIO_Init+0x26a>
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	e025      	b.n	8000c4a <HAL_GPIO_Init+0x26a>
 8000bfe:	2305      	movs	r3, #5
 8000c00:	e023      	b.n	8000c4a <HAL_GPIO_Init+0x26a>
 8000c02:	2304      	movs	r3, #4
 8000c04:	e021      	b.n	8000c4a <HAL_GPIO_Init+0x26a>
 8000c06:	2303      	movs	r3, #3
 8000c08:	e01f      	b.n	8000c4a <HAL_GPIO_Init+0x26a>
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	e01d      	b.n	8000c4a <HAL_GPIO_Init+0x26a>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e01b      	b.n	8000c4a <HAL_GPIO_Init+0x26a>
 8000c12:	bf00      	nop
 8000c14:	58000080 	.word	0x58000080
 8000c18:	58024400 	.word	0x58024400
 8000c1c:	58000400 	.word	0x58000400
 8000c20:	58020000 	.word	0x58020000
 8000c24:	58020400 	.word	0x58020400
 8000c28:	58020800 	.word	0x58020800
 8000c2c:	58020c00 	.word	0x58020c00
 8000c30:	58021000 	.word	0x58021000
 8000c34:	58021400 	.word	0x58021400
 8000c38:	58021800 	.word	0x58021800
 8000c3c:	58021c00 	.word	0x58021c00
 8000c40:	58022000 	.word	0x58022000
 8000c44:	58022400 	.word	0x58022400
 8000c48:	2300      	movs	r3, #0
 8000c4a:	69fa      	ldr	r2, [r7, #28]
 8000c4c:	f002 0203 	and.w	r2, r2, #3
 8000c50:	0092      	lsls	r2, r2, #2
 8000c52:	4093      	lsls	r3, r2
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c5a:	4938      	ldr	r1, [pc, #224]	; (8000d3c <HAL_GPIO_Init+0x35c>)
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3302      	adds	r3, #2
 8000c62:	69ba      	ldr	r2, [r7, #24]
 8000c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d003      	beq.n	8000c8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d003      	beq.n	8000ce2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000d08:	69ba      	ldr	r2, [r7, #24]
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000d10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa22 f303 	lsr.w	r3, r2, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	f47f ae63 	bne.w	80009f4 <HAL_GPIO_Init+0x14>
  }
}
 8000d2e:	bf00      	nop
 8000d30:	3724      	adds	r7, #36	; 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	58000400 	.word	0x58000400

08000d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	807b      	strh	r3, [r7, #2]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d50:	787b      	ldrb	r3, [r7, #1]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d56:	887a      	ldrh	r2, [r7, #2]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000d5c:	e003      	b.n	8000d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d5e:	887b      	ldrh	r3, [r7, #2]
 8000d60:	041a      	lsls	r2, r3, #16
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	619a      	str	r2, [r3, #24]
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695a      	ldr	r2, [r3, #20]
 8000d82:	887b      	ldrh	r3, [r7, #2]
 8000d84:	401a      	ands	r2, r3
 8000d86:	887b      	ldrh	r3, [r7, #2]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d104      	bne.n	8000d96 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d8c:	887b      	ldrh	r3, [r7, #2]
 8000d8e:	041a      	lsls	r2, r3, #16
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000d94:	e002      	b.n	8000d9c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000d96:	887a      	ldrh	r2, [r7, #2]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	619a      	str	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_PWREx_ConfigSupply+0x70>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d00a      	beq.n	8000dd2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <HAL_PWREx_ConfigSupply+0x70>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	f003 0307 	and.w	r3, r3, #7
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d001      	beq.n	8000dce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e01f      	b.n	8000e0e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e01d      	b.n	8000e0e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_PWREx_ConfigSupply+0x70>)
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	f023 0207 	bic.w	r2, r3, #7
 8000dda:	490f      	ldr	r1, [pc, #60]	; (8000e18 <HAL_PWREx_ConfigSupply+0x70>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000de2:	f7ff fd01 	bl	80007e8 <HAL_GetTick>
 8000de6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000de8:	e009      	b.n	8000dfe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000dea:	f7ff fcfd 	bl	80007e8 <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000df8:	d901      	bls.n	8000dfe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e007      	b.n	8000e0e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_PWREx_ConfigSupply+0x70>)
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e0a:	d1ee      	bne.n	8000dea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	58024800 	.word	0x58024800

08000e1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e3c4      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 8087 	beq.w	8000f4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e3c:	4ba2      	ldr	r3, [pc, #648]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e46:	4ba0      	ldr	r3, [pc, #640]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4e:	2b10      	cmp	r3, #16
 8000e50:	d007      	beq.n	8000e62 <HAL_RCC_OscConfig+0x46>
 8000e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e54:	2b18      	cmp	r3, #24
 8000e56:	d110      	bne.n	8000e7a <HAL_RCC_OscConfig+0x5e>
 8000e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d10b      	bne.n	8000e7a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e62:	4b99      	ldr	r3, [pc, #612]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d06c      	beq.n	8000f48 <HAL_RCC_OscConfig+0x12c>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d168      	bne.n	8000f48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e39e      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e82:	d106      	bne.n	8000e92 <HAL_RCC_OscConfig+0x76>
 8000e84:	4b90      	ldr	r3, [pc, #576]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a8f      	ldr	r2, [pc, #572]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000e8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e8e:	6013      	str	r3, [r2, #0]
 8000e90:	e02e      	b.n	8000ef0 <HAL_RCC_OscConfig+0xd4>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d10c      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x98>
 8000e9a:	4b8b      	ldr	r3, [pc, #556]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a8a      	ldr	r2, [pc, #552]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ea4:	6013      	str	r3, [r2, #0]
 8000ea6:	4b88      	ldr	r3, [pc, #544]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a87      	ldr	r2, [pc, #540]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000eac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eb0:	6013      	str	r3, [r2, #0]
 8000eb2:	e01d      	b.n	8000ef0 <HAL_RCC_OscConfig+0xd4>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ebc:	d10c      	bne.n	8000ed8 <HAL_RCC_OscConfig+0xbc>
 8000ebe:	4b82      	ldr	r3, [pc, #520]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a81      	ldr	r2, [pc, #516]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	4b7f      	ldr	r3, [pc, #508]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a7e      	ldr	r2, [pc, #504]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	e00b      	b.n	8000ef0 <HAL_RCC_OscConfig+0xd4>
 8000ed8:	4b7b      	ldr	r3, [pc, #492]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a7a      	ldr	r2, [pc, #488]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	4b78      	ldr	r3, [pc, #480]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a77      	ldr	r2, [pc, #476]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d013      	beq.n	8000f20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fc76 	bl	80007e8 <HAL_GetTick>
 8000efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000efe:	e008      	b.n	8000f12 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f00:	f7ff fc72 	bl	80007e8 <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b64      	cmp	r3, #100	; 0x64
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e352      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f12:	4b6d      	ldr	r3, [pc, #436]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0f0      	beq.n	8000f00 <HAL_RCC_OscConfig+0xe4>
 8000f1e:	e014      	b.n	8000f4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f20:	f7ff fc62 	bl	80007e8 <HAL_GetTick>
 8000f24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f28:	f7ff fc5e 	bl	80007e8 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b64      	cmp	r3, #100	; 0x64
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e33e      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f3a:	4b63      	ldr	r3, [pc, #396]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f0      	bne.n	8000f28 <HAL_RCC_OscConfig+0x10c>
 8000f46:	e000      	b.n	8000f4a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f000 8092 	beq.w	800107c <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f58:	4b5b      	ldr	r3, [pc, #364]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000f60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000f62:	4b59      	ldr	r3, [pc, #356]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f66:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d007      	beq.n	8000f7e <HAL_RCC_OscConfig+0x162>
 8000f6e:	6a3b      	ldr	r3, [r7, #32]
 8000f70:	2b18      	cmp	r3, #24
 8000f72:	d12d      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x1b4>
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d128      	bne.n	8000fd0 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f7e:	4b52      	ldr	r3, [pc, #328]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d005      	beq.n	8000f96 <HAL_RCC_OscConfig+0x17a>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e310      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f96:	f7ff fc33 	bl	8000800 <HAL_GetREVID>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	f241 0303 	movw	r3, #4099	; 0x1003
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d80a      	bhi.n	8000fba <HAL_RCC_OscConfig+0x19e>
 8000fa4:	4b48      	ldr	r3, [pc, #288]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691b      	ldr	r3, [r3, #16]
 8000fb0:	031b      	lsls	r3, r3, #12
 8000fb2:	4945      	ldr	r1, [pc, #276]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fb8:	e060      	b.n	800107c <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fba:	4b43      	ldr	r3, [pc, #268]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	691b      	ldr	r3, [r3, #16]
 8000fc6:	061b      	lsls	r3, r3, #24
 8000fc8:	493f      	ldr	r1, [pc, #252]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fce:	e055      	b.n	800107c <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d038      	beq.n	800104a <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000fd8:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f023 0219 	bic.w	r2, r3, #25
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	4938      	ldr	r1, [pc, #224]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fea:	f7ff fbfd 	bl	80007e8 <HAL_GetTick>
 8000fee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ff0:	e008      	b.n	8001004 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ff2:	f7ff fbf9 	bl	80007e8 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d901      	bls.n	8001004 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8001000:	2303      	movs	r3, #3
 8001002:	e2d9      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001004:	4b30      	ldr	r3, [pc, #192]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f003 0304 	and.w	r3, r3, #4
 800100c:	2b00      	cmp	r3, #0
 800100e:	d0f0      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001010:	f7ff fbf6 	bl	8000800 <HAL_GetREVID>
 8001014:	4602      	mov	r2, r0
 8001016:	f241 0303 	movw	r3, #4099	; 0x1003
 800101a:	429a      	cmp	r2, r3
 800101c:	d80a      	bhi.n	8001034 <HAL_RCC_OscConfig+0x218>
 800101e:	4b2a      	ldr	r3, [pc, #168]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	031b      	lsls	r3, r3, #12
 800102c:	4926      	ldr	r1, [pc, #152]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 800102e:	4313      	orrs	r3, r2
 8001030:	604b      	str	r3, [r1, #4]
 8001032:	e023      	b.n	800107c <HAL_RCC_OscConfig+0x260>
 8001034:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	691b      	ldr	r3, [r3, #16]
 8001040:	061b      	lsls	r3, r3, #24
 8001042:	4921      	ldr	r1, [pc, #132]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8001044:	4313      	orrs	r3, r2
 8001046:	604b      	str	r3, [r1, #4]
 8001048:	e018      	b.n	800107c <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800104a:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8001050:	f023 0301 	bic.w	r3, r3, #1
 8001054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001056:	f7ff fbc7 	bl	80007e8 <HAL_GetTick>
 800105a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800105e:	f7ff fbc3 	bl	80007e8 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e2a3      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001070:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f0      	bne.n	800105e <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0310 	and.w	r3, r3, #16
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 8091 	beq.w	80011ac <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 800108c:	691b      	ldr	r3, [r3, #16]
 800108e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001092:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 8001096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001098:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	2b08      	cmp	r3, #8
 800109e:	d007      	beq.n	80010b0 <HAL_RCC_OscConfig+0x294>
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	2b18      	cmp	r3, #24
 80010a4:	d12f      	bne.n	8001106 <HAL_RCC_OscConfig+0x2ea>
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d12a      	bne.n	8001106 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_RCC_OscConfig+0x2ac>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d007      	beq.n	80010cc <HAL_RCC_OscConfig+0x2b0>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	2b80      	cmp	r3, #128	; 0x80
 80010c2:	d003      	beq.n	80010cc <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e277      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
 80010c8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010cc:	f7ff fb98 	bl	8000800 <HAL_GetREVID>
 80010d0:	4602      	mov	r2, r0
 80010d2:	f241 0303 	movw	r3, #4099	; 0x1003
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d80a      	bhi.n	80010f0 <HAL_RCC_OscConfig+0x2d4>
 80010da:	4ba2      	ldr	r3, [pc, #648]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	069b      	lsls	r3, r3, #26
 80010e8:	499e      	ldr	r1, [pc, #632]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80010ee:	e05d      	b.n	80011ac <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010f0:	4b9c      	ldr	r3, [pc, #624]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	061b      	lsls	r3, r3, #24
 80010fe:	4999      	ldr	r1, [pc, #612]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001100:	4313      	orrs	r3, r2
 8001102:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001104:	e052      	b.n	80011ac <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d035      	beq.n	800117a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800110e:	4b95      	ldr	r3, [pc, #596]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a94      	ldr	r2, [pc, #592]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111a:	f7ff fb65 	bl	80007e8 <HAL_GetTick>
 800111e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001122:	f7ff fb61 	bl	80007e8 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e241      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001134:	4b8b      	ldr	r3, [pc, #556]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0f0      	beq.n	8001122 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001140:	f7ff fb5e 	bl	8000800 <HAL_GetREVID>
 8001144:	4602      	mov	r2, r0
 8001146:	f241 0303 	movw	r3, #4099	; 0x1003
 800114a:	429a      	cmp	r2, r3
 800114c:	d80a      	bhi.n	8001164 <HAL_RCC_OscConfig+0x348>
 800114e:	4b85      	ldr	r3, [pc, #532]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	069b      	lsls	r3, r3, #26
 800115c:	4981      	ldr	r1, [pc, #516]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 800115e:	4313      	orrs	r3, r2
 8001160:	604b      	str	r3, [r1, #4]
 8001162:	e023      	b.n	80011ac <HAL_RCC_OscConfig+0x390>
 8001164:	4b7f      	ldr	r3, [pc, #508]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	061b      	lsls	r3, r3, #24
 8001172:	497c      	ldr	r1, [pc, #496]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001174:	4313      	orrs	r3, r2
 8001176:	60cb      	str	r3, [r1, #12]
 8001178:	e018      	b.n	80011ac <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800117a:	4b7a      	ldr	r3, [pc, #488]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a79      	ldr	r2, [pc, #484]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001180:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001184:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001186:	f7ff fb2f 	bl	80007e8 <HAL_GetTick>
 800118a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800118c:	e008      	b.n	80011a0 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800118e:	f7ff fb2b 	bl	80007e8 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e20b      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80011a0:	4b70      	ldr	r3, [pc, #448]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f0      	bne.n	800118e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d036      	beq.n	8001226 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d019      	beq.n	80011f4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011c0:	4b68      	ldr	r3, [pc, #416]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 80011c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011c4:	4a67      	ldr	r2, [pc, #412]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011cc:	f7ff fb0c 	bl	80007e8 <HAL_GetTick>
 80011d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d4:	f7ff fb08 	bl	80007e8 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e1e8      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011e6:	4b5f      	ldr	r3, [pc, #380]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 80011e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0f0      	beq.n	80011d4 <HAL_RCC_OscConfig+0x3b8>
 80011f2:	e018      	b.n	8001226 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011f4:	4b5b      	ldr	r3, [pc, #364]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 80011f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011f8:	4a5a      	ldr	r2, [pc, #360]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 80011fa:	f023 0301 	bic.w	r3, r3, #1
 80011fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001200:	f7ff faf2 	bl	80007e8 <HAL_GetTick>
 8001204:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001208:	f7ff faee 	bl	80007e8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e1ce      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800121a:	4b52      	ldr	r3, [pc, #328]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 800121c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f0      	bne.n	8001208 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0320 	and.w	r3, r3, #32
 800122e:	2b00      	cmp	r3, #0
 8001230:	d036      	beq.n	80012a0 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d019      	beq.n	800126e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800123a:	4b4a      	ldr	r3, [pc, #296]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a49      	ldr	r2, [pc, #292]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001240:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001244:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001246:	f7ff facf 	bl	80007e8 <HAL_GetTick>
 800124a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800124c:	e008      	b.n	8001260 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800124e:	f7ff facb 	bl	80007e8 <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d901      	bls.n	8001260 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800125c:	2303      	movs	r3, #3
 800125e:	e1ab      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001260:	4b40      	ldr	r3, [pc, #256]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0f0      	beq.n	800124e <HAL_RCC_OscConfig+0x432>
 800126c:	e018      	b.n	80012a0 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800126e:	4b3d      	ldr	r3, [pc, #244]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a3c      	ldr	r2, [pc, #240]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001274:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001278:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800127a:	f7ff fab5 	bl	80007e8 <HAL_GetTick>
 800127e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001282:	f7ff fab1 	bl	80007e8 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e191      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001294:	4b33      	ldr	r3, [pc, #204]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d1f0      	bne.n	8001282 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	f000 8086 	beq.w	80013ba <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80012ae:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <HAL_RCC_OscConfig+0x54c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a2d      	ldr	r2, [pc, #180]	; (8001368 <HAL_RCC_OscConfig+0x54c>)
 80012b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80012ba:	f7ff fa95 	bl	80007e8 <HAL_GetTick>
 80012be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80012c2:	f7ff fa91 	bl	80007e8 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b64      	cmp	r3, #100	; 0x64
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e171      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_RCC_OscConfig+0x54c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d106      	bne.n	80012f6 <HAL_RCC_OscConfig+0x4da>
 80012e8:	4b1e      	ldr	r3, [pc, #120]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 80012ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ec:	4a1d      	ldr	r2, [pc, #116]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6713      	str	r3, [r2, #112]	; 0x70
 80012f4:	e02d      	b.n	8001352 <HAL_RCC_OscConfig+0x536>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x4fc>
 80012fe:	4b19      	ldr	r3, [pc, #100]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001302:	4a18      	ldr	r2, [pc, #96]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001304:	f023 0301 	bic.w	r3, r3, #1
 8001308:	6713      	str	r3, [r2, #112]	; 0x70
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 800130c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130e:	4a15      	ldr	r2, [pc, #84]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001310:	f023 0304 	bic.w	r3, r3, #4
 8001314:	6713      	str	r3, [r2, #112]	; 0x70
 8001316:	e01c      	b.n	8001352 <HAL_RCC_OscConfig+0x536>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	2b05      	cmp	r3, #5
 800131e:	d10c      	bne.n	800133a <HAL_RCC_OscConfig+0x51e>
 8001320:	4b10      	ldr	r3, [pc, #64]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001324:	4a0f      	ldr	r2, [pc, #60]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6713      	str	r3, [r2, #112]	; 0x70
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 800132e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001330:	4a0c      	ldr	r2, [pc, #48]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6713      	str	r3, [r2, #112]	; 0x70
 8001338:	e00b      	b.n	8001352 <HAL_RCC_OscConfig+0x536>
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 800133c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800133e:	4a09      	ldr	r2, [pc, #36]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	6713      	str	r3, [r2, #112]	; 0x70
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 8001348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134a:	4a06      	ldr	r2, [pc, #24]	; (8001364 <HAL_RCC_OscConfig+0x548>)
 800134c:	f023 0304 	bic.w	r3, r3, #4
 8001350:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d01a      	beq.n	8001390 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800135a:	f7ff fa45 	bl	80007e8 <HAL_GetTick>
 800135e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001360:	e00f      	b.n	8001382 <HAL_RCC_OscConfig+0x566>
 8001362:	bf00      	nop
 8001364:	58024400 	.word	0x58024400
 8001368:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800136c:	f7ff fa3c 	bl	80007e8 <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f241 3288 	movw	r2, #5000	; 0x1388
 800137a:	4293      	cmp	r3, r2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e11a      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001382:	4b8f      	ldr	r3, [pc, #572]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 8001384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0ee      	beq.n	800136c <HAL_RCC_OscConfig+0x550>
 800138e:	e014      	b.n	80013ba <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001390:	f7ff fa2a 	bl	80007e8 <HAL_GetTick>
 8001394:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001396:	e00a      	b.n	80013ae <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001398:	f7ff fa26 	bl	80007e8 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e104      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013ae:	4b84      	ldr	r3, [pc, #528]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 80013b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1ee      	bne.n	8001398 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 80f9 	beq.w	80015b6 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80013c4:	4b7e      	ldr	r3, [pc, #504]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013cc:	2b18      	cmp	r3, #24
 80013ce:	f000 80b4 	beq.w	800153a <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	f040 8095 	bne.w	8001506 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013dc:	4b78      	ldr	r3, [pc, #480]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a77      	ldr	r2, [pc, #476]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 80013e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff f9fe 	bl	80007e8 <HAL_GetTick>
 80013ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff f9fa 	bl	80007e8 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e0da      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001402:	4b6f      	ldr	r3, [pc, #444]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800140e:	4b6c      	ldr	r3, [pc, #432]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 8001410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001412:	4b6c      	ldr	r3, [pc, #432]	; (80015c4 <HAL_RCC_OscConfig+0x7a8>)
 8001414:	4013      	ands	r3, r2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	430a      	orrs	r2, r1
 8001422:	4967      	ldr	r1, [pc, #412]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 8001424:	4313      	orrs	r3, r2
 8001426:	628b      	str	r3, [r1, #40]	; 0x28
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	3b01      	subs	r3, #1
 800142e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001436:	3b01      	subs	r3, #1
 8001438:	025b      	lsls	r3, r3, #9
 800143a:	b29b      	uxth	r3, r3
 800143c:	431a      	orrs	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001442:	3b01      	subs	r3, #1
 8001444:	041b      	lsls	r3, r3, #16
 8001446:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001450:	3b01      	subs	r3, #1
 8001452:	061b      	lsls	r3, r3, #24
 8001454:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001458:	4959      	ldr	r1, [pc, #356]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 800145a:	4313      	orrs	r3, r2
 800145c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800145e:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	4a57      	ldr	r2, [pc, #348]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 8001464:	f023 0301 	bic.w	r3, r3, #1
 8001468:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800146a:	4b55      	ldr	r3, [pc, #340]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 800146c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800146e:	4b56      	ldr	r3, [pc, #344]	; (80015c8 <HAL_RCC_OscConfig+0x7ac>)
 8001470:	4013      	ands	r3, r2
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001476:	00d2      	lsls	r2, r2, #3
 8001478:	4951      	ldr	r1, [pc, #324]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 800147a:	4313      	orrs	r3, r2
 800147c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800147e:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 8001480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001482:	f023 020c 	bic.w	r2, r3, #12
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	494d      	ldr	r1, [pc, #308]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 800148c:	4313      	orrs	r3, r2
 800148e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001490:	4b4b      	ldr	r3, [pc, #300]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 8001492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001494:	f023 0202 	bic.w	r2, r3, #2
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149c:	4948      	ldr	r1, [pc, #288]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80014a2:	4b47      	ldr	r3, [pc, #284]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	4a46      	ldr	r2, [pc, #280]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80014ae:	4b44      	ldr	r3, [pc, #272]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 80014b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b2:	4a43      	ldr	r2, [pc, #268]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80014ba:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 80014bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014be:	4a40      	ldr	r2, [pc, #256]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 80014c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80014c6:	4b3e      	ldr	r3, [pc, #248]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 80014c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ca:	4a3d      	ldr	r2, [pc, #244]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014d2:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a3a      	ldr	r2, [pc, #232]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 80014d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014de:	f7ff f983 	bl	80007e8 <HAL_GetTick>
 80014e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e6:	f7ff f97f 	bl	80007e8 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e05f      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80014f8:	4b31      	ldr	r3, [pc, #196]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x6ca>
 8001504:	e057      	b.n	80015b6 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001506:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a2d      	ldr	r2, [pc, #180]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 800150c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff f969 	bl	80007e8 <HAL_GetTick>
 8001516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff f965 	bl	80007e8 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e045      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800152c:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f0      	bne.n	800151a <HAL_RCC_OscConfig+0x6fe>
 8001538:	e03d      	b.n	80015b6 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800153a:	4b21      	ldr	r3, [pc, #132]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 800153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <HAL_RCC_OscConfig+0x7a4>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	2b01      	cmp	r3, #1
 800154c:	d031      	beq.n	80015b2 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	f003 0203 	and.w	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001558:	429a      	cmp	r2, r3
 800155a:	d12a      	bne.n	80015b2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001568:	429a      	cmp	r2, r3
 800156a:	d122      	bne.n	80015b2 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001578:	429a      	cmp	r2, r3
 800157a:	d11a      	bne.n	80015b2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	0a5b      	lsrs	r3, r3, #9
 8001580:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001588:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800158a:	429a      	cmp	r2, r3
 800158c:	d111      	bne.n	80015b2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	0c1b      	lsrs	r3, r3, #16
 8001592:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d108      	bne.n	80015b2 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	0e1b      	lsrs	r3, r3, #24
 80015a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d001      	beq.n	80015b6 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3730      	adds	r7, #48	; 0x30
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	58024400 	.word	0x58024400
 80015c4:	fffffc0c 	.word	0xfffffc0c
 80015c8:	ffff0007 	.word	0xffff0007

080015cc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e19c      	b.n	800191a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015e0:	4b8a      	ldr	r3, [pc, #552]	; (800180c <HAL_RCC_ClockConfig+0x240>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 030f 	and.w	r3, r3, #15
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d910      	bls.n	8001610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ee:	4b87      	ldr	r3, [pc, #540]	; (800180c <HAL_RCC_ClockConfig+0x240>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 020f 	bic.w	r2, r3, #15
 80015f6:	4985      	ldr	r1, [pc, #532]	; (800180c <HAL_RCC_ClockConfig+0x240>)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fe:	4b83      	ldr	r3, [pc, #524]	; (800180c <HAL_RCC_ClockConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	429a      	cmp	r2, r3
 800160a:	d001      	beq.n	8001610 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e184      	b.n	800191a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b00      	cmp	r3, #0
 800161a:	d010      	beq.n	800163e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	4b7b      	ldr	r3, [pc, #492]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001628:	429a      	cmp	r2, r3
 800162a:	d908      	bls.n	800163e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800162c:	4b78      	ldr	r3, [pc, #480]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	4975      	ldr	r1, [pc, #468]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 800163a:	4313      	orrs	r3, r2
 800163c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d010      	beq.n	800166c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	4b70      	ldr	r3, [pc, #448]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001656:	429a      	cmp	r2, r3
 8001658:	d908      	bls.n	800166c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800165a:	4b6d      	ldr	r3, [pc, #436]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	496a      	ldr	r1, [pc, #424]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 8001668:	4313      	orrs	r3, r2
 800166a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2b00      	cmp	r3, #0
 8001676:	d010      	beq.n	800169a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	699a      	ldr	r2, [r3, #24]
 800167c:	4b64      	ldr	r3, [pc, #400]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001684:	429a      	cmp	r2, r3
 8001686:	d908      	bls.n	800169a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001688:	4b61      	ldr	r3, [pc, #388]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	495e      	ldr	r1, [pc, #376]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 8001696:	4313      	orrs	r3, r2
 8001698:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0320 	and.w	r3, r3, #32
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d010      	beq.n	80016c8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69da      	ldr	r2, [r3, #28]
 80016aa:	4b59      	ldr	r3, [pc, #356]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d908      	bls.n	80016c8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80016b6:	4b56      	ldr	r3, [pc, #344]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	4953      	ldr	r1, [pc, #332]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d010      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	4b4d      	ldr	r3, [pc, #308]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d908      	bls.n	80016f6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e4:	4b4a      	ldr	r3, [pc, #296]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f023 020f 	bic.w	r2, r3, #15
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	4947      	ldr	r1, [pc, #284]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d055      	beq.n	80017ae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001702:	4b43      	ldr	r3, [pc, #268]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	4940      	ldr	r1, [pc, #256]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 8001710:	4313      	orrs	r3, r2
 8001712:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d107      	bne.n	800172c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800171c:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d121      	bne.n	800176c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0f6      	b.n	800191a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b03      	cmp	r3, #3
 8001732:	d107      	bne.n	8001744 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001734:	4b36      	ldr	r3, [pc, #216]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d115      	bne.n	800176c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0ea      	b.n	800191a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d107      	bne.n	800175c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800174c:	4b30      	ldr	r3, [pc, #192]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001754:	2b00      	cmp	r3, #0
 8001756:	d109      	bne.n	800176c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0de      	b.n	800191a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800175c:	4b2c      	ldr	r3, [pc, #176]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d101      	bne.n	800176c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0d6      	b.n	800191a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800176c:	4b28      	ldr	r3, [pc, #160]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	f023 0207 	bic.w	r2, r3, #7
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4925      	ldr	r1, [pc, #148]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 800177a:	4313      	orrs	r3, r2
 800177c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177e:	f7ff f833 	bl	80007e8 <HAL_GetTick>
 8001782:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001784:	e00a      	b.n	800179c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001786:	f7ff f82f 	bl	80007e8 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f241 3288 	movw	r2, #5000	; 0x1388
 8001794:	4293      	cmp	r3, r2
 8001796:	d901      	bls.n	800179c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e0be      	b.n	800191a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179c:	4b1c      	ldr	r3, [pc, #112]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d1eb      	bne.n	8001786 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d010      	beq.n	80017dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d208      	bcs.n	80017dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f023 020f 	bic.w	r2, r3, #15
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	490e      	ldr	r1, [pc, #56]	; (8001810 <HAL_RCC_ClockConfig+0x244>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017dc:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_ClockConfig+0x240>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d214      	bcs.n	8001814 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_RCC_ClockConfig+0x240>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 020f 	bic.w	r2, r3, #15
 80017f2:	4906      	ldr	r1, [pc, #24]	; (800180c <HAL_RCC_ClockConfig+0x240>)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	4b04      	ldr	r3, [pc, #16]	; (800180c <HAL_RCC_ClockConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d005      	beq.n	8001814 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e086      	b.n	800191a <HAL_RCC_ClockConfig+0x34e>
 800180c:	52002000 	.word	0x52002000
 8001810:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d010      	beq.n	8001842 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_RCC_ClockConfig+0x358>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800182c:	429a      	cmp	r2, r3
 800182e:	d208      	bcs.n	8001842 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001830:	4b3c      	ldr	r3, [pc, #240]	; (8001924 <HAL_RCC_ClockConfig+0x358>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	4939      	ldr	r1, [pc, #228]	; (8001924 <HAL_RCC_ClockConfig+0x358>)
 800183e:	4313      	orrs	r3, r2
 8001840:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0308 	and.w	r3, r3, #8
 800184a:	2b00      	cmp	r3, #0
 800184c:	d010      	beq.n	8001870 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695a      	ldr	r2, [r3, #20]
 8001852:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_RCC_ClockConfig+0x358>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800185a:	429a      	cmp	r2, r3
 800185c:	d208      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800185e:	4b31      	ldr	r3, [pc, #196]	; (8001924 <HAL_RCC_ClockConfig+0x358>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	492e      	ldr	r1, [pc, #184]	; (8001924 <HAL_RCC_ClockConfig+0x358>)
 800186c:	4313      	orrs	r3, r2
 800186e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	2b00      	cmp	r3, #0
 800187a:	d010      	beq.n	800189e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	699a      	ldr	r2, [r3, #24]
 8001880:	4b28      	ldr	r3, [pc, #160]	; (8001924 <HAL_RCC_ClockConfig+0x358>)
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001888:	429a      	cmp	r2, r3
 800188a:	d208      	bcs.n	800189e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800188c:	4b25      	ldr	r3, [pc, #148]	; (8001924 <HAL_RCC_ClockConfig+0x358>)
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4922      	ldr	r1, [pc, #136]	; (8001924 <HAL_RCC_ClockConfig+0x358>)
 800189a:	4313      	orrs	r3, r2
 800189c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d010      	beq.n	80018cc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69da      	ldr	r2, [r3, #28]
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_RCC_ClockConfig+0x358>)
 80018b0:	6a1b      	ldr	r3, [r3, #32]
 80018b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d208      	bcs.n	80018cc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <HAL_RCC_ClockConfig+0x358>)
 80018bc:	6a1b      	ldr	r3, [r3, #32]
 80018be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4917      	ldr	r1, [pc, #92]	; (8001924 <HAL_RCC_ClockConfig+0x358>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018cc:	f000 f834 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80018d0:	4601      	mov	r1, r0
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <HAL_RCC_ClockConfig+0x358>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	0a1b      	lsrs	r3, r3, #8
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	4a12      	ldr	r2, [pc, #72]	; (8001928 <HAL_RCC_ClockConfig+0x35c>)
 80018de:	5cd3      	ldrb	r3, [r2, r3]
 80018e0:	f003 031f 	and.w	r3, r3, #31
 80018e4:	fa21 f303 	lsr.w	r3, r1, r3
 80018e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018ea:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <HAL_RCC_ClockConfig+0x358>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	4a0d      	ldr	r2, [pc, #52]	; (8001928 <HAL_RCC_ClockConfig+0x35c>)
 80018f4:	5cd3      	ldrb	r3, [r2, r3]
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001900:	4a0a      	ldr	r2, [pc, #40]	; (800192c <HAL_RCC_ClockConfig+0x360>)
 8001902:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_RCC_ClockConfig+0x364>)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_RCC_ClockConfig+0x368>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe ff20 	bl	8000754 <HAL_InitTick>
 8001914:	4603      	mov	r3, r0
 8001916:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001918:	7bfb      	ldrb	r3, [r7, #15]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	58024400 	.word	0x58024400
 8001928:	08001d38 	.word	0x08001d38
 800192c:	24000004 	.word	0x24000004
 8001930:	24000000 	.word	0x24000000
 8001934:	24000008 	.word	0x24000008

08001938 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800193e:	4baf      	ldr	r3, [pc, #700]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001946:	2b18      	cmp	r3, #24
 8001948:	f200 814e 	bhi.w	8001be8 <HAL_RCC_GetSysClockFreq+0x2b0>
 800194c:	a201      	add	r2, pc, #4	; (adr r2, 8001954 <HAL_RCC_GetSysClockFreq+0x1c>)
 800194e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001952:	bf00      	nop
 8001954:	080019b9 	.word	0x080019b9
 8001958:	08001be9 	.word	0x08001be9
 800195c:	08001be9 	.word	0x08001be9
 8001960:	08001be9 	.word	0x08001be9
 8001964:	08001be9 	.word	0x08001be9
 8001968:	08001be9 	.word	0x08001be9
 800196c:	08001be9 	.word	0x08001be9
 8001970:	08001be9 	.word	0x08001be9
 8001974:	080019df 	.word	0x080019df
 8001978:	08001be9 	.word	0x08001be9
 800197c:	08001be9 	.word	0x08001be9
 8001980:	08001be9 	.word	0x08001be9
 8001984:	08001be9 	.word	0x08001be9
 8001988:	08001be9 	.word	0x08001be9
 800198c:	08001be9 	.word	0x08001be9
 8001990:	08001be9 	.word	0x08001be9
 8001994:	080019e5 	.word	0x080019e5
 8001998:	08001be9 	.word	0x08001be9
 800199c:	08001be9 	.word	0x08001be9
 80019a0:	08001be9 	.word	0x08001be9
 80019a4:	08001be9 	.word	0x08001be9
 80019a8:	08001be9 	.word	0x08001be9
 80019ac:	08001be9 	.word	0x08001be9
 80019b0:	08001be9 	.word	0x08001be9
 80019b4:	080019eb 	.word	0x080019eb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80019b8:	4b90      	ldr	r3, [pc, #576]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0320 	and.w	r3, r3, #32
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d009      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80019c4:	4b8d      	ldr	r3, [pc, #564]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	08db      	lsrs	r3, r3, #3
 80019ca:	f003 0303 	and.w	r3, r3, #3
 80019ce:	4a8c      	ldr	r2, [pc, #560]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
 80019d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80019d6:	e10a      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80019d8:	4b89      	ldr	r3, [pc, #548]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80019da:	61bb      	str	r3, [r7, #24]
    break;
 80019dc:	e107      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80019de:	4b89      	ldr	r3, [pc, #548]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80019e0:	61bb      	str	r3, [r7, #24]
    break;
 80019e2:	e104      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80019e4:	4b88      	ldr	r3, [pc, #544]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80019e6:	61bb      	str	r3, [r7, #24]
    break;
 80019e8:	e101      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80019ea:	4b84      	ldr	r3, [pc, #528]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80019f4:	4b81      	ldr	r3, [pc, #516]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019fe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001a00:	4b7e      	ldr	r3, [pc, #504]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001a0a:	4b7c      	ldr	r3, [pc, #496]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0e:	08db      	lsrs	r3, r3, #3
 8001a10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a22:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80da 	beq.w	8001be2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d05a      	beq.n	8001aea <HAL_RCC_GetSysClockFreq+0x1b2>
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d302      	bcc.n	8001a3e <HAL_RCC_GetSysClockFreq+0x106>
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d078      	beq.n	8001b2e <HAL_RCC_GetSysClockFreq+0x1f6>
 8001a3c:	e099      	b.n	8001b72 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001a3e:	4b6f      	ldr	r3, [pc, #444]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0320 	and.w	r3, r3, #32
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d02d      	beq.n	8001aa6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001a4a:	4b6c      	ldr	r3, [pc, #432]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	08db      	lsrs	r3, r3, #3
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	4a6a      	ldr	r2, [pc, #424]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	ee07 3a90 	vmov	s15, r3
 8001a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	ee07 3a90 	vmov	s15, r3
 8001a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a74:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a7c:	ee07 3a90 	vmov	s15, r3
 8001a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a84:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a88:	eddf 5a60 	vldr	s11, [pc, #384]	; 8001c0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8001a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001aa4:	e087      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ab0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001c10 <HAL_RCC_GetSysClockFreq+0x2d8>
 8001ab4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ab8:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ac8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001acc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001c0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8001ad0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ad4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ad8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001adc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ae8:	e065      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001c14 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001af8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001afc:	4b3f      	ldr	r3, [pc, #252]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b04:	ee07 3a90 	vmov	s15, r3
 8001b08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b0c:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b10:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001c0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8001b14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001b2c:	e043      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	ee07 3a90 	vmov	s15, r3
 8001b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b38:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001c18 <HAL_RCC_GetSysClockFreq+0x2e0>
 8001b3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b48:	ee07 3a90 	vmov	s15, r3
 8001b4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b50:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b54:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001c0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8001b58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001b5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001b70:	e021      	b.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	ee07 3a90 	vmov	s15, r3
 8001b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b7c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001c14 <HAL_RCC_GetSysClockFreq+0x2dc>
 8001b80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001b84:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b94:	ed97 6a02 	vldr	s12, [r7, #8]
 8001b98:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001c0c <HAL_RCC_GetSysClockFreq+0x2d4>
 8001b9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ba0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ba4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ba8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001bb4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	0a5b      	lsrs	r3, r3, #9
 8001bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bce:	edd7 6a07 	vldr	s13, [r7, #28]
 8001bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001bda:	ee17 3a90 	vmov	r3, s15
 8001bde:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001be0:	e005      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
    break;
 8001be6:	e002      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001bea:	61bb      	str	r3, [r7, #24]
    break;
 8001bec:	bf00      	nop
  }

  return sysclockfreq;
 8001bee:	69bb      	ldr	r3, [r7, #24]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3724      	adds	r7, #36	; 0x24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	58024400 	.word	0x58024400
 8001c00:	03d09000 	.word	0x03d09000
 8001c04:	003d0900 	.word	0x003d0900
 8001c08:	017d7840 	.word	0x017d7840
 8001c0c:	46000000 	.word	0x46000000
 8001c10:	4c742400 	.word	0x4c742400
 8001c14:	4a742400 	.word	0x4a742400
 8001c18:	4bbebc20 	.word	0x4bbebc20

08001c1c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_RCCEx_CRSConfig+0xa4>)
 8001c26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c2a:	4a25      	ldr	r2, [pc, #148]	; (8001cc0 <HAL_RCCEx_CRSConfig+0xa4>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 8001c34:	4b22      	ldr	r3, [pc, #136]	; (8001cc0 <HAL_RCCEx_CRSConfig+0xa4>)
 8001c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3a:	4a21      	ldr	r2, [pc, #132]	; (8001cc0 <HAL_RCCEx_CRSConfig+0xa4>)
 8001c3c:	f023 0302 	bic.w	r3, r3, #2
 8001c40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 8001c44:	f7fe fddc 	bl	8000800 <HAL_GetREVID>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	f241 0303 	movw	r3, #4099	; 0x1003
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d80b      	bhi.n	8001c6a <HAL_RCCEx_CRSConfig+0x4e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001c5a:	d106      	bne.n	8001c6a <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	e008      	b.n	8001c7c <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	041b      	lsls	r3, r3, #16
 8001c8c:	68fa      	ldr	r2, [r7, #12]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8001c92:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <HAL_RCCEx_CRSConfig+0xa8>)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8001c98:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_RCCEx_CRSConfig+0xa8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	4907      	ldr	r1, [pc, #28]	; (8001cc4 <HAL_RCCEx_CRSConfig+0xa8>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCCEx_CRSConfig+0xa8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <HAL_RCCEx_CRSConfig+0xa8>)
 8001cb2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	58024400 	.word	0x58024400
 8001cc4:	40008400 	.word	0x40008400

08001cc8 <__libc_init_array>:
 8001cc8:	b570      	push	{r4, r5, r6, lr}
 8001cca:	4e0d      	ldr	r6, [pc, #52]	; (8001d00 <__libc_init_array+0x38>)
 8001ccc:	4c0d      	ldr	r4, [pc, #52]	; (8001d04 <__libc_init_array+0x3c>)
 8001cce:	1ba4      	subs	r4, r4, r6
 8001cd0:	10a4      	asrs	r4, r4, #2
 8001cd2:	2500      	movs	r5, #0
 8001cd4:	42a5      	cmp	r5, r4
 8001cd6:	d109      	bne.n	8001cec <__libc_init_array+0x24>
 8001cd8:	4e0b      	ldr	r6, [pc, #44]	; (8001d08 <__libc_init_array+0x40>)
 8001cda:	4c0c      	ldr	r4, [pc, #48]	; (8001d0c <__libc_init_array+0x44>)
 8001cdc:	f000 f820 	bl	8001d20 <_init>
 8001ce0:	1ba4      	subs	r4, r4, r6
 8001ce2:	10a4      	asrs	r4, r4, #2
 8001ce4:	2500      	movs	r5, #0
 8001ce6:	42a5      	cmp	r5, r4
 8001ce8:	d105      	bne.n	8001cf6 <__libc_init_array+0x2e>
 8001cea:	bd70      	pop	{r4, r5, r6, pc}
 8001cec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cf0:	4798      	blx	r3
 8001cf2:	3501      	adds	r5, #1
 8001cf4:	e7ee      	b.n	8001cd4 <__libc_init_array+0xc>
 8001cf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cfa:	4798      	blx	r3
 8001cfc:	3501      	adds	r5, #1
 8001cfe:	e7f2      	b.n	8001ce6 <__libc_init_array+0x1e>
 8001d00:	08001d48 	.word	0x08001d48
 8001d04:	08001d48 	.word	0x08001d48
 8001d08:	08001d48 	.word	0x08001d48
 8001d0c:	08001d4c 	.word	0x08001d4c

08001d10 <memset>:
 8001d10:	4402      	add	r2, r0
 8001d12:	4603      	mov	r3, r0
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d100      	bne.n	8001d1a <memset+0xa>
 8001d18:	4770      	bx	lr
 8001d1a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d1e:	e7f9      	b.n	8001d14 <memset+0x4>

08001d20 <_init>:
 8001d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d22:	bf00      	nop
 8001d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d26:	bc08      	pop	{r3}
 8001d28:	469e      	mov	lr, r3
 8001d2a:	4770      	bx	lr

08001d2c <_fini>:
 8001d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d2e:	bf00      	nop
 8001d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d32:	bc08      	pop	{r3}
 8001d34:	469e      	mov	lr, r3
 8001d36:	4770      	bx	lr
