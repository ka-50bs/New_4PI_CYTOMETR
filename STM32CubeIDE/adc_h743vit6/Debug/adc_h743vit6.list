
adc_h743vit6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007700  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007998  08007998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079f0  080079f0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080079f0  080079f0  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079f0  080079f0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f0  080079f0  000179f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079f4  080079f4  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  24000000  080079f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001900  240001e4  08007bdc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24001ae4  08007bdc  00021ae4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e251  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038a4  00000000  00000000  0003e463  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e40  00000000  00000000  00041d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd8  00000000  00000000  00042b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00037ba1  00000000  00000000  00043820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f1fc  00000000  00000000  0007b3c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001509c2  00000000  00000000  0008a5bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001daf7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f4  00000000  00000000  001daffc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001e4 	.word	0x240001e4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007980 	.word	0x08007980

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001e8 	.word	0x240001e8
 80002d4:	08007980 	.word	0x08007980

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002de:	f000 f9db 	bl	8000698 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e2:	f000 f80d 	bl	8000300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e6:	f000 f8ab 	bl	8000440 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80002ea:	f006 fd57 	bl	8006d9c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t a = 'a';
 80002ee:	2361      	movs	r3, #97	; 0x61
 80002f0:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CDC_Transmit_FS(&a, sizeof(a));
 80002f2:	1dfb      	adds	r3, r7, #7
 80002f4:	2101      	movs	r1, #1
 80002f6:	4618      	mov	r0, r3
 80002f8:	f006 fe10 	bl	8006f1c <CDC_Transmit_FS>
 80002fc:	e7f9      	b.n	80002f2 <main+0x1a>
	...

08000300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b0cc      	sub	sp, #304	; 0x130
 8000304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000306:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800030a:	224c      	movs	r2, #76	; 0x4c
 800030c:	2100      	movs	r1, #0
 800030e:	4618      	mov	r0, r3
 8000310:	f007 fa74 	bl	80077fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000314:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000318:	2220      	movs	r2, #32
 800031a:	2100      	movs	r1, #0
 800031c:	4618      	mov	r0, r3
 800031e:	f007 fa6d 	bl	80077fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000322:	f107 0308 	add.w	r3, r7, #8
 8000326:	4618      	mov	r0, r3
 8000328:	23bc      	movs	r3, #188	; 0xbc
 800032a:	461a      	mov	r2, r3
 800032c:	2100      	movs	r1, #0
 800032e:	f007 fa65 	bl	80077fc <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000332:	2002      	movs	r0, #2
 8000334:	f001 ff0c 	bl	8002150 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
 800033e:	4b3e      	ldr	r3, [pc, #248]	; (8000438 <SystemClock_Config+0x138>)
 8000340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000342:	4a3d      	ldr	r2, [pc, #244]	; (8000438 <SystemClock_Config+0x138>)
 8000344:	f023 0301 	bic.w	r3, r3, #1
 8000348:	62d3      	str	r3, [r2, #44]	; 0x2c
 800034a:	4b3b      	ldr	r3, [pc, #236]	; (8000438 <SystemClock_Config+0x138>)
 800034c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800034e:	f003 0201 	and.w	r2, r3, #1
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	4b39      	ldr	r3, [pc, #228]	; (800043c <SystemClock_Config+0x13c>)
 8000358:	699b      	ldr	r3, [r3, #24]
 800035a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800035e:	4a37      	ldr	r2, [pc, #220]	; (800043c <SystemClock_Config+0x13c>)
 8000360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000364:	6193      	str	r3, [r2, #24]
 8000366:	4b35      	ldr	r3, [pc, #212]	; (800043c <SystemClock_Config+0x13c>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800036e:	1d3b      	adds	r3, r7, #4
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000376:	bf00      	nop
 8000378:	4b30      	ldr	r3, [pc, #192]	; (800043c <SystemClock_Config+0x13c>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000384:	d1f8      	bne.n	8000378 <SystemClock_Config+0x78>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000386:	2322      	movs	r3, #34	; 0x22
 8000388:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800038c:	2301      	movs	r3, #1
 800038e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000392:	2340      	movs	r3, #64	; 0x40
 8000394:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000398:	2301      	movs	r3, #1
 800039a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800039e:	2300      	movs	r3, #0
 80003a0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80003a8:	4618      	mov	r0, r3
 80003aa:	f001 ff1b 	bl	80021e4 <HAL_RCC_OscConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80003b4:	f000 f85e 	bl	8000474 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b8:	233f      	movs	r3, #63	; 0x3f
 80003ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003be:	2300      	movs	r3, #0
 80003c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003c4:	2300      	movs	r3, #0
 80003c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003d6:	2300      	movs	r3, #0
 80003d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003e2:	2300      	movs	r3, #0
 80003e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003e8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80003ec:	2100      	movs	r1, #0
 80003ee:	4618      	mov	r0, r3
 80003f0:	f002 fad0 	bl	8002994 <HAL_RCC_ClockConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80003fa:	f000 f83b 	bl	8000474 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80003fe:	f107 0308 	add.w	r3, r7, #8
 8000402:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000406:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000408:	f107 0308 	add.w	r3, r7, #8
 800040c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000414:	f107 0308 	add.w	r3, r7, #8
 8000418:	4618      	mov	r0, r3
 800041a:	f002 fe13 	bl	8003044 <HAL_RCCEx_PeriphCLKConfig>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000424:	f000 f826 	bl	8000474 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000428:	f001 fecc 	bl	80021c4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800042c:	bf00      	nop
 800042e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	58000400 	.word	0x58000400
 800043c:	58024800 	.word	0x58024800

08000440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <MX_GPIO_Init+0x30>)
 8000448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800044c:	4a08      	ldr	r2, [pc, #32]	; (8000470 <MX_GPIO_Init+0x30>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000456:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_GPIO_Init+0x30>)
 8000458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800045c:	f003 0301 	and.w	r3, r3, #1
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]

}
 8000464:	bf00      	nop
 8000466:	370c      	adds	r7, #12
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	58024400 	.word	0x58024400

08000474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000478:	bf00      	nop
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
	...

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048a:	4b0a      	ldr	r3, [pc, #40]	; (80004b4 <HAL_MspInit+0x30>)
 800048c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000490:	4a08      	ldr	r2, [pc, #32]	; (80004b4 <HAL_MspInit+0x30>)
 8000492:	f043 0302 	orr.w	r3, r3, #2
 8000496:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800049a:	4b06      	ldr	r3, [pc, #24]	; (80004b4 <HAL_MspInit+0x30>)
 800049c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80004a0:	f003 0302 	and.w	r3, r3, #2
 80004a4:	607b      	str	r3, [r7, #4]
 80004a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	58024400 	.word	0x58024400

080004b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c6:	b480      	push	{r7}
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ca:	e7fe      	b.n	80004ca <HardFault_Handler+0x4>

080004cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d0:	e7fe      	b.n	80004d0 <MemManage_Handler+0x4>

080004d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d2:	b480      	push	{r7}
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004d6:	e7fe      	b.n	80004d6 <BusFault_Handler+0x4>

080004d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004dc:	e7fe      	b.n	80004dc <UsageFault_Handler+0x4>

080004de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800050c:	f000 f936 	bl	800077c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}

08000514 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000518:	4802      	ldr	r0, [pc, #8]	; (8000524 <OTG_FS_IRQHandler+0x10>)
 800051a:	f000 fd94 	bl	8001046 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	240016d8 	.word	0x240016d8

08000528 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000530:	4b11      	ldr	r3, [pc, #68]	; (8000578 <_sbrk+0x50>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d102      	bne.n	800053e <_sbrk+0x16>
		heap_end = &end;
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <_sbrk+0x50>)
 800053a:	4a10      	ldr	r2, [pc, #64]	; (800057c <_sbrk+0x54>)
 800053c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <_sbrk+0x50>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000544:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <_sbrk+0x50>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	4413      	add	r3, r2
 800054c:	466a      	mov	r2, sp
 800054e:	4293      	cmp	r3, r2
 8000550:	d907      	bls.n	8000562 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000552:	f007 f919 	bl	8007788 <__errno>
 8000556:	4602      	mov	r2, r0
 8000558:	230c      	movs	r3, #12
 800055a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800055c:	f04f 33ff 	mov.w	r3, #4294967295
 8000560:	e006      	b.n	8000570 <_sbrk+0x48>
	}

	heap_end += incr;
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <_sbrk+0x50>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	4a03      	ldr	r2, [pc, #12]	; (8000578 <_sbrk+0x50>)
 800056c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800056e:	68fb      	ldr	r3, [r7, #12]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	24000200 	.word	0x24000200
 800057c:	24001ae8 	.word	0x24001ae8

08000580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000584:	4b29      	ldr	r3, [pc, #164]	; (800062c <SystemInit+0xac>)
 8000586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800058a:	4a28      	ldr	r2, [pc, #160]	; (800062c <SystemInit+0xac>)
 800058c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000590:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000594:	4b26      	ldr	r3, [pc, #152]	; (8000630 <SystemInit+0xb0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a25      	ldr	r2, [pc, #148]	; (8000630 <SystemInit+0xb0>)
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80005a0:	4b23      	ldr	r3, [pc, #140]	; (8000630 <SystemInit+0xb0>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80005a6:	4b22      	ldr	r3, [pc, #136]	; (8000630 <SystemInit+0xb0>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	4921      	ldr	r1, [pc, #132]	; (8000630 <SystemInit+0xb0>)
 80005ac:	4b21      	ldr	r3, [pc, #132]	; (8000634 <SystemInit+0xb4>)
 80005ae:	4013      	ands	r3, r2
 80005b0:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80005b2:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <SystemInit+0xb0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80005b8:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <SystemInit+0xb0>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80005be:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <SystemInit+0xb0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <SystemInit+0xb0>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80005ca:	4b19      	ldr	r3, [pc, #100]	; (8000630 <SystemInit+0xb0>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <SystemInit+0xb0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80005d6:	4b16      	ldr	r3, [pc, #88]	; (8000630 <SystemInit+0xb0>)
 80005d8:	2200      	movs	r2, #0
 80005da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <SystemInit+0xb0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80005e2:	4b13      	ldr	r3, [pc, #76]	; (8000630 <SystemInit+0xb0>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <SystemInit+0xb0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <SystemInit+0xb0>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <SystemInit+0xb0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <SystemInit+0xb0>)
 80005fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <SystemInit+0xb0>)
 8000602:	2200      	movs	r2, #0
 8000604:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <SystemInit+0xb8>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <SystemInit+0xbc>)
 800060c:	4013      	ands	r3, r2
 800060e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000612:	d202      	bcs.n	800061a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <SystemInit+0xc0>)
 8000616:	2201      	movs	r2, #1
 8000618:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800061a:	4b04      	ldr	r3, [pc, #16]	; (800062c <SystemInit+0xac>)
 800061c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000620:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000622:	bf00      	nop
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00
 8000630:	58024400 	.word	0x58024400
 8000634:	eaf6ed7f 	.word	0xeaf6ed7f
 8000638:	5c001000 	.word	0x5c001000
 800063c:	ffff0000 	.word	0xffff0000
 8000640:	51008108 	.word	0x51008108

08000644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800067c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000648:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800064a:	e003      	b.n	8000654 <LoopCopyDataInit>

0800064c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800064e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000650:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000652:	3104      	adds	r1, #4

08000654 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000654:	480b      	ldr	r0, [pc, #44]	; (8000684 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000658:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800065a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800065c:	d3f6      	bcc.n	800064c <CopyDataInit>
  ldr  r2, =_sbss
 800065e:	4a0b      	ldr	r2, [pc, #44]	; (800068c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000660:	e002      	b.n	8000668 <LoopFillZerobss>

08000662 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000662:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000664:	f842 3b04 	str.w	r3, [r2], #4

08000668 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800066a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800066c:	d3f9      	bcc.n	8000662 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800066e:	f7ff ff87 	bl	8000580 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000672:	f007 f88f 	bl	8007794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000676:	f7ff fe2f 	bl	80002d8 <main>
  bx  lr    
 800067a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800067c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000680:	080079f8 	.word	0x080079f8
  ldr  r0, =_sdata
 8000684:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8000688:	240001e4 	.word	0x240001e4
  ldr  r2, =_sbss
 800068c:	240001e4 	.word	0x240001e4
  ldr  r3, = _ebss
 8000690:	24001ae4 	.word	0x24001ae4

08000694 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000694:	e7fe      	b.n	8000694 <ADC3_IRQHandler>
	...

08000698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069e:	2003      	movs	r0, #3
 80006a0:	f000 f98a 	bl	80009b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80006a4:	f002 fb2c 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 80006a8:	4601      	mov	r1, r0
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <HAL_Init+0x68>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	0a1b      	lsrs	r3, r3, #8
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	4a13      	ldr	r2, [pc, #76]	; (8000704 <HAL_Init+0x6c>)
 80006b6:	5cd3      	ldrb	r3, [r2, r3]
 80006b8:	f003 031f 	and.w	r3, r3, #31
 80006bc:	fa21 f303 	lsr.w	r3, r1, r3
 80006c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <HAL_Init+0x68>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	4a0e      	ldr	r2, [pc, #56]	; (8000704 <HAL_Init+0x6c>)
 80006cc:	5cd3      	ldrb	r3, [r2, r3]
 80006ce:	f003 031f 	and.w	r3, r3, #31
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	fa22 f303 	lsr.w	r3, r2, r3
 80006d8:	4a0b      	ldr	r2, [pc, #44]	; (8000708 <HAL_Init+0x70>)
 80006da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80006dc:	4a0b      	ldr	r2, [pc, #44]	; (800070c <HAL_Init+0x74>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 f814 	bl	8000710 <HAL_InitTick>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e002      	b.n	80006f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80006f2:	f7ff fec7 	bl	8000484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006f6:	2300      	movs	r3, #0
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	58024400 	.word	0x58024400
 8000704:	080079e0 	.word	0x080079e0
 8000708:	24000004 	.word	0x24000004
 800070c:	24000000 	.word	0x24000000

08000710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <HAL_InitTick+0x60>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d101      	bne.n	8000724 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000720:	2301      	movs	r3, #1
 8000722:	e021      	b.n	8000768 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <HAL_InitTick+0x64>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b11      	ldr	r3, [pc, #68]	; (8000770 <HAL_InitTick+0x60>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000732:	fbb3 f3f1 	udiv	r3, r3, r1
 8000736:	fbb2 f3f3 	udiv	r3, r2, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f96f 	bl	8000a1e <HAL_SYSTICK_Config>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e00e      	b.n	8000768 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d80a      	bhi.n	8000766 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000750:	2200      	movs	r2, #0
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	f04f 30ff 	mov.w	r0, #4294967295
 8000758:	f000 f939 	bl	80009ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800075c:	4a06      	ldr	r2, [pc, #24]	; (8000778 <HAL_InitTick+0x68>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	e000      	b.n	8000768 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2400000c 	.word	0x2400000c
 8000774:	24000000 	.word	0x24000000
 8000778:	24000008 	.word	0x24000008

0800077c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_IncTick+0x20>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_IncTick+0x24>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a04      	ldr	r2, [pc, #16]	; (80007a0 <HAL_IncTick+0x24>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	2400000c 	.word	0x2400000c
 80007a0:	24000210 	.word	0x24000210

080007a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <HAL_GetTick+0x14>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	24000210 	.word	0x24000210

080007bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c4:	f7ff ffee 	bl	80007a4 <HAL_GetTick>
 80007c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007d4:	d005      	beq.n	80007e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_Delay+0x40>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	461a      	mov	r2, r3
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4413      	add	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007e2:	bf00      	nop
 80007e4:	f7ff ffde 	bl	80007a4 <HAL_GetTick>
 80007e8:	4602      	mov	r2, r0
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	1ad3      	subs	r3, r2, r3
 80007ee:	68fa      	ldr	r2, [r7, #12]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d8f7      	bhi.n	80007e4 <HAL_Delay+0x28>
  {
  }
}
 80007f4:	bf00      	nop
 80007f6:	3710      	adds	r7, #16
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2400000c 	.word	0x2400000c

08000800 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000804:	4b03      	ldr	r3, [pc, #12]	; (8000814 <HAL_GetREVID+0x14>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	0c1b      	lsrs	r3, r3, #16
}
 800080a:	4618      	mov	r0, r3
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	5c001000 	.word	0x5c001000

08000818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <__NVIC_SetPriorityGrouping+0x40>)
 800082a:	68db      	ldr	r3, [r3, #12]
 800082c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800082e:	68ba      	ldr	r2, [r7, #8]
 8000830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000834:	4013      	ands	r3, r2
 8000836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <__NVIC_SetPriorityGrouping+0x44>)
 8000842:	4313      	orrs	r3, r2
 8000844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000846:	4a04      	ldr	r2, [pc, #16]	; (8000858 <__NVIC_SetPriorityGrouping+0x40>)
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	60d3      	str	r3, [r2, #12]
}
 800084c:	bf00      	nop
 800084e:	3714      	adds	r7, #20
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	e000ed00 	.word	0xe000ed00
 800085c:	05fa0000 	.word	0x05fa0000

08000860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000864:	4b04      	ldr	r3, [pc, #16]	; (8000878 <__NVIC_GetPriorityGrouping+0x18>)
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	0a1b      	lsrs	r3, r3, #8
 800086a:	f003 0307 	and.w	r3, r3, #7
}
 800086e:	4618      	mov	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000886:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800088a:	2b00      	cmp	r3, #0
 800088c:	db0b      	blt.n	80008a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	f003 021f 	and.w	r2, r3, #31
 8000894:	4907      	ldr	r1, [pc, #28]	; (80008b4 <__NVIC_EnableIRQ+0x38>)
 8000896:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800089a:	095b      	lsrs	r3, r3, #5
 800089c:	2001      	movs	r0, #1
 800089e:	fa00 f202 	lsl.w	r2, r0, r2
 80008a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	e000e100 	.word	0xe000e100

080008b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80008c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	db0a      	blt.n	80008e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	490c      	ldr	r1, [pc, #48]	; (8000904 <__NVIC_SetPriority+0x4c>)
 80008d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	440b      	add	r3, r1
 80008dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e0:	e00a      	b.n	80008f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4908      	ldr	r1, [pc, #32]	; (8000908 <__NVIC_SetPriority+0x50>)
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	f003 030f 	and.w	r3, r3, #15
 80008ee:	3b04      	subs	r3, #4
 80008f0:	0112      	lsls	r2, r2, #4
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	440b      	add	r3, r1
 80008f6:	761a      	strb	r2, [r3, #24]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000e100 	.word	0xe000e100
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f1c3 0307 	rsb	r3, r3, #7
 8000926:	2b04      	cmp	r3, #4
 8000928:	bf28      	it	cs
 800092a:	2304      	movcs	r3, #4
 800092c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3304      	adds	r3, #4
 8000932:	2b06      	cmp	r3, #6
 8000934:	d902      	bls.n	800093c <NVIC_EncodePriority+0x30>
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3b03      	subs	r3, #3
 800093a:	e000      	b.n	800093e <NVIC_EncodePriority+0x32>
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	f04f 32ff 	mov.w	r2, #4294967295
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43da      	mvns	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	401a      	ands	r2, r3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000954:	f04f 31ff 	mov.w	r1, #4294967295
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	43d9      	mvns	r1, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	4313      	orrs	r3, r2
         );
}
 8000966:	4618      	mov	r0, r3
 8000968:	3724      	adds	r7, #36	; 0x24
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
	...

08000974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3b01      	subs	r3, #1
 8000980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000984:	d301      	bcc.n	800098a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000986:	2301      	movs	r3, #1
 8000988:	e00f      	b.n	80009aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098a:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <SysTick_Config+0x40>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000992:	210f      	movs	r1, #15
 8000994:	f04f 30ff 	mov.w	r0, #4294967295
 8000998:	f7ff ff8e 	bl	80008b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <SysTick_Config+0x40>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <SysTick_Config+0x40>)
 80009a4:	2207      	movs	r2, #7
 80009a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	e000e010 	.word	0xe000e010

080009b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f7ff ff29 	bl	8000818 <__NVIC_SetPriorityGrouping>
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}

080009ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b086      	sub	sp, #24
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	4603      	mov	r3, r0
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009dc:	f7ff ff40 	bl	8000860 <__NVIC_GetPriorityGrouping>
 80009e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	68b9      	ldr	r1, [r7, #8]
 80009e6:	6978      	ldr	r0, [r7, #20]
 80009e8:	f7ff ff90 	bl	800090c <NVIC_EncodePriority>
 80009ec:	4602      	mov	r2, r0
 80009ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff5f 	bl	80008b8 <__NVIC_SetPriority>
}
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4603      	mov	r3, r0
 8000a0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff33 	bl	800087c <__NVIC_EnableIRQ>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ffa4 	bl	8000974 <SysTick_Config>
 8000a2c:	4603      	mov	r3, r0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000a46:	4b89      	ldr	r3, [pc, #548]	; (8000c6c <HAL_GPIO_Init+0x234>)
 8000a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000a4a:	e194      	b.n	8000d76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	2101      	movs	r1, #1
 8000a52:	69fb      	ldr	r3, [r7, #28]
 8000a54:	fa01 f303 	lsl.w	r3, r1, r3
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	f000 8186 	beq.w	8000d70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d00b      	beq.n	8000a84 <HAL_GPIO_Init+0x4c>
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	2b02      	cmp	r3, #2
 8000a72:	d007      	beq.n	8000a84 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a78:	2b11      	cmp	r3, #17
 8000a7a:	d003      	beq.n	8000a84 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2b12      	cmp	r3, #18
 8000a82:	d130      	bne.n	8000ae6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	2203      	movs	r2, #3
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	43db      	mvns	r3, r3
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	68da      	ldr	r2, [r3, #12]
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	69ba      	ldr	r2, [r7, #24]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	69ba      	ldr	r2, [r7, #24]
 8000ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aba:	2201      	movs	r2, #1
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	091b      	lsrs	r3, r3, #4
 8000ad0:	f003 0201 	and.w	r2, r3, #1
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ada:	69ba      	ldr	r2, [r7, #24]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2203      	movs	r2, #3
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	69ba      	ldr	r2, [r7, #24]
 8000afa:	4013      	ands	r3, r2
 8000afc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	689a      	ldr	r2, [r3, #8]
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	69ba      	ldr	r2, [r7, #24]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	69ba      	ldr	r2, [r7, #24]
 8000b14:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0xee>
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2b12      	cmp	r3, #18
 8000b24:	d123      	bne.n	8000b6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	08da      	lsrs	r2, r3, #3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3208      	adds	r2, #8
 8000b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	220f      	movs	r2, #15
 8000b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b42:	43db      	mvns	r3, r3
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	4013      	ands	r3, r2
 8000b48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	691a      	ldr	r2, [r3, #16]
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	f003 0307 	and.w	r3, r3, #7
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	69ba      	ldr	r2, [r7, #24]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	08da      	lsrs	r2, r3, #3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3208      	adds	r2, #8
 8000b68:	69b9      	ldr	r1, [r7, #24]
 8000b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	2203      	movs	r2, #3
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	43db      	mvns	r3, r3
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	4013      	ands	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f003 0203 	and.w	r2, r3, #3
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69ba      	ldr	r2, [r7, #24]
 8000ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 80e0 	beq.w	8000d70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb0:	4b2f      	ldr	r3, [pc, #188]	; (8000c70 <HAL_GPIO_Init+0x238>)
 8000bb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bb6:	4a2e      	ldr	r2, [pc, #184]	; (8000c70 <HAL_GPIO_Init+0x238>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	; (8000c70 <HAL_GPIO_Init+0x238>)
 8000bc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bce:	4a29      	ldr	r2, [pc, #164]	; (8000c74 <HAL_GPIO_Init+0x23c>)
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	3302      	adds	r3, #2
 8000bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f003 0303 	and.w	r3, r3, #3
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	220f      	movs	r2, #15
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a20      	ldr	r2, [pc, #128]	; (8000c78 <HAL_GPIO_Init+0x240>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d052      	beq.n	8000ca0 <HAL_GPIO_Init+0x268>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a1f      	ldr	r2, [pc, #124]	; (8000c7c <HAL_GPIO_Init+0x244>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d031      	beq.n	8000c66 <HAL_GPIO_Init+0x22e>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a1e      	ldr	r2, [pc, #120]	; (8000c80 <HAL_GPIO_Init+0x248>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d02b      	beq.n	8000c62 <HAL_GPIO_Init+0x22a>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_GPIO_Init+0x24c>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d025      	beq.n	8000c5e <HAL_GPIO_Init+0x226>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <HAL_GPIO_Init+0x250>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d01f      	beq.n	8000c5a <HAL_GPIO_Init+0x222>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	; (8000c8c <HAL_GPIO_Init+0x254>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d019      	beq.n	8000c56 <HAL_GPIO_Init+0x21e>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4a1a      	ldr	r2, [pc, #104]	; (8000c90 <HAL_GPIO_Init+0x258>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d013      	beq.n	8000c52 <HAL_GPIO_Init+0x21a>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4a19      	ldr	r2, [pc, #100]	; (8000c94 <HAL_GPIO_Init+0x25c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d00d      	beq.n	8000c4e <HAL_GPIO_Init+0x216>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4a18      	ldr	r2, [pc, #96]	; (8000c98 <HAL_GPIO_Init+0x260>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d007      	beq.n	8000c4a <HAL_GPIO_Init+0x212>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4a17      	ldr	r2, [pc, #92]	; (8000c9c <HAL_GPIO_Init+0x264>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d101      	bne.n	8000c46 <HAL_GPIO_Init+0x20e>
 8000c42:	2309      	movs	r3, #9
 8000c44:	e02d      	b.n	8000ca2 <HAL_GPIO_Init+0x26a>
 8000c46:	230a      	movs	r3, #10
 8000c48:	e02b      	b.n	8000ca2 <HAL_GPIO_Init+0x26a>
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	e029      	b.n	8000ca2 <HAL_GPIO_Init+0x26a>
 8000c4e:	2307      	movs	r3, #7
 8000c50:	e027      	b.n	8000ca2 <HAL_GPIO_Init+0x26a>
 8000c52:	2306      	movs	r3, #6
 8000c54:	e025      	b.n	8000ca2 <HAL_GPIO_Init+0x26a>
 8000c56:	2305      	movs	r3, #5
 8000c58:	e023      	b.n	8000ca2 <HAL_GPIO_Init+0x26a>
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	e021      	b.n	8000ca2 <HAL_GPIO_Init+0x26a>
 8000c5e:	2303      	movs	r3, #3
 8000c60:	e01f      	b.n	8000ca2 <HAL_GPIO_Init+0x26a>
 8000c62:	2302      	movs	r3, #2
 8000c64:	e01d      	b.n	8000ca2 <HAL_GPIO_Init+0x26a>
 8000c66:	2301      	movs	r3, #1
 8000c68:	e01b      	b.n	8000ca2 <HAL_GPIO_Init+0x26a>
 8000c6a:	bf00      	nop
 8000c6c:	58000080 	.word	0x58000080
 8000c70:	58024400 	.word	0x58024400
 8000c74:	58000400 	.word	0x58000400
 8000c78:	58020000 	.word	0x58020000
 8000c7c:	58020400 	.word	0x58020400
 8000c80:	58020800 	.word	0x58020800
 8000c84:	58020c00 	.word	0x58020c00
 8000c88:	58021000 	.word	0x58021000
 8000c8c:	58021400 	.word	0x58021400
 8000c90:	58021800 	.word	0x58021800
 8000c94:	58021c00 	.word	0x58021c00
 8000c98:	58022000 	.word	0x58022000
 8000c9c:	58022400 	.word	0x58022400
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	69fa      	ldr	r2, [r7, #28]
 8000ca4:	f002 0203 	and.w	r2, r2, #3
 8000ca8:	0092      	lsls	r2, r2, #2
 8000caa:	4093      	lsls	r3, r2
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cb2:	4938      	ldr	r1, [pc, #224]	; (8000d94 <HAL_GPIO_Init+0x35c>)
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	089b      	lsrs	r3, r3, #2
 8000cb8:	3302      	adds	r3, #2
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	43db      	mvns	r3, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d003      	beq.n	8000d68 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	3301      	adds	r3, #1
 8000d74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f47f ae63 	bne.w	8000a4c <HAL_GPIO_Init+0x14>
  }
}
 8000d86:	bf00      	nop
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	58000400 	.word	0x58000400

08000d98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d9a:	b08f      	sub	sp, #60	; 0x3c
 8000d9c:	af0a      	add	r7, sp, #40	; 0x28
 8000d9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e116      	b.n	8000fd8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d106      	bne.n	8000dca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f006 f9dd 	bl	8007184 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2203      	movs	r2, #3
 8000dce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d102      	bne.n	8000de4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f003 fa82 	bl	80042f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	687e      	ldr	r6, [r7, #4]
 8000df6:	466d      	mov	r5, sp
 8000df8:	f106 0410 	add.w	r4, r6, #16
 8000dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e08:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e0c:	1d33      	adds	r3, r6, #4
 8000e0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e10:	6838      	ldr	r0, [r7, #0]
 8000e12:	f003 f959 	bl	80040c8 <USB_CoreInit>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d005      	beq.n	8000e28 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2202      	movs	r2, #2
 8000e20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	e0d7      	b.n	8000fd8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f003 fa70 	bl	8004314 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	73fb      	strb	r3, [r7, #15]
 8000e38:	e04a      	b.n	8000ed0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e3a:	7bfa      	ldrb	r2, [r7, #15]
 8000e3c:	6879      	ldr	r1, [r7, #4]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	440b      	add	r3, r1
 8000e48:	333d      	adds	r3, #61	; 0x3d
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e4e:	7bfa      	ldrb	r2, [r7, #15]
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	4613      	mov	r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	1a9b      	subs	r3, r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	333c      	adds	r3, #60	; 0x3c
 8000e5e:	7bfa      	ldrb	r2, [r7, #15]
 8000e60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e62:	7bfa      	ldrb	r2, [r7, #15]
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	b298      	uxth	r0, r3
 8000e68:	6879      	ldr	r1, [r7, #4]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	1a9b      	subs	r3, r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	440b      	add	r3, r1
 8000e74:	3342      	adds	r3, #66	; 0x42
 8000e76:	4602      	mov	r2, r0
 8000e78:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e7a:	7bfa      	ldrb	r2, [r7, #15]
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	333f      	adds	r3, #63	; 0x3f
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e8e:	7bfa      	ldrb	r2, [r7, #15]
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	3344      	adds	r3, #68	; 0x44
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	1a9b      	subs	r3, r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	3348      	adds	r3, #72	; 0x48
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	1a9b      	subs	r3, r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3350      	adds	r3, #80	; 0x50
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d3af      	bcc.n	8000e3a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eda:	2300      	movs	r3, #0
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	e044      	b.n	8000f6a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ee0:	7bfa      	ldrb	r2, [r7, #15]
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	1a9b      	subs	r3, r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	440b      	add	r3, r1
 8000eee:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ef6:	7bfa      	ldrb	r2, [r7, #15]
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	1a9b      	subs	r3, r3, r2
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	440b      	add	r3, r1
 8000f04:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f08:	7bfa      	ldrb	r2, [r7, #15]
 8000f0a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	1a9b      	subs	r3, r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	440b      	add	r3, r1
 8000f1a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f22:	7bfa      	ldrb	r2, [r7, #15]
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	4613      	mov	r3, r2
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	1a9b      	subs	r3, r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f38:	7bfa      	ldrb	r2, [r7, #15]
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	1a9b      	subs	r3, r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f4e:	7bfa      	ldrb	r2, [r7, #15]
 8000f50:	6879      	ldr	r1, [r7, #4]
 8000f52:	4613      	mov	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	1a9b      	subs	r3, r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	440b      	add	r3, r1
 8000f5c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	3301      	adds	r3, #1
 8000f68:	73fb      	strb	r3, [r7, #15]
 8000f6a:	7bfa      	ldrb	r2, [r7, #15]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d3b5      	bcc.n	8000ee0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	687e      	ldr	r6, [r7, #4]
 8000f7c:	466d      	mov	r5, sp
 8000f7e:	f106 0410 	add.w	r4, r6, #16
 8000f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f92:	1d33      	adds	r3, r6, #4
 8000f94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f003 f9e6 	bl	8004368 <USB_DevInit>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d005      	beq.n	8000fae <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e014      	b.n	8000fd8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d102      	bne.n	8000fcc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f001 f892 	bl	80020f0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f004 f9cd 	bl	8005370 <USB_DevDisconnect>

  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fe0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d101      	bne.n	8000ffc <HAL_PCD_Start+0x1c>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e020      	b.n	800103e <HAL_PCD_Start+0x5e>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001008:	2b01      	cmp	r3, #1
 800100a:	d109      	bne.n	8001020 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001010:	2b01      	cmp	r3, #1
 8001012:	d005      	beq.n	8001020 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001018:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f004 f98b 	bl	8005340 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4618      	mov	r0, r3
 8001030:	f003 f94e 	bl	80042d0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001046:	b590      	push	{r4, r7, lr}
 8001048:	b08d      	sub	sp, #52	; 0x34
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001054:	6a3b      	ldr	r3, [r7, #32]
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f004 fa32 	bl	80054c6 <USB_GetMode>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	f040 83ca 	bne.w	80017fe <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4618      	mov	r0, r3
 8001070:	f004 f996 	bl	80053a0 <USB_ReadInterrupts>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	f000 83c0 	beq.w	80017fc <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f004 f98d 	bl	80053a0 <USB_ReadInterrupts>
 8001086:	4603      	mov	r3, r0
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b02      	cmp	r3, #2
 800108e:	d107      	bne.n	80010a0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	695a      	ldr	r2, [r3, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f002 0202 	and.w	r2, r2, #2
 800109e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f004 f97b 	bl	80053a0 <USB_ReadInterrupts>
 80010aa:	4603      	mov	r3, r0
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	2b10      	cmp	r3, #16
 80010b2:	d161      	bne.n	8001178 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	699a      	ldr	r2, [r3, #24]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 0210 	bic.w	r2, r2, #16
 80010c2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	f003 020f 	and.w	r2, r3, #15
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	1a9b      	subs	r3, r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	4413      	add	r3, r2
 80010e0:	3304      	adds	r3, #4
 80010e2:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	0c5b      	lsrs	r3, r3, #17
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d124      	bne.n	800113a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80010f6:	4013      	ands	r3, r2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d035      	beq.n	8001168 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800110a:	b29b      	uxth	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	6a38      	ldr	r0, [r7, #32]
 8001110:	f003 fff3 	bl	80050fa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001120:	441a      	add	r2, r3
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	699a      	ldr	r2, [r3, #24]
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001132:	441a      	add	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	619a      	str	r2, [r3, #24]
 8001138:	e016      	b.n	8001168 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	0c5b      	lsrs	r3, r3, #17
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	2b06      	cmp	r3, #6
 8001144:	d110      	bne.n	8001168 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800114c:	2208      	movs	r2, #8
 800114e:	4619      	mov	r1, r3
 8001150:	6a38      	ldr	r0, [r7, #32]
 8001152:	f003 ffd2 	bl	80050fa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	699a      	ldr	r2, [r3, #24]
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	091b      	lsrs	r3, r3, #4
 800115e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001162:	441a      	add	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	699a      	ldr	r2, [r3, #24]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 0210 	orr.w	r2, r2, #16
 8001176:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f004 f90f 	bl	80053a0 <USB_ReadInterrupts>
 8001182:	4603      	mov	r3, r0
 8001184:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001188:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800118c:	d16e      	bne.n	800126c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f004 f915 	bl	80053c6 <USB_ReadDevAllOutEpInterrupt>
 800119c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800119e:	e062      	b.n	8001266 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d057      	beq.n	800125a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f004 f93a 	bl	800542e <USB_ReadDevOutEPInterrupt>
 80011ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00c      	beq.n	80011e0 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	015a      	lsls	r2, r3, #5
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	4413      	add	r3, r2
 80011ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011d2:	461a      	mov	r2, r3
 80011d4:	2301      	movs	r3, #1
 80011d6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80011d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fdde 	bl	8001d9c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00c      	beq.n	8001204 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	015a      	lsls	r2, r3, #5
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	4413      	add	r3, r2
 80011f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011f6:	461a      	mov	r2, r3
 80011f8:	2308      	movs	r3, #8
 80011fa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80011fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 fed8 	bl	8001fb4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	2b00      	cmp	r3, #0
 800120c:	d008      	beq.n	8001220 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	015a      	lsls	r2, r3, #5
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	4413      	add	r3, r2
 8001216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800121a:	461a      	mov	r2, r3
 800121c:	2310      	movs	r3, #16
 800121e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	2b00      	cmp	r3, #0
 8001228:	d008      	beq.n	800123c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	015a      	lsls	r2, r3, #5
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	4413      	add	r3, r2
 8001232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001236:	461a      	mov	r2, r3
 8001238:	2320      	movs	r3, #32
 800123a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d009      	beq.n	800125a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001248:	015a      	lsls	r2, r3, #5
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	4413      	add	r3, r2
 800124e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001252:	461a      	mov	r2, r3
 8001254:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001258:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	3301      	adds	r3, #1
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001262:	085b      	lsrs	r3, r3, #1
 8001264:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001268:	2b00      	cmp	r3, #0
 800126a:	d199      	bne.n	80011a0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f004 f895 	bl	80053a0 <USB_ReadInterrupts>
 8001276:	4603      	mov	r3, r0
 8001278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800127c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001280:	f040 80c0 	bne.w	8001404 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f004 f8b6 	bl	80053fa <USB_ReadDevAllInEpInterrupt>
 800128e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001294:	e0b2      	b.n	80013fc <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 80a7 	beq.w	80013f0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 f8dc 	bl	800546a <USB_ReadDevInEPInterrupt>
 80012b2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d057      	beq.n	800136e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80012be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c0:	f003 030f 	and.w	r3, r3, #15
 80012c4:	2201      	movs	r2, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69f9      	ldr	r1, [r7, #28]
 80012da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80012de:	4013      	ands	r3, r2
 80012e0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	015a      	lsls	r2, r3, #5
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	4413      	add	r3, r2
 80012ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012ee:	461a      	mov	r2, r3
 80012f0:	2301      	movs	r3, #1
 80012f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d132      	bne.n	8001362 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001300:	4613      	mov	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	440b      	add	r3, r1
 800130a:	3348      	adds	r3, #72	; 0x48
 800130c:	6819      	ldr	r1, [r3, #0]
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001312:	4613      	mov	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	1a9b      	subs	r3, r3, r2
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4403      	add	r3, r0
 800131c:	3344      	adds	r3, #68	; 0x44
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4419      	add	r1, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001326:	4613      	mov	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	1a9b      	subs	r3, r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4403      	add	r3, r0
 8001330:	3348      	adds	r3, #72	; 0x48
 8001332:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	2b00      	cmp	r3, #0
 8001338:	d113      	bne.n	8001362 <HAL_PCD_IRQHandler+0x31c>
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133e:	4613      	mov	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	1a9b      	subs	r3, r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	440b      	add	r3, r1
 8001348:	3350      	adds	r3, #80	; 0x50
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d108      	bne.n	8001362 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800135a:	461a      	mov	r2, r3
 800135c:	2101      	movs	r1, #1
 800135e:	f004 f8e5 	bl	800552c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	b2db      	uxtb	r3, r3
 8001366:	4619      	mov	r1, r3
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f005 ff8a 	bl	8007282 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	f003 0308 	and.w	r3, r3, #8
 8001374:	2b00      	cmp	r3, #0
 8001376:	d008      	beq.n	800138a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137a:	015a      	lsls	r2, r3, #5
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	4413      	add	r3, r2
 8001380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001384:	461a      	mov	r2, r3
 8001386:	2308      	movs	r3, #8
 8001388:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	2b00      	cmp	r3, #0
 8001392:	d008      	beq.n	80013a6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	015a      	lsls	r2, r3, #5
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	4413      	add	r3, r2
 800139c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013a0:	461a      	mov	r2, r3
 80013a2:	2310      	movs	r3, #16
 80013a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	015a      	lsls	r2, r3, #5
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	4413      	add	r3, r2
 80013b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013bc:	461a      	mov	r2, r3
 80013be:	2340      	movs	r3, #64	; 0x40
 80013c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d008      	beq.n	80013de <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	015a      	lsls	r2, r3, #5
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	4413      	add	r3, r2
 80013d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013d8:	461a      	mov	r2, r3
 80013da:	2302      	movs	r3, #2
 80013dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80013e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 fc48 	bl	8001c80 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	3301      	adds	r3, #1
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80013f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f8:	085b      	lsrs	r3, r3, #1
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f47f af49 	bne.w	8001296 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f003 ffc9 	bl	80053a0 <USB_ReadInterrupts>
 800140e:	4603      	mov	r3, r0
 8001410:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001414:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001418:	d122      	bne.n	8001460 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	69fa      	ldr	r2, [r7, #28]
 8001424:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001434:	2b01      	cmp	r3, #1
 8001436:	d108      	bne.n	800144a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001440:	2100      	movs	r1, #0
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 fe78 	bl	8002138 <HAL_PCDEx_LPM_Callback>
 8001448:	e002      	b.n	8001450 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f005 ff90 	bl	8007370 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	695a      	ldr	r2, [r3, #20]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800145e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f003 ff9b 	bl	80053a0 <USB_ReadInterrupts>
 800146a:	4603      	mov	r3, r0
 800146c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001474:	d112      	bne.n	800149c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b01      	cmp	r3, #1
 8001484:	d102      	bne.n	800148c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f005 ff4c 	bl	8007324 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	695a      	ldr	r2, [r3, #20]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800149a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f003 ff7d 	bl	80053a0 <USB_ReadInterrupts>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80014b0:	d121      	bne.n	80014f6 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	695a      	ldr	r2, [r3, #20]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80014c0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	f003 020f 	and.w	r2, r3, #15
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80014e6:	2101      	movs	r1, #1
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 fe25 	bl	8002138 <HAL_PCDEx_LPM_Callback>
 80014ee:	e002      	b.n	80014f6 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f005 ff17 	bl	8007324 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f003 ff50 	bl	80053a0 <USB_ReadInterrupts>
 8001500:	4603      	mov	r3, r0
 8001502:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800150a:	f040 80c7 	bne.w	800169c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2110      	movs	r1, #16
 8001528:	4618      	mov	r0, r3
 800152a:	f003 f87b 	bl	8004624 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001532:	e056      	b.n	80015e2 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	015a      	lsls	r2, r3, #5
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	4413      	add	r3, r2
 800153c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001540:	461a      	mov	r2, r3
 8001542:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001546:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154a:	015a      	lsls	r2, r3, #5
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	4413      	add	r3, r2
 8001550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001558:	0151      	lsls	r1, r2, #5
 800155a:	69fa      	ldr	r2, [r7, #28]
 800155c:	440a      	add	r2, r1
 800155e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001562:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001566:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156a:	015a      	lsls	r2, r3, #5
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	4413      	add	r3, r2
 8001570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001578:	0151      	lsls	r1, r2, #5
 800157a:	69fa      	ldr	r2, [r7, #28]
 800157c:	440a      	add	r2, r1
 800157e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001582:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001586:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158a:	015a      	lsls	r2, r3, #5
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	4413      	add	r3, r2
 8001590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001594:	461a      	mov	r2, r3
 8001596:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800159a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800159c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159e:	015a      	lsls	r2, r3, #5
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	4413      	add	r3, r2
 80015a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015ac:	0151      	lsls	r1, r2, #5
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	440a      	add	r2, r1
 80015b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80015b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80015bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015be:	015a      	lsls	r2, r3, #5
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	4413      	add	r3, r2
 80015c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015cc:	0151      	lsls	r1, r2, #5
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	440a      	add	r2, r1
 80015d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80015d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015da:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015de:	3301      	adds	r3, #1
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d3a3      	bcc.n	8001534 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015f2:	69db      	ldr	r3, [r3, #28]
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015fa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80015fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	2b00      	cmp	r3, #0
 8001606:	d016      	beq.n	8001636 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800160e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001618:	f043 030b 	orr.w	r3, r3, #11
 800161c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800162e:	f043 030b 	orr.w	r3, r3, #11
 8001632:	6453      	str	r3, [r2, #68]	; 0x44
 8001634:	e015      	b.n	8001662 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001644:	4619      	mov	r1, r3
 8001646:	f242 032b 	movw	r3, #8235	; 0x202b
 800164a:	4313      	orrs	r3, r2
 800164c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800165c:	f043 030b 	orr.w	r3, r3, #11
 8001660:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001670:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001674:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001686:	461a      	mov	r2, r3
 8001688:	f003 ff50 	bl	800552c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	695a      	ldr	r2, [r3, #20]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800169a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f003 fe7d 	bl	80053a0 <USB_ReadInterrupts>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016b0:	d124      	bne.n	80016fc <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 ff14 	bl	80054e4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 f810 	bl	80046e6 <USB_GetDevSpeed>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681c      	ldr	r4, [r3, #0]
 80016d2:	f001 fc87 	bl	8002fe4 <HAL_RCC_GetHCLKFreq>
 80016d6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	4620      	mov	r0, r4
 80016e2:	f002 fd53 	bl	800418c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f005 fdf3 	bl	80072d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80016fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fe4d 	bl	80053a0 <USB_ReadInterrupts>
 8001706:	4603      	mov	r3, r0
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	2b08      	cmp	r3, #8
 800170e:	d10a      	bne.n	8001726 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f005 fdd0 	bl	80072b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	695a      	ldr	r2, [r3, #20]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f002 0208 	and.w	r2, r2, #8
 8001724:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f003 fe38 	bl	80053a0 <USB_ReadInterrupts>
 8001730:	4603      	mov	r3, r0
 8001732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800173a:	d10f      	bne.n	800175c <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001742:	b2db      	uxtb	r3, r3
 8001744:	4619      	mov	r1, r3
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f005 fe32 	bl	80073b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	695a      	ldr	r2, [r3, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800175a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f003 fe1d 	bl	80053a0 <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800176c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001770:	d10f      	bne.n	8001792 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	b2db      	uxtb	r3, r3
 800177a:	4619      	mov	r1, r3
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f005 fe05 	bl	800738c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695a      	ldr	r2, [r3, #20]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001790:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f003 fe02 	bl	80053a0 <USB_ReadInterrupts>
 800179c:	4603      	mov	r3, r0
 800179e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a6:	d10a      	bne.n	80017be <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f005 fe13 	bl	80073d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80017bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f003 fdec 	bl	80053a0 <USB_ReadInterrupts>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	2b04      	cmp	r3, #4
 80017d0:	d115      	bne.n	80017fe <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d002      	beq.n	80017ea <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f005 fe03 	bl	80073f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6859      	ldr	r1, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	e000      	b.n	80017fe <HAL_PCD_IRQHandler+0x7b8>
      return;
 80017fc:	bf00      	nop
    }
  }
}
 80017fe:	3734      	adds	r7, #52	; 0x34
 8001800:	46bd      	mov	sp, r7
 8001802:	bd90      	pop	{r4, r7, pc}

08001804 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001816:	2b01      	cmp	r3, #1
 8001818:	d101      	bne.n	800181e <HAL_PCD_SetAddress+0x1a>
 800181a:	2302      	movs	r3, #2
 800181c:	e013      	b.n	8001846 <HAL_PCD_SetAddress+0x42>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f003 fd5c 	bl	80052f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	4608      	mov	r0, r1
 8001858:	4611      	mov	r1, r2
 800185a:	461a      	mov	r2, r3
 800185c:	4603      	mov	r3, r0
 800185e:	70fb      	strb	r3, [r7, #3]
 8001860:	460b      	mov	r3, r1
 8001862:	803b      	strh	r3, [r7, #0]
 8001864:	4613      	mov	r3, r2
 8001866:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800186c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001870:	2b00      	cmp	r3, #0
 8001872:	da0f      	bge.n	8001894 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	f003 020f 	and.w	r2, r3, #15
 800187a:	4613      	mov	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	1a9b      	subs	r3, r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	3338      	adds	r3, #56	; 0x38
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	3304      	adds	r3, #4
 800188a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	2201      	movs	r2, #1
 8001890:	705a      	strb	r2, [r3, #1]
 8001892:	e00f      	b.n	80018b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	f003 020f 	and.w	r2, r3, #15
 800189a:	4613      	mov	r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	3304      	adds	r3, #4
 80018ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2200      	movs	r2, #0
 80018b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018c0:	883a      	ldrh	r2, [r7, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	78ba      	ldrb	r2, [r7, #2]
 80018ca:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	785b      	ldrb	r3, [r3, #1]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018de:	78bb      	ldrb	r3, [r7, #2]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d102      	bne.n	80018ea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d101      	bne.n	80018f8 <HAL_PCD_EP_Open+0xaa>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e00e      	b.n	8001916 <HAL_PCD_EP_Open+0xc8>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68f9      	ldr	r1, [r7, #12]
 8001906:	4618      	mov	r0, r3
 8001908:	f002 ff12 	bl	8004730 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001914:	7afb      	ldrb	r3, [r7, #11]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800192a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800192e:	2b00      	cmp	r3, #0
 8001930:	da0f      	bge.n	8001952 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	f003 020f 	and.w	r2, r3, #15
 8001938:	4613      	mov	r3, r2
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	1a9b      	subs	r3, r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	3338      	adds	r3, #56	; 0x38
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	3304      	adds	r3, #4
 8001948:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2201      	movs	r2, #1
 800194e:	705a      	strb	r2, [r3, #1]
 8001950:	e00f      	b.n	8001972 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	f003 020f 	and.w	r2, r3, #15
 8001958:	4613      	mov	r3, r2
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	1a9b      	subs	r3, r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	4413      	add	r3, r2
 8001968:	3304      	adds	r3, #4
 800196a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2200      	movs	r2, #0
 8001970:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001972:	78fb      	ldrb	r3, [r7, #3]
 8001974:	f003 030f 	and.w	r3, r3, #15
 8001978:	b2da      	uxtb	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <HAL_PCD_EP_Close+0x6e>
 8001988:	2302      	movs	r3, #2
 800198a:	e00e      	b.n	80019aa <HAL_PCD_EP_Close+0x8c>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68f9      	ldr	r1, [r7, #12]
 800199a:	4618      	mov	r0, r3
 800199c:	f002 ff50 	bl	8004840 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	60f8      	str	r0, [r7, #12]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
 80019be:	460b      	mov	r3, r1
 80019c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019c2:	7afb      	ldrb	r3, [r7, #11]
 80019c4:	f003 020f 	and.w	r2, r3, #15
 80019c8:	4613      	mov	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	1a9b      	subs	r3, r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	4413      	add	r3, r2
 80019d8:	3304      	adds	r3, #4
 80019da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2200      	movs	r2, #0
 80019ec:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2200      	movs	r2, #0
 80019f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019f4:	7afb      	ldrb	r3, [r7, #11]
 80019f6:	f003 030f 	and.w	r3, r3, #15
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d102      	bne.n	8001a0e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a0e:	7afb      	ldrb	r3, [r7, #11]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	6979      	ldr	r1, [r7, #20]
 8001a26:	f003 f9db 	bl	8004de0 <USB_EP0StartXfer>
 8001a2a:	e008      	b.n	8001a3e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	6979      	ldr	r1, [r7, #20]
 8001a3a:	f002 ff85 	bl	8004948 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a54:	78fb      	ldrb	r3, [r7, #3]
 8001a56:	f003 020f 	and.w	r2, r3, #15
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	460b      	mov	r3, r1
 8001a86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a88:	7afb      	ldrb	r3, [r7, #11]
 8001a8a:	f003 020f 	and.w	r2, r3, #15
 8001a8e:	4613      	mov	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	3338      	adds	r3, #56	; 0x38
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab8:	7afb      	ldrb	r3, [r7, #11]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d102      	bne.n	8001ad2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ad2:	7afb      	ldrb	r3, [r7, #11]
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d109      	bne.n	8001af0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	6979      	ldr	r1, [r7, #20]
 8001aea:	f003 f979 	bl	8004de0 <USB_EP0StartXfer>
 8001aee:	e008      	b.n	8001b02 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	6979      	ldr	r1, [r7, #20]
 8001afe:	f002 ff23 	bl	8004948 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b18:	78fb      	ldrb	r3, [r7, #3]
 8001b1a:	f003 020f 	and.w	r2, r3, #15
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d901      	bls.n	8001b2a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e050      	b.n	8001bcc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	da0f      	bge.n	8001b52 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	f003 020f 	and.w	r2, r3, #15
 8001b38:	4613      	mov	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	1a9b      	subs	r3, r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	3338      	adds	r3, #56	; 0x38
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	3304      	adds	r3, #4
 8001b48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	705a      	strb	r2, [r3, #1]
 8001b50:	e00d      	b.n	8001b6e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b52:	78fa      	ldrb	r2, [r7, #3]
 8001b54:	4613      	mov	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	1a9b      	subs	r3, r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	3304      	adds	r3, #4
 8001b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2201      	movs	r2, #1
 8001b72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b74:	78fb      	ldrb	r3, [r7, #3]
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_PCD_EP_SetStall+0x82>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e01e      	b.n	8001bcc <HAL_PCD_EP_SetStall+0xc0>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68f9      	ldr	r1, [r7, #12]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 fad5 	bl	800514c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ba2:	78fb      	ldrb	r3, [r7, #3]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10a      	bne.n	8001bc2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	b2d9      	uxtb	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	f003 fcb5 	bl	800552c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	460b      	mov	r3, r1
 8001bde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001be0:	78fb      	ldrb	r3, [r7, #3]
 8001be2:	f003 020f 	and.w	r2, r3, #15
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d901      	bls.n	8001bf2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e042      	b.n	8001c78 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	da0f      	bge.n	8001c1a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bfa:	78fb      	ldrb	r3, [r7, #3]
 8001bfc:	f003 020f 	and.w	r2, r3, #15
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	3338      	adds	r3, #56	; 0x38
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	3304      	adds	r3, #4
 8001c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	705a      	strb	r2, [r3, #1]
 8001c18:	e00f      	b.n	8001c3a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	f003 020f 	and.w	r2, r3, #15
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	3304      	adds	r3, #4
 8001c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_PCD_EP_ClrStall+0x86>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e00e      	b.n	8001c78 <HAL_PCD_EP_ClrStall+0xa4>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68f9      	ldr	r1, [r7, #12]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 fadd 	bl	8005228 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c76:	2300      	movs	r3, #0
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	4613      	mov	r3, r2
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	1a9b      	subs	r3, r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	3338      	adds	r3, #56	; 0x38
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d901      	bls.n	8001cb8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e06c      	b.n	8001d92 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d902      	bls.n	8001cd4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	3303      	adds	r3, #3
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cdc:	e02b      	b.n	8001d36 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	695a      	ldr	r2, [r3, #20]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d902      	bls.n	8001cfa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	3303      	adds	r3, #3
 8001cfe:	089b      	lsrs	r3, r3, #2
 8001d00:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	68d9      	ldr	r1, [r3, #12]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	4603      	mov	r3, r0
 8001d18:	6978      	ldr	r0, [r7, #20]
 8001d1a:	f003 f9b9 	bl	8005090 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	441a      	add	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	699a      	ldr	r2, [r3, #24]
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	441a      	add	r2, r3
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	015a      	lsls	r2, r3, #5
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d809      	bhi.n	8001d60 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d203      	bcs.n	8001d60 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1be      	bne.n	8001cde <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	695a      	ldr	r2, [r3, #20]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d811      	bhi.n	8001d90 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	2201      	movs	r2, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	43db      	mvns	r3, r3
 8001d86:	6939      	ldr	r1, [r7, #16]
 8001d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3720      	adds	r7, #32
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
	...

08001d9c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	333c      	adds	r3, #60	; 0x3c
 8001db4:	3304      	adds	r3, #4
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	015a      	lsls	r2, r3, #5
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	f040 80a0 	bne.w	8001f14 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d015      	beq.n	8001e0a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4a72      	ldr	r2, [pc, #456]	; (8001fac <PCD_EP_OutXfrComplete_int+0x210>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	f240 80dd 	bls.w	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80d7 	beq.w	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e00:	461a      	mov	r2, r3
 8001e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e06:	6093      	str	r3, [r2, #8]
 8001e08:	e0cb      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d009      	beq.n	8001e28 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e20:	461a      	mov	r2, r3
 8001e22:	2320      	movs	r3, #32
 8001e24:	6093      	str	r3, [r2, #8]
 8001e26:	e0bc      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f040 80b7 	bne.w	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4a5d      	ldr	r2, [pc, #372]	; (8001fac <PCD_EP_OutXfrComplete_int+0x210>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d90f      	bls.n	8001e5c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00a      	beq.n	8001e5c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	015a      	lsls	r2, r3, #5
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e52:	461a      	mov	r2, r3
 8001e54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e58:	6093      	str	r3, [r2, #8]
 8001e5a:	e0a2      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	4613      	mov	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	1a9b      	subs	r3, r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	440b      	add	r3, r1
 8001e6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e6e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	0159      	lsls	r1, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	440b      	add	r3, r1
 8001e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001e82:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4403      	add	r3, r0
 8001e92:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e96:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eaa:	6819      	ldr	r1, [r3, #0]
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4403      	add	r3, r0
 8001eba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4419      	add	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	1a9b      	subs	r3, r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	4403      	add	r3, r0
 8001ed0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ed4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d114      	bne.n	8001f06 <PCD_EP_OutXfrComplete_int+0x16a>
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d108      	bne.n	8001f06 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001efe:	461a      	mov	r2, r3
 8001f00:	2101      	movs	r1, #1
 8001f02:	f003 fb13 	bl	800552c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f005 f99d 	bl	800724c <HAL_PCD_DataOutStageCallback>
 8001f12:	e046      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4a26      	ldr	r2, [pc, #152]	; (8001fb0 <PCD_EP_OutXfrComplete_int+0x214>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d124      	bne.n	8001f66 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	015a      	lsls	r2, r3, #5
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f32:	461a      	mov	r2, r3
 8001f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f38:	6093      	str	r3, [r2, #8]
 8001f3a:	e032      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f52:	461a      	mov	r2, r3
 8001f54:	2320      	movs	r3, #32
 8001f56:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f005 f974 	bl	800724c <HAL_PCD_DataOutStageCallback>
 8001f64:	e01d      	b.n	8001fa2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d114      	bne.n	8001f96 <PCD_EP_OutXfrComplete_int+0x1fa>
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d108      	bne.n	8001f96 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f8e:	461a      	mov	r2, r3
 8001f90:	2100      	movs	r1, #0
 8001f92:	f003 facb 	bl	800552c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f005 f955 	bl	800724c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	4f54300a 	.word	0x4f54300a
 8001fb0:	4f54310a 	.word	0x4f54310a

08001fb4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	333c      	adds	r3, #60	; 0x3c
 8001fcc:	3304      	adds	r3, #4
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	015a      	lsls	r2, r3, #5
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	4a15      	ldr	r2, [pc, #84]	; (800203c <PCD_EP_OutSetupPacket_int+0x88>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d90e      	bls.n	8002008 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d009      	beq.n	8002008 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002000:	461a      	mov	r2, r3
 8002002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002006:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f005 f90d 	bl	8007228 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	4a0a      	ldr	r2, [pc, #40]	; (800203c <PCD_EP_OutSetupPacket_int+0x88>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d90c      	bls.n	8002030 <PCD_EP_OutSetupPacket_int+0x7c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d108      	bne.n	8002030 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6818      	ldr	r0, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002028:	461a      	mov	r2, r3
 800202a:	2101      	movs	r1, #1
 800202c:	f003 fa7e 	bl	800552c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	4f54300a 	.word	0x4f54300a

08002040 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	70fb      	strb	r3, [r7, #3]
 800204c:	4613      	mov	r3, r2
 800204e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d107      	bne.n	800206e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800205e:	883b      	ldrh	r3, [r7, #0]
 8002060:	0419      	lsls	r1, r3, #16
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	430a      	orrs	r2, r1
 800206a:	629a      	str	r2, [r3, #40]	; 0x28
 800206c:	e028      	b.n	80020c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	0c1b      	lsrs	r3, r3, #16
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	4413      	add	r3, r2
 800207a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800207c:	2300      	movs	r3, #0
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	e00d      	b.n	800209e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	3340      	adds	r3, #64	; 0x40
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	0c1b      	lsrs	r3, r3, #16
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	4413      	add	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	3301      	adds	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d3ec      	bcc.n	8002082 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80020a8:	883b      	ldrh	r3, [r7, #0]
 80020aa:	0418      	lsls	r0, r3, #16
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6819      	ldr	r1, [r3, #0]
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	4302      	orrs	r2, r0
 80020b8:	3340      	adds	r3, #64	; 0x40
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	887a      	ldrh	r2, [r7, #2]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_PCDEx_ActivateLPM+0x44>)
 8002120:	4313      	orrs	r3, r2
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	10000003 	.word	0x10000003

08002138 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <HAL_PWREx_ConfigSupply+0x70>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b04      	cmp	r3, #4
 8002162:	d00a      	beq.n	800217a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_PWREx_ConfigSupply+0x70>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	429a      	cmp	r2, r3
 8002170:	d001      	beq.n	8002176 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e01f      	b.n	80021b6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e01d      	b.n	80021b6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <HAL_PWREx_ConfigSupply+0x70>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f023 0207 	bic.w	r2, r3, #7
 8002182:	490f      	ldr	r1, [pc, #60]	; (80021c0 <HAL_PWREx_ConfigSupply+0x70>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4313      	orrs	r3, r2
 8002188:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800218a:	f7fe fb0b 	bl	80007a4 <HAL_GetTick>
 800218e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002190:	e009      	b.n	80021a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002192:	f7fe fb07 	bl	80007a4 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021a0:	d901      	bls.n	80021a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e007      	b.n	80021b6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_PWREx_ConfigSupply+0x70>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b2:	d1ee      	bne.n	8002192 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	58024800 	.word	0x58024800

080021c4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80021ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d2:	60d3      	str	r3, [r2, #12]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	58024800 	.word	0x58024800

080021e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08c      	sub	sp, #48	; 0x30
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e3c4      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8087 	beq.w	8002312 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002204:	4ba2      	ldr	r3, [pc, #648]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800220e:	4ba0      	ldr	r3, [pc, #640]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002216:	2b10      	cmp	r3, #16
 8002218:	d007      	beq.n	800222a <HAL_RCC_OscConfig+0x46>
 800221a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221c:	2b18      	cmp	r3, #24
 800221e:	d110      	bne.n	8002242 <HAL_RCC_OscConfig+0x5e>
 8002220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d10b      	bne.n	8002242 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222a:	4b99      	ldr	r3, [pc, #612]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d06c      	beq.n	8002310 <HAL_RCC_OscConfig+0x12c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d168      	bne.n	8002310 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e39e      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x76>
 800224c:	4b90      	ldr	r3, [pc, #576]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a8f      	ldr	r2, [pc, #572]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	e02e      	b.n	80022b8 <HAL_RCC_OscConfig+0xd4>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x98>
 8002262:	4b8b      	ldr	r3, [pc, #556]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a8a      	ldr	r2, [pc, #552]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4b88      	ldr	r3, [pc, #544]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a87      	ldr	r2, [pc, #540]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002274:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e01d      	b.n	80022b8 <HAL_RCC_OscConfig+0xd4>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0xbc>
 8002286:	4b82      	ldr	r3, [pc, #520]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a81      	ldr	r2, [pc, #516]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b7f      	ldr	r3, [pc, #508]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a7e      	ldr	r2, [pc, #504]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e00b      	b.n	80022b8 <HAL_RCC_OscConfig+0xd4>
 80022a0:	4b7b      	ldr	r3, [pc, #492]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a7a      	ldr	r2, [pc, #488]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 80022a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b78      	ldr	r3, [pc, #480]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a77      	ldr	r2, [pc, #476]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 80022b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d013      	beq.n	80022e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe fa70 	bl	80007a4 <HAL_GetTick>
 80022c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c8:	f7fe fa6c 	bl	80007a4 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e352      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022da:	4b6d      	ldr	r3, [pc, #436]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0xe4>
 80022e6:	e014      	b.n	8002312 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe fa5c 	bl	80007a4 <HAL_GetTick>
 80022ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f0:	f7fe fa58 	bl	80007a4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e33e      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002302:	4b63      	ldr	r3, [pc, #396]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x10c>
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8092 	beq.w	8002444 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002320:	4b5b      	ldr	r3, [pc, #364]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002328:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800232a:	4b59      	ldr	r3, [pc, #356]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d007      	beq.n	8002346 <HAL_RCC_OscConfig+0x162>
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	2b18      	cmp	r3, #24
 800233a:	d12d      	bne.n	8002398 <HAL_RCC_OscConfig+0x1b4>
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d128      	bne.n	8002398 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002346:	4b52      	ldr	r3, [pc, #328]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	d005      	beq.n	800235e <HAL_RCC_OscConfig+0x17a>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e310      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235e:	f7fe fa4f 	bl	8000800 <HAL_GetREVID>
 8002362:	4602      	mov	r2, r0
 8002364:	f241 0303 	movw	r3, #4099	; 0x1003
 8002368:	429a      	cmp	r2, r3
 800236a:	d80a      	bhi.n	8002382 <HAL_RCC_OscConfig+0x19e>
 800236c:	4b48      	ldr	r3, [pc, #288]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	031b      	lsls	r3, r3, #12
 800237a:	4945      	ldr	r1, [pc, #276]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002380:	e060      	b.n	8002444 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002382:	4b43      	ldr	r3, [pc, #268]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	061b      	lsls	r3, r3, #24
 8002390:	493f      	ldr	r1, [pc, #252]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002396:	e055      	b.n	8002444 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d038      	beq.n	8002412 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023a0:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f023 0219 	bic.w	r2, r3, #25
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4938      	ldr	r1, [pc, #224]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b2:	f7fe f9f7 	bl	80007a4 <HAL_GetTick>
 80023b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ba:	f7fe f9f3 	bl	80007a4 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e2d9      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023cc:	4b30      	ldr	r3, [pc, #192]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d8:	f7fe fa12 	bl	8000800 <HAL_GetREVID>
 80023dc:	4602      	mov	r2, r0
 80023de:	f241 0303 	movw	r3, #4099	; 0x1003
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d80a      	bhi.n	80023fc <HAL_RCC_OscConfig+0x218>
 80023e6:	4b2a      	ldr	r3, [pc, #168]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	031b      	lsls	r3, r3, #12
 80023f4:	4926      	ldr	r1, [pc, #152]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	604b      	str	r3, [r1, #4]
 80023fa:	e023      	b.n	8002444 <HAL_RCC_OscConfig+0x260>
 80023fc:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	061b      	lsls	r3, r3, #24
 800240a:	4921      	ldr	r1, [pc, #132]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
 8002410:	e018      	b.n	8002444 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002412:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1e      	ldr	r2, [pc, #120]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241e:	f7fe f9c1 	bl	80007a4 <HAL_GetTick>
 8002422:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002426:	f7fe f9bd 	bl	80007a4 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e2a3      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1f0      	bne.n	8002426 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 8091 	beq.w	8002574 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002452:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800245a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 800245e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002460:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b08      	cmp	r3, #8
 8002466:	d007      	beq.n	8002478 <HAL_RCC_OscConfig+0x294>
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	2b18      	cmp	r3, #24
 800246c:	d12f      	bne.n	80024ce <HAL_RCC_OscConfig+0x2ea>
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b01      	cmp	r3, #1
 8002476:	d12a      	bne.n	80024ce <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_RCC_OscConfig+0x2ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <HAL_RCC_OscConfig+0x2b0>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	2b80      	cmp	r3, #128	; 0x80
 800248a:	d003      	beq.n	8002494 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e277      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
 8002490:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002494:	f7fe f9b4 	bl	8000800 <HAL_GetREVID>
 8002498:	4602      	mov	r2, r0
 800249a:	f241 0303 	movw	r3, #4099	; 0x1003
 800249e:	429a      	cmp	r2, r3
 80024a0:	d80a      	bhi.n	80024b8 <HAL_RCC_OscConfig+0x2d4>
 80024a2:	4ba2      	ldr	r3, [pc, #648]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	069b      	lsls	r3, r3, #26
 80024b0:	499e      	ldr	r1, [pc, #632]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024b6:	e05d      	b.n	8002574 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024b8:	4b9c      	ldr	r3, [pc, #624]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	4999      	ldr	r1, [pc, #612]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024cc:	e052      	b.n	8002574 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d035      	beq.n	8002542 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80024d6:	4b95      	ldr	r3, [pc, #596]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a94      	ldr	r2, [pc, #592]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80024dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e2:	f7fe f95f 	bl	80007a4 <HAL_GetTick>
 80024e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80024ea:	f7fe f95b 	bl	80007a4 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e241      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024fc:	4b8b      	ldr	r3, [pc, #556]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002508:	f7fe f97a 	bl	8000800 <HAL_GetREVID>
 800250c:	4602      	mov	r2, r0
 800250e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002512:	429a      	cmp	r2, r3
 8002514:	d80a      	bhi.n	800252c <HAL_RCC_OscConfig+0x348>
 8002516:	4b85      	ldr	r3, [pc, #532]	; (800272c <HAL_RCC_OscConfig+0x548>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	069b      	lsls	r3, r3, #26
 8002524:	4981      	ldr	r1, [pc, #516]	; (800272c <HAL_RCC_OscConfig+0x548>)
 8002526:	4313      	orrs	r3, r2
 8002528:	604b      	str	r3, [r1, #4]
 800252a:	e023      	b.n	8002574 <HAL_RCC_OscConfig+0x390>
 800252c:	4b7f      	ldr	r3, [pc, #508]	; (800272c <HAL_RCC_OscConfig+0x548>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	061b      	lsls	r3, r3, #24
 800253a:	497c      	ldr	r1, [pc, #496]	; (800272c <HAL_RCC_OscConfig+0x548>)
 800253c:	4313      	orrs	r3, r2
 800253e:	60cb      	str	r3, [r1, #12]
 8002540:	e018      	b.n	8002574 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002542:	4b7a      	ldr	r3, [pc, #488]	; (800272c <HAL_RCC_OscConfig+0x548>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a79      	ldr	r2, [pc, #484]	; (800272c <HAL_RCC_OscConfig+0x548>)
 8002548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800254c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7fe f929 	bl	80007a4 <HAL_GetTick>
 8002552:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002556:	f7fe f925 	bl	80007a4 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e20b      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002568:	4b70      	ldr	r3, [pc, #448]	; (800272c <HAL_RCC_OscConfig+0x548>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f0      	bne.n	8002556 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d036      	beq.n	80025ee <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d019      	beq.n	80025bc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002588:	4b68      	ldr	r3, [pc, #416]	; (800272c <HAL_RCC_OscConfig+0x548>)
 800258a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800258c:	4a67      	ldr	r2, [pc, #412]	; (800272c <HAL_RCC_OscConfig+0x548>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7fe f906 	bl	80007a4 <HAL_GetTick>
 8002598:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259c:	f7fe f902 	bl	80007a4 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1e8      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025ae:	4b5f      	ldr	r3, [pc, #380]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80025b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0x3b8>
 80025ba:	e018      	b.n	80025ee <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025bc:	4b5b      	ldr	r3, [pc, #364]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80025be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025c0:	4a5a      	ldr	r2, [pc, #360]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7fe f8ec 	bl	80007a4 <HAL_GetTick>
 80025cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d0:	f7fe f8e8 	bl	80007a4 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e1ce      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025e2:	4b52      	ldr	r3, [pc, #328]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80025e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0320 	and.w	r3, r3, #32
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d036      	beq.n	8002668 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d019      	beq.n	8002636 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002602:	4b4a      	ldr	r3, [pc, #296]	; (800272c <HAL_RCC_OscConfig+0x548>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a49      	ldr	r2, [pc, #292]	; (800272c <HAL_RCC_OscConfig+0x548>)
 8002608:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800260c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800260e:	f7fe f8c9 	bl	80007a4 <HAL_GetTick>
 8002612:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002616:	f7fe f8c5 	bl	80007a4 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1ab      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002628:	4b40      	ldr	r3, [pc, #256]	; (800272c <HAL_RCC_OscConfig+0x548>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x432>
 8002634:	e018      	b.n	8002668 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002636:	4b3d      	ldr	r3, [pc, #244]	; (800272c <HAL_RCC_OscConfig+0x548>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a3c      	ldr	r2, [pc, #240]	; (800272c <HAL_RCC_OscConfig+0x548>)
 800263c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002640:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002642:	f7fe f8af 	bl	80007a4 <HAL_GetTick>
 8002646:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800264a:	f7fe f8ab 	bl	80007a4 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e191      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800265c:	4b33      	ldr	r3, [pc, #204]	; (800272c <HAL_RCC_OscConfig+0x548>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8086 	beq.w	8002782 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002676:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <HAL_RCC_OscConfig+0x54c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a2d      	ldr	r2, [pc, #180]	; (8002730 <HAL_RCC_OscConfig+0x54c>)
 800267c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002680:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002682:	f7fe f88f 	bl	80007a4 <HAL_GetTick>
 8002686:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800268a:	f7fe f88b 	bl	80007a4 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b64      	cmp	r3, #100	; 0x64
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e171      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800269c:	4b24      	ldr	r3, [pc, #144]	; (8002730 <HAL_RCC_OscConfig+0x54c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d106      	bne.n	80026be <HAL_RCC_OscConfig+0x4da>
 80026b0:	4b1e      	ldr	r3, [pc, #120]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	4a1d      	ldr	r2, [pc, #116]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6713      	str	r3, [r2, #112]	; 0x70
 80026bc:	e02d      	b.n	800271a <HAL_RCC_OscConfig+0x536>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x4fc>
 80026c6:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	4a18      	ldr	r2, [pc, #96]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80026cc:	f023 0301 	bic.w	r3, r3, #1
 80026d0:	6713      	str	r3, [r2, #112]	; 0x70
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d6:	4a15      	ldr	r2, [pc, #84]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80026d8:	f023 0304 	bic.w	r3, r3, #4
 80026dc:	6713      	str	r3, [r2, #112]	; 0x70
 80026de:	e01c      	b.n	800271a <HAL_RCC_OscConfig+0x536>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b05      	cmp	r3, #5
 80026e6:	d10c      	bne.n	8002702 <HAL_RCC_OscConfig+0x51e>
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	4a0f      	ldr	r2, [pc, #60]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6713      	str	r3, [r2, #112]	; 0x70
 80026f4:	4b0d      	ldr	r3, [pc, #52]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	4a0c      	ldr	r2, [pc, #48]	; (800272c <HAL_RCC_OscConfig+0x548>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002700:	e00b      	b.n	800271a <HAL_RCC_OscConfig+0x536>
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <HAL_RCC_OscConfig+0x548>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	4a09      	ldr	r2, [pc, #36]	; (800272c <HAL_RCC_OscConfig+0x548>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	6713      	str	r3, [r2, #112]	; 0x70
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <HAL_RCC_OscConfig+0x548>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002712:	4a06      	ldr	r2, [pc, #24]	; (800272c <HAL_RCC_OscConfig+0x548>)
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01a      	beq.n	8002758 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002722:	f7fe f83f 	bl	80007a4 <HAL_GetTick>
 8002726:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002728:	e00f      	b.n	800274a <HAL_RCC_OscConfig+0x566>
 800272a:	bf00      	nop
 800272c:	58024400 	.word	0x58024400
 8002730:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002734:	f7fe f836 	bl	80007a4 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e11a      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800274a:	4b8f      	ldr	r3, [pc, #572]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d0ee      	beq.n	8002734 <HAL_RCC_OscConfig+0x550>
 8002756:	e014      	b.n	8002782 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7fe f824 	bl	80007a4 <HAL_GetTick>
 800275c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800275e:	e00a      	b.n	8002776 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002760:	f7fe f820 	bl	80007a4 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	; 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e104      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002776:	4b84      	ldr	r3, [pc, #528]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1ee      	bne.n	8002760 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80f9 	beq.w	800297e <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800278c:	4b7e      	ldr	r3, [pc, #504]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002794:	2b18      	cmp	r3, #24
 8002796:	f000 80b4 	beq.w	8002902 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	2b02      	cmp	r3, #2
 80027a0:	f040 8095 	bne.w	80028ce <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a4:	4b78      	ldr	r3, [pc, #480]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a77      	ldr	r2, [pc, #476]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 80027aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fd fff8 	bl	80007a4 <HAL_GetTick>
 80027b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b8:	f7fd fff4 	bl	80007a4 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0da      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027ca:	4b6f      	ldr	r3, [pc, #444]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d6:	4b6c      	ldr	r3, [pc, #432]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 80027d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027da:	4b6c      	ldr	r3, [pc, #432]	; (800298c <HAL_RCC_OscConfig+0x7a8>)
 80027dc:	4013      	ands	r3, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	430a      	orrs	r2, r1
 80027ea:	4967      	ldr	r1, [pc, #412]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	628b      	str	r3, [r1, #40]	; 0x28
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	3b01      	subs	r3, #1
 80027f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fe:	3b01      	subs	r3, #1
 8002800:	025b      	lsls	r3, r3, #9
 8002802:	b29b      	uxth	r3, r3
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	3b01      	subs	r3, #1
 800280c:	041b      	lsls	r3, r3, #16
 800280e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002818:	3b01      	subs	r3, #1
 800281a:	061b      	lsls	r3, r3, #24
 800281c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002820:	4959      	ldr	r1, [pc, #356]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 8002822:	4313      	orrs	r3, r2
 8002824:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002826:	4b58      	ldr	r3, [pc, #352]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	4a57      	ldr	r2, [pc, #348]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002832:	4b55      	ldr	r3, [pc, #340]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 8002834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002836:	4b56      	ldr	r3, [pc, #344]	; (8002990 <HAL_RCC_OscConfig+0x7ac>)
 8002838:	4013      	ands	r3, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800283e:	00d2      	lsls	r2, r2, #3
 8002840:	4951      	ldr	r1, [pc, #324]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 8002842:	4313      	orrs	r3, r2
 8002844:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002846:	4b50      	ldr	r3, [pc, #320]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	f023 020c 	bic.w	r2, r3, #12
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	494d      	ldr	r1, [pc, #308]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 8002854:	4313      	orrs	r3, r2
 8002856:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002858:	4b4b      	ldr	r3, [pc, #300]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	f023 0202 	bic.w	r2, r3, #2
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002864:	4948      	ldr	r1, [pc, #288]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800286a:	4b47      	ldr	r3, [pc, #284]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	4a46      	ldr	r2, [pc, #280]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002874:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002876:	4b44      	ldr	r3, [pc, #272]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	4a43      	ldr	r2, [pc, #268]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 800287c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002880:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002882:	4b41      	ldr	r3, [pc, #260]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 8002884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002886:	4a40      	ldr	r2, [pc, #256]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 8002888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800288c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800288e:	4b3e      	ldr	r3, [pc, #248]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 8002890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002892:	4a3d      	ldr	r2, [pc, #244]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289a:	4b3b      	ldr	r3, [pc, #236]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a3a      	ldr	r2, [pc, #232]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 80028a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7fd ff7d 	bl	80007a4 <HAL_GetTick>
 80028aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ae:	f7fd ff79 	bl	80007a4 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e05f      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028c0:	4b31      	ldr	r3, [pc, #196]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x6ca>
 80028cc:	e057      	b.n	800297e <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ce:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2d      	ldr	r2, [pc, #180]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 80028d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fd ff63 	bl	80007a4 <HAL_GetTick>
 80028de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e2:	f7fd ff5f 	bl	80007a4 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e045      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028f4:	4b24      	ldr	r3, [pc, #144]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f0      	bne.n	80028e2 <HAL_RCC_OscConfig+0x6fe>
 8002900:	e03d      	b.n	800297e <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002902:	4b21      	ldr	r3, [pc, #132]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002908:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <HAL_RCC_OscConfig+0x7a4>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	2b01      	cmp	r3, #1
 8002914:	d031      	beq.n	800297a <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f003 0203 	and.w	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002920:	429a      	cmp	r2, r3
 8002922:	d12a      	bne.n	800297a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d122      	bne.n	800297a <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d11a      	bne.n	800297a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	0a5b      	lsrs	r3, r3, #9
 8002948:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d111      	bne.n	800297a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	0c1b      	lsrs	r3, r3, #16
 800295a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d108      	bne.n	800297a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	0e1b      	lsrs	r3, r3, #24
 800296c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3730      	adds	r7, #48	; 0x30
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	58024400 	.word	0x58024400
 800298c:	fffffc0c 	.word	0xfffffc0c
 8002990:	ffff0007 	.word	0xffff0007

08002994 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e19c      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a8:	4b8a      	ldr	r3, [pc, #552]	; (8002bd4 <HAL_RCC_ClockConfig+0x240>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d910      	bls.n	80029d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b6:	4b87      	ldr	r3, [pc, #540]	; (8002bd4 <HAL_RCC_ClockConfig+0x240>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 020f 	bic.w	r2, r3, #15
 80029be:	4985      	ldr	r1, [pc, #532]	; (8002bd4 <HAL_RCC_ClockConfig+0x240>)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b83      	ldr	r3, [pc, #524]	; (8002bd4 <HAL_RCC_ClockConfig+0x240>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e184      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d010      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	4b7b      	ldr	r3, [pc, #492]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d908      	bls.n	8002a06 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029f4:	4b78      	ldr	r3, [pc, #480]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	4975      	ldr	r1, [pc, #468]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d010      	beq.n	8002a34 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	695a      	ldr	r2, [r3, #20]
 8002a16:	4b70      	ldr	r3, [pc, #448]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d908      	bls.n	8002a34 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a22:	4b6d      	ldr	r3, [pc, #436]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	496a      	ldr	r1, [pc, #424]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d010      	beq.n	8002a62 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699a      	ldr	r2, [r3, #24]
 8002a44:	4b64      	ldr	r3, [pc, #400]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d908      	bls.n	8002a62 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a50:	4b61      	ldr	r3, [pc, #388]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	495e      	ldr	r1, [pc, #376]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d010      	beq.n	8002a90 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69da      	ldr	r2, [r3, #28]
 8002a72:	4b59      	ldr	r3, [pc, #356]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d908      	bls.n	8002a90 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a7e:	4b56      	ldr	r3, [pc, #344]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	4953      	ldr	r1, [pc, #332]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d010      	beq.n	8002abe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	4b4d      	ldr	r3, [pc, #308]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d908      	bls.n	8002abe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aac:	4b4a      	ldr	r3, [pc, #296]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f023 020f 	bic.w	r2, r3, #15
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4947      	ldr	r1, [pc, #284]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d055      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002aca:	4b43      	ldr	r3, [pc, #268]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	4940      	ldr	r1, [pc, #256]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ae4:	4b3c      	ldr	r3, [pc, #240]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d121      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0f6      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d107      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002afc:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d115      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0ea      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d107      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b14:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0de      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b24:	4b2c      	ldr	r3, [pc, #176]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0d6      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b34:	4b28      	ldr	r3, [pc, #160]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f023 0207 	bic.w	r2, r3, #7
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4925      	ldr	r1, [pc, #148]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b46:	f7fd fe2d 	bl	80007a4 <HAL_GetTick>
 8002b4a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4e:	f7fd fe29 	bl	80007a4 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e0be      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b64:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d1eb      	bne.n	8002b4e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d010      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d208      	bcs.n	8002ba4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b92:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f023 020f 	bic.w	r2, r3, #15
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	490e      	ldr	r1, [pc, #56]	; (8002bd8 <HAL_RCC_ClockConfig+0x244>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCC_ClockConfig+0x240>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d214      	bcs.n	8002bdc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <HAL_RCC_ClockConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 020f 	bic.w	r2, r3, #15
 8002bba:	4906      	ldr	r1, [pc, #24]	; (8002bd4 <HAL_RCC_ClockConfig+0x240>)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b04      	ldr	r3, [pc, #16]	; (8002bd4 <HAL_RCC_ClockConfig+0x240>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e086      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x34e>
 8002bd4:	52002000 	.word	0x52002000
 8002bd8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d010      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	4b3f      	ldr	r3, [pc, #252]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d208      	bcs.n	8002c0a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bf8:	4b3c      	ldr	r3, [pc, #240]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	4939      	ldr	r1, [pc, #228]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d010      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695a      	ldr	r2, [r3, #20]
 8002c1a:	4b34      	ldr	r3, [pc, #208]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d208      	bcs.n	8002c38 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c26:	4b31      	ldr	r3, [pc, #196]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	492e      	ldr	r1, [pc, #184]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d010      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	699a      	ldr	r2, [r3, #24]
 8002c48:	4b28      	ldr	r3, [pc, #160]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d208      	bcs.n	8002c66 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c54:	4b25      	ldr	r3, [pc, #148]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	4922      	ldr	r1, [pc, #136]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0320 	and.w	r3, r3, #32
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d010      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69da      	ldr	r2, [r3, #28]
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d208      	bcs.n	8002c94 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002c82:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	4917      	ldr	r1, [pc, #92]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c94:	f000 f834 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8002c98:	4601      	mov	r1, r0
 8002c9a:	4b14      	ldr	r3, [pc, #80]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	4a12      	ldr	r2, [pc, #72]	; (8002cf0 <HAL_RCC_ClockConfig+0x35c>)
 8002ca6:	5cd3      	ldrb	r3, [r2, r3]
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	fa21 f303 	lsr.w	r3, r1, r3
 8002cb0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cb2:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <HAL_RCC_ClockConfig+0x358>)
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	f003 030f 	and.w	r3, r3, #15
 8002cba:	4a0d      	ldr	r2, [pc, #52]	; (8002cf0 <HAL_RCC_ClockConfig+0x35c>)
 8002cbc:	5cd3      	ldrb	r3, [r2, r3]
 8002cbe:	f003 031f 	and.w	r3, r3, #31
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc8:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <HAL_RCC_ClockConfig+0x360>)
 8002cca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ccc:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <HAL_RCC_ClockConfig+0x364>)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <HAL_RCC_ClockConfig+0x368>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fd fd1a 	bl	8000710 <HAL_InitTick>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	58024400 	.word	0x58024400
 8002cf0:	080079e0 	.word	0x080079e0
 8002cf4:	24000004 	.word	0x24000004
 8002cf8:	24000000 	.word	0x24000000
 8002cfc:	24000008 	.word	0x24000008

08002d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	; 0x24
 8002d04:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d06:	4baf      	ldr	r3, [pc, #700]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d0e:	2b18      	cmp	r3, #24
 8002d10:	f200 814e 	bhi.w	8002fb0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002d14:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d81 	.word	0x08002d81
 8002d20:	08002fb1 	.word	0x08002fb1
 8002d24:	08002fb1 	.word	0x08002fb1
 8002d28:	08002fb1 	.word	0x08002fb1
 8002d2c:	08002fb1 	.word	0x08002fb1
 8002d30:	08002fb1 	.word	0x08002fb1
 8002d34:	08002fb1 	.word	0x08002fb1
 8002d38:	08002fb1 	.word	0x08002fb1
 8002d3c:	08002da7 	.word	0x08002da7
 8002d40:	08002fb1 	.word	0x08002fb1
 8002d44:	08002fb1 	.word	0x08002fb1
 8002d48:	08002fb1 	.word	0x08002fb1
 8002d4c:	08002fb1 	.word	0x08002fb1
 8002d50:	08002fb1 	.word	0x08002fb1
 8002d54:	08002fb1 	.word	0x08002fb1
 8002d58:	08002fb1 	.word	0x08002fb1
 8002d5c:	08002dad 	.word	0x08002dad
 8002d60:	08002fb1 	.word	0x08002fb1
 8002d64:	08002fb1 	.word	0x08002fb1
 8002d68:	08002fb1 	.word	0x08002fb1
 8002d6c:	08002fb1 	.word	0x08002fb1
 8002d70:	08002fb1 	.word	0x08002fb1
 8002d74:	08002fb1 	.word	0x08002fb1
 8002d78:	08002fb1 	.word	0x08002fb1
 8002d7c:	08002db3 	.word	0x08002db3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d80:	4b90      	ldr	r3, [pc, #576]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d009      	beq.n	8002da0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d8c:	4b8d      	ldr	r3, [pc, #564]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	08db      	lsrs	r3, r3, #3
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	4a8c      	ldr	r2, [pc, #560]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002d9e:	e10a      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002da0:	4b89      	ldr	r3, [pc, #548]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002da2:	61bb      	str	r3, [r7, #24]
    break;
 8002da4:	e107      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002da6:	4b89      	ldr	r3, [pc, #548]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002da8:	61bb      	str	r3, [r7, #24]
    break;
 8002daa:	e104      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002dac:	4b88      	ldr	r3, [pc, #544]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002dae:	61bb      	str	r3, [r7, #24]
    break;
 8002db0:	e101      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002db2:	4b84      	ldr	r3, [pc, #528]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002dbc:	4b81      	ldr	r3, [pc, #516]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	091b      	lsrs	r3, r3, #4
 8002dc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dc6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002dc8:	4b7e      	ldr	r3, [pc, #504]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002dd2:	4b7c      	ldr	r3, [pc, #496]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd6:	08db      	lsrs	r3, r3, #3
 8002dd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	fb02 f303 	mul.w	r3, r2, r3
 8002de2:	ee07 3a90 	vmov	s15, r3
 8002de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dea:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80da 	beq.w	8002faa <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d05a      	beq.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x1b2>
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d302      	bcc.n	8002e06 <HAL_RCC_GetSysClockFreq+0x106>
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d078      	beq.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x1f6>
 8002e04:	e099      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e06:	4b6f      	ldr	r3, [pc, #444]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d02d      	beq.n	8002e6e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e12:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	08db      	lsrs	r3, r3, #3
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	4a6a      	ldr	r2, [pc, #424]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e22:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	ee07 3a90 	vmov	s15, r3
 8002e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	ee07 3a90 	vmov	s15, r3
 8002e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e3c:	4b61      	ldr	r3, [pc, #388]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e44:	ee07 3a90 	vmov	s15, r3
 8002e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e50:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002e54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e68:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002e6c:	e087      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	ee07 3a90 	vmov	s15, r3
 8002e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e78:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002fd8 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002e7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e80:	4b50      	ldr	r3, [pc, #320]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e88:	ee07 3a90 	vmov	s15, r3
 8002e8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e90:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e94:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002e98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ea0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ea4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002eb0:	e065      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	ee07 3a90 	vmov	s15, r3
 8002eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ebc:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002fdc <HAL_RCC_GetSysClockFreq+0x2dc>
 8002ec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ec4:	4b3f      	ldr	r3, [pc, #252]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ecc:	ee07 3a90 	vmov	s15, r3
 8002ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ed4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ed8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ef4:	e043      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	ee07 3a90 	vmov	s15, r3
 8002efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f00:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002fe0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f08:	4b2e      	ldr	r3, [pc, #184]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f10:	ee07 3a90 	vmov	s15, r3
 8002f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f18:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f1c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002f20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f38:	e021      	b.n	8002f7e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	ee07 3a90 	vmov	s15, r3
 8002f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f44:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002fdc <HAL_RCC_GetSysClockFreq+0x2dc>
 8002f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f4c:	4b1d      	ldr	r3, [pc, #116]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f54:	ee07 3a90 	vmov	s15, r3
 8002f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f60:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002fd4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f7c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	0a5b      	lsrs	r3, r3, #9
 8002f84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f88:	3301      	adds	r3, #1
 8002f8a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f96:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fa2:	ee17 3a90 	vmov	r3, s15
 8002fa6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002fa8:	e005      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61bb      	str	r3, [r7, #24]
    break;
 8002fae:	e002      	b.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002fb2:	61bb      	str	r3, [r7, #24]
    break;
 8002fb4:	bf00      	nop
  }

  return sysclockfreq;
 8002fb6:	69bb      	ldr	r3, [r7, #24]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3724      	adds	r7, #36	; 0x24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	58024400 	.word	0x58024400
 8002fc8:	03d09000 	.word	0x03d09000
 8002fcc:	003d0900 	.word	0x003d0900
 8002fd0:	017d7840 	.word	0x017d7840
 8002fd4:	46000000 	.word	0x46000000
 8002fd8:	4c742400 	.word	0x4c742400
 8002fdc:	4a742400 	.word	0x4a742400
 8002fe0:	4bbebc20 	.word	0x4bbebc20

08002fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002fea:	f7ff fe89 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8002fee:	4601      	mov	r1, r0
 8002ff0:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	0a1b      	lsrs	r3, r3, #8
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ffc:	5cd3      	ldrb	r3, [r2, r3]
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	fa21 f303 	lsr.w	r3, r1, r3
 8003006:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <HAL_RCC_GetHCLKFreq+0x50>)
 800300a:	699b      	ldr	r3, [r3, #24]
 800300c:	f003 030f 	and.w	r3, r3, #15
 8003010:	4a09      	ldr	r2, [pc, #36]	; (8003038 <HAL_RCC_GetHCLKFreq+0x54>)
 8003012:	5cd3      	ldrb	r3, [r2, r3]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	fa22 f303 	lsr.w	r3, r2, r3
 800301e:	4a07      	ldr	r2, [pc, #28]	; (800303c <HAL_RCC_GetHCLKFreq+0x58>)
 8003020:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003022:	4a07      	ldr	r2, [pc, #28]	; (8003040 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003028:	4b04      	ldr	r3, [pc, #16]	; (800303c <HAL_RCC_GetHCLKFreq+0x58>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	58024400 	.word	0x58024400
 8003038:	080079e0 	.word	0x080079e0
 800303c:	24000004 	.word	0x24000004
 8003040:	24000000 	.word	0x24000000

08003044 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800304c:	2300      	movs	r3, #0
 800304e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003050:	2300      	movs	r3, #0
 8003052:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d03d      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003064:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003068:	d013      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800306a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800306e:	d802      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003074:	e01f      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003076:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800307a:	d013      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800307c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003080:	d01c      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003082:	e018      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003084:	4baf      	ldr	r3, [pc, #700]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	4aae      	ldr	r2, [pc, #696]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800308a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800308e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003090:	e015      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3304      	adds	r3, #4
 8003096:	2102      	movs	r1, #2
 8003098:	4618      	mov	r0, r3
 800309a:	f000 feb1 	bl	8003e00 <RCCEx_PLL2_Config>
 800309e:	4603      	mov	r3, r0
 80030a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80030a2:	e00c      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3324      	adds	r3, #36	; 0x24
 80030a8:	2102      	movs	r1, #2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 ff5a 	bl	8003f64 <RCCEx_PLL3_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80030b4:	e003      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
      break;
 80030ba:	e000      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80030bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030be:	7dfb      	ldrb	r3, [r7, #23]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d109      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80030c4:	4b9f      	ldr	r3, [pc, #636]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80030c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030d0:	499c      	ldr	r1, [pc, #624]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	650b      	str	r3, [r1, #80]	; 0x50
 80030d6:	e001      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d03d      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d826      	bhi.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80030f0:	a201      	add	r2, pc, #4	; (adr r2, 80030f8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80030f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f6:	bf00      	nop
 80030f8:	0800310d 	.word	0x0800310d
 80030fc:	0800311b 	.word	0x0800311b
 8003100:	0800312d 	.word	0x0800312d
 8003104:	08003145 	.word	0x08003145
 8003108:	08003145 	.word	0x08003145
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800310c:	4b8d      	ldr	r3, [pc, #564]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	4a8c      	ldr	r2, [pc, #560]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003116:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003118:	e015      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	3304      	adds	r3, #4
 800311e:	2100      	movs	r1, #0
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fe6d 	bl	8003e00 <RCCEx_PLL2_Config>
 8003126:	4603      	mov	r3, r0
 8003128:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800312a:	e00c      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3324      	adds	r3, #36	; 0x24
 8003130:	2100      	movs	r1, #0
 8003132:	4618      	mov	r0, r3
 8003134:	f000 ff16 	bl	8003f64 <RCCEx_PLL3_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800313c:	e003      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	75fb      	strb	r3, [r7, #23]
      break;
 8003142:	e000      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003146:	7dfb      	ldrb	r3, [r7, #23]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800314c:	4b7d      	ldr	r3, [pc, #500]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800314e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003150:	f023 0207 	bic.w	r2, r3, #7
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003158:	497a      	ldr	r1, [pc, #488]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800315a:	4313      	orrs	r3, r2
 800315c:	650b      	str	r3, [r1, #80]	; 0x50
 800315e:	e001      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003160:	7dfb      	ldrb	r3, [r7, #23]
 8003162:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800316c:	2b00      	cmp	r3, #0
 800316e:	d03e      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	2b80      	cmp	r3, #128	; 0x80
 8003176:	d01c      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003178:	2b80      	cmp	r3, #128	; 0x80
 800317a:	d804      	bhi.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	d00d      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003184:	e01e      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003186:	2bc0      	cmp	r3, #192	; 0xc0
 8003188:	d01f      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x186>
 800318a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800318e:	d01e      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003190:	e018      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003192:	4b6c      	ldr	r3, [pc, #432]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	4a6b      	ldr	r2, [pc, #428]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800319c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800319e:	e017      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3304      	adds	r3, #4
 80031a4:	2100      	movs	r1, #0
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fe2a 	bl	8003e00 <RCCEx_PLL2_Config>
 80031ac:	4603      	mov	r3, r0
 80031ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80031b0:	e00e      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3324      	adds	r3, #36	; 0x24
 80031b6:	2100      	movs	r1, #0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fed3 	bl	8003f64 <RCCEx_PLL3_Config>
 80031be:	4603      	mov	r3, r0
 80031c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80031c2:	e005      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	75fb      	strb	r3, [r7, #23]
      break;
 80031c8:	e002      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80031ca:	bf00      	nop
 80031cc:	e000      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80031ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80031d6:	4b5b      	ldr	r3, [pc, #364]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80031d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e2:	4958      	ldr	r1, [pc, #352]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	650b      	str	r3, [r1, #80]	; 0x50
 80031e8:	e001      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
 80031ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d044      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003204:	d01f      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003206:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800320a:	d805      	bhi.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003210:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003214:	d00e      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003216:	e01f      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003218:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800321c:	d01f      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800321e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003222:	d01e      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003224:	e018      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003226:	4b47      	ldr	r3, [pc, #284]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322a:	4a46      	ldr	r2, [pc, #280]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800322c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003230:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003232:	e017      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3304      	adds	r3, #4
 8003238:	2100      	movs	r1, #0
 800323a:	4618      	mov	r0, r3
 800323c:	f000 fde0 	bl	8003e00 <RCCEx_PLL2_Config>
 8003240:	4603      	mov	r3, r0
 8003242:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003244:	e00e      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3324      	adds	r3, #36	; 0x24
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fe89 	bl	8003f64 <RCCEx_PLL3_Config>
 8003252:	4603      	mov	r3, r0
 8003254:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003256:	e005      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	75fb      	strb	r3, [r7, #23]
      break;
 800325c:	e002      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800325e:	bf00      	nop
 8003260:	e000      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003262:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003264:	7dfb      	ldrb	r3, [r7, #23]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800326a:	4b36      	ldr	r3, [pc, #216]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003278:	4932      	ldr	r1, [pc, #200]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800327a:	4313      	orrs	r3, r2
 800327c:	658b      	str	r3, [r1, #88]	; 0x58
 800327e:	e001      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003280:	7dfb      	ldrb	r3, [r7, #23]
 8003282:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800328c:	2b00      	cmp	r3, #0
 800328e:	d044      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800329a:	d01f      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800329c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032a0:	d805      	bhi.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x278>
 80032a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032aa:	d00e      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x286>
 80032ac:	e01f      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80032ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032b2:	d01f      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80032b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032b8:	d01e      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80032ba:	e018      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032bc:	4b21      	ldr	r3, [pc, #132]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	4a20      	ldr	r2, [pc, #128]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80032c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032c8:	e017      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3304      	adds	r3, #4
 80032ce:	2100      	movs	r1, #0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fd95 	bl	8003e00 <RCCEx_PLL2_Config>
 80032d6:	4603      	mov	r3, r0
 80032d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80032da:	e00e      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3324      	adds	r3, #36	; 0x24
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fe3e 	bl	8003f64 <RCCEx_PLL3_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032ec:	e005      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
      break;
 80032f2:	e002      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80032f4:	bf00      	nop
 80032f6:	e000      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80032f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032fa:	7dfb      	ldrb	r3, [r7, #23]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10a      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003300:	4b10      	ldr	r3, [pc, #64]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003304:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800330e:	490d      	ldr	r1, [pc, #52]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003310:	4313      	orrs	r3, r2
 8003312:	658b      	str	r3, [r1, #88]	; 0x58
 8003314:	e001      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003316:	7dfb      	ldrb	r3, [r7, #23]
 8003318:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d035      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332a:	2b10      	cmp	r3, #16
 800332c:	d00c      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800332e:	2b10      	cmp	r3, #16
 8003330:	d802      	bhi.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003332:	2b00      	cmp	r3, #0
 8003334:	d01b      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003336:	e017      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003338:	2b20      	cmp	r3, #32
 800333a:	d00c      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800333c:	2b30      	cmp	r3, #48	; 0x30
 800333e:	d018      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003340:	e012      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003342:	bf00      	nop
 8003344:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003348:	4baf      	ldr	r3, [pc, #700]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	4aae      	ldr	r2, [pc, #696]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800334e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003352:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003354:	e00e      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3304      	adds	r3, #4
 800335a:	2102      	movs	r1, #2
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fd4f 	bl	8003e00 <RCCEx_PLL2_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003366:	e005      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	75fb      	strb	r3, [r7, #23]
      break;
 800336c:	e002      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800336e:	bf00      	nop
 8003370:	e000      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003372:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003374:	7dfb      	ldrb	r3, [r7, #23]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800337a:	4ba3      	ldr	r3, [pc, #652]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003386:	49a0      	ldr	r1, [pc, #640]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003388:	4313      	orrs	r3, r2
 800338a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800338c:	e001      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d042      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a6:	d01f      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80033a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ac:	d805      	bhi.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80033b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b6:	d00e      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80033b8:	e01f      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80033ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033be:	d01f      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80033c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033c4:	d01e      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80033c6:	e018      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c8:	4b8f      	ldr	r3, [pc, #572]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	4a8e      	ldr	r2, [pc, #568]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80033ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80033d4:	e017      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3304      	adds	r3, #4
 80033da:	2100      	movs	r1, #0
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fd0f 	bl	8003e00 <RCCEx_PLL2_Config>
 80033e2:	4603      	mov	r3, r0
 80033e4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80033e6:	e00e      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	3324      	adds	r3, #36	; 0x24
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fdb8 	bl	8003f64 <RCCEx_PLL3_Config>
 80033f4:	4603      	mov	r3, r0
 80033f6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80033f8:	e005      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	75fb      	strb	r3, [r7, #23]
      break;
 80033fe:	e002      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003400:	bf00      	nop
 8003402:	e000      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003406:	7dfb      	ldrb	r3, [r7, #23]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d109      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800340c:	4b7e      	ldr	r3, [pc, #504]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800340e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003410:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	497b      	ldr	r1, [pc, #492]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800341a:	4313      	orrs	r3, r2
 800341c:	650b      	str	r3, [r1, #80]	; 0x50
 800341e:	e001      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d042      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003434:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003438:	d01b      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800343a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800343e:	d805      	bhi.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d022      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800344a:	e01b      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800344c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003450:	d01d      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003452:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003456:	d01c      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003458:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800345c:	d01b      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800345e:	e011      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	2101      	movs	r1, #1
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fcca 	bl	8003e00 <RCCEx_PLL2_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003470:	e012      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3324      	adds	r3, #36	; 0x24
 8003476:	2101      	movs	r1, #1
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fd73 	bl	8003f64 <RCCEx_PLL3_Config>
 800347e:	4603      	mov	r3, r0
 8003480:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003482:	e009      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	75fb      	strb	r3, [r7, #23]
      break;
 8003488:	e006      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800348a:	bf00      	nop
 800348c:	e004      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800348e:	bf00      	nop
 8003490:	e002      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003492:	bf00      	nop
 8003494:	e000      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003496:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800349e:	4b5a      	ldr	r3, [pc, #360]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80034a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034aa:	4957      	ldr	r1, [pc, #348]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	650b      	str	r3, [r1, #80]	; 0x50
 80034b0:	e001      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
 80034b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d044      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034cc:	d01b      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80034ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034d2:	d805      	bhi.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d022      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80034d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80034de:	e01b      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80034e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e4:	d01d      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80034e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ea:	d01c      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80034ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034f0:	d01b      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80034f2:	e011      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	2101      	movs	r1, #1
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fc80 	bl	8003e00 <RCCEx_PLL2_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003504:	e012      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3324      	adds	r3, #36	; 0x24
 800350a:	2101      	movs	r1, #1
 800350c:	4618      	mov	r0, r3
 800350e:	f000 fd29 	bl	8003f64 <RCCEx_PLL3_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003516:	e009      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	75fb      	strb	r3, [r7, #23]
      break;
 800351c:	e006      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800351e:	bf00      	nop
 8003520:	e004      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003522:	bf00      	nop
 8003524:	e002      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003526:	bf00      	nop
 8003528:	e000      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800352a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800352c:	7dfb      	ldrb	r3, [r7, #23]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10a      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003532:	4b35      	ldr	r3, [pc, #212]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003536:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003540:	4931      	ldr	r1, [pc, #196]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003542:	4313      	orrs	r3, r2
 8003544:	658b      	str	r3, [r1, #88]	; 0x58
 8003546:	e001      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d02d      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800355c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003560:	d005      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003562:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003566:	d009      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003568:	2b00      	cmp	r3, #0
 800356a:	d013      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800356c:	e00f      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800356e:	4b26      	ldr	r3, [pc, #152]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	4a25      	ldr	r2, [pc, #148]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003578:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800357a:	e00c      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	2101      	movs	r1, #1
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fc3c 	bl	8003e00 <RCCEx_PLL2_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800358c:	e003      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	75fb      	strb	r3, [r7, #23]
      break;
 8003592:	e000      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003594:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d109      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800359c:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800359e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a8:	4917      	ldr	r1, [pc, #92]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	650b      	str	r3, [r1, #80]	; 0x50
 80035ae:	e001      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
 80035b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d035      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d81b      	bhi.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80035c8:	a201      	add	r2, pc, #4	; (adr r2, 80035d0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80035ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ce:	bf00      	nop
 80035d0:	0800360d 	.word	0x0800360d
 80035d4:	080035e1 	.word	0x080035e1
 80035d8:	080035ef 	.word	0x080035ef
 80035dc:	0800360d 	.word	0x0800360d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035e0:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	4a08      	ldr	r2, [pc, #32]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80035e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80035ec:	e00f      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	3304      	adds	r3, #4
 80035f2:	2102      	movs	r1, #2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fc03 	bl	8003e00 <RCCEx_PLL2_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80035fe:	e006      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	75fb      	strb	r3, [r7, #23]
      break;
 8003604:	e003      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003606:	bf00      	nop
 8003608:	58024400 	.word	0x58024400
      break;
 800360c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800360e:	7dfb      	ldrb	r3, [r7, #23]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d109      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003614:	4bba      	ldr	r3, [pc, #744]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003618:	f023 0203 	bic.w	r2, r3, #3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003620:	49b7      	ldr	r1, [pc, #732]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003622:	4313      	orrs	r3, r2
 8003624:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003626:	e001      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8086 	beq.w	8003746 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800363a:	4bb2      	ldr	r3, [pc, #712]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4ab1      	ldr	r2, [pc, #708]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003644:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003646:	f7fd f8ad 	bl	80007a4 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800364c:	e009      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364e:	f7fd f8a9 	bl	80007a4 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b64      	cmp	r3, #100	; 0x64
 800365a:	d902      	bls.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	75fb      	strb	r3, [r7, #23]
        break;
 8003660:	e005      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003662:	4ba8      	ldr	r3, [pc, #672]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0ef      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800366e:	7dfb      	ldrb	r3, [r7, #23]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d166      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003674:	4ba2      	ldr	r3, [pc, #648]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003676:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800367e:	4053      	eors	r3, r2
 8003680:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003684:	2b00      	cmp	r3, #0
 8003686:	d013      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003688:	4b9d      	ldr	r3, [pc, #628]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003690:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003692:	4b9b      	ldr	r3, [pc, #620]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	4a9a      	ldr	r2, [pc, #616]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800369e:	4b98      	ldr	r3, [pc, #608]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	4a97      	ldr	r2, [pc, #604]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80036a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80036aa:	4a95      	ldr	r2, [pc, #596]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ba:	d115      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fd f872 	bl	80007a4 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036c2:	e00b      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f7fd f86e 	bl	80007a4 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d902      	bls.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	75fb      	strb	r3, [r7, #23]
            break;
 80036da:	e005      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036dc:	4b88      	ldr	r3, [pc, #544]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ed      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d126      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036fc:	d10d      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80036fe:	4b80      	ldr	r3, [pc, #512]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800370c:	0919      	lsrs	r1, r3, #4
 800370e:	4b7e      	ldr	r3, [pc, #504]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003710:	400b      	ands	r3, r1
 8003712:	497b      	ldr	r1, [pc, #492]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	610b      	str	r3, [r1, #16]
 8003718:	e005      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800371a:	4b79      	ldr	r3, [pc, #484]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	4a78      	ldr	r2, [pc, #480]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003720:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003724:	6113      	str	r3, [r2, #16]
 8003726:	4b76      	ldr	r3, [pc, #472]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003728:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003734:	4972      	ldr	r1, [pc, #456]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003736:	4313      	orrs	r3, r2
 8003738:	670b      	str	r3, [r1, #112]	; 0x70
 800373a:	e004      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	75bb      	strb	r3, [r7, #22]
 8003740:	e001      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d07d      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003756:	2b28      	cmp	r3, #40	; 0x28
 8003758:	d866      	bhi.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800375a:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	0800382f 	.word	0x0800382f
 8003764:	08003829 	.word	0x08003829
 8003768:	08003829 	.word	0x08003829
 800376c:	08003829 	.word	0x08003829
 8003770:	08003829 	.word	0x08003829
 8003774:	08003829 	.word	0x08003829
 8003778:	08003829 	.word	0x08003829
 800377c:	08003829 	.word	0x08003829
 8003780:	08003805 	.word	0x08003805
 8003784:	08003829 	.word	0x08003829
 8003788:	08003829 	.word	0x08003829
 800378c:	08003829 	.word	0x08003829
 8003790:	08003829 	.word	0x08003829
 8003794:	08003829 	.word	0x08003829
 8003798:	08003829 	.word	0x08003829
 800379c:	08003829 	.word	0x08003829
 80037a0:	08003817 	.word	0x08003817
 80037a4:	08003829 	.word	0x08003829
 80037a8:	08003829 	.word	0x08003829
 80037ac:	08003829 	.word	0x08003829
 80037b0:	08003829 	.word	0x08003829
 80037b4:	08003829 	.word	0x08003829
 80037b8:	08003829 	.word	0x08003829
 80037bc:	08003829 	.word	0x08003829
 80037c0:	0800382f 	.word	0x0800382f
 80037c4:	08003829 	.word	0x08003829
 80037c8:	08003829 	.word	0x08003829
 80037cc:	08003829 	.word	0x08003829
 80037d0:	08003829 	.word	0x08003829
 80037d4:	08003829 	.word	0x08003829
 80037d8:	08003829 	.word	0x08003829
 80037dc:	08003829 	.word	0x08003829
 80037e0:	0800382f 	.word	0x0800382f
 80037e4:	08003829 	.word	0x08003829
 80037e8:	08003829 	.word	0x08003829
 80037ec:	08003829 	.word	0x08003829
 80037f0:	08003829 	.word	0x08003829
 80037f4:	08003829 	.word	0x08003829
 80037f8:	08003829 	.word	0x08003829
 80037fc:	08003829 	.word	0x08003829
 8003800:	0800382f 	.word	0x0800382f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	2101      	movs	r1, #1
 800380a:	4618      	mov	r0, r3
 800380c:	f000 faf8 	bl	8003e00 <RCCEx_PLL2_Config>
 8003810:	4603      	mov	r3, r0
 8003812:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003814:	e00c      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3324      	adds	r3, #36	; 0x24
 800381a:	2101      	movs	r1, #1
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fba1 	bl	8003f64 <RCCEx_PLL3_Config>
 8003822:	4603      	mov	r3, r0
 8003824:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003826:	e003      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	75fb      	strb	r3, [r7, #23]
      break;
 800382c:	e000      	b.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800382e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d109      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003836:	4b32      	ldr	r3, [pc, #200]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003842:	492f      	ldr	r1, [pc, #188]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003844:	4313      	orrs	r3, r2
 8003846:	654b      	str	r3, [r1, #84]	; 0x54
 8003848:	e001      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384a:	7dfb      	ldrb	r3, [r7, #23]
 800384c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d037      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800385e:	2b05      	cmp	r3, #5
 8003860:	d820      	bhi.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8003862:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8003864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003868:	080038ab 	.word	0x080038ab
 800386c:	08003881 	.word	0x08003881
 8003870:	08003893 	.word	0x08003893
 8003874:	080038ab 	.word	0x080038ab
 8003878:	080038ab 	.word	0x080038ab
 800387c:	080038ab 	.word	0x080038ab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3304      	adds	r3, #4
 8003884:	2101      	movs	r1, #1
 8003886:	4618      	mov	r0, r3
 8003888:	f000 faba 	bl	8003e00 <RCCEx_PLL2_Config>
 800388c:	4603      	mov	r3, r0
 800388e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003890:	e00c      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3324      	adds	r3, #36	; 0x24
 8003896:	2101      	movs	r1, #1
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fb63 	bl	8003f64 <RCCEx_PLL3_Config>
 800389e:	4603      	mov	r3, r0
 80038a0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80038a2:	e003      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	75fb      	strb	r3, [r7, #23]
      break;
 80038a8:	e000      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80038aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80038b2:	4b13      	ldr	r3, [pc, #76]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80038b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b6:	f023 0207 	bic.w	r2, r3, #7
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038be:	4910      	ldr	r1, [pc, #64]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	654b      	str	r3, [r1, #84]	; 0x54
 80038c4:	e001      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
 80038c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d040      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038dc:	2b05      	cmp	r3, #5
 80038de:	d827      	bhi.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80038e0:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	08003937 	.word	0x08003937
 80038ec:	0800390d 	.word	0x0800390d
 80038f0:	0800391f 	.word	0x0800391f
 80038f4:	08003937 	.word	0x08003937
 80038f8:	08003937 	.word	0x08003937
 80038fc:	08003937 	.word	0x08003937
 8003900:	58024400 	.word	0x58024400
 8003904:	58024800 	.word	0x58024800
 8003908:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3304      	adds	r3, #4
 8003910:	2101      	movs	r1, #1
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fa74 	bl	8003e00 <RCCEx_PLL2_Config>
 8003918:	4603      	mov	r3, r0
 800391a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800391c:	e00c      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3324      	adds	r3, #36	; 0x24
 8003922:	2101      	movs	r1, #1
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fb1d 	bl	8003f64 <RCCEx_PLL3_Config>
 800392a:	4603      	mov	r3, r0
 800392c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800392e:	e003      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	75fb      	strb	r3, [r7, #23]
      break;
 8003934:	e000      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8003936:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003938:	7dfb      	ldrb	r3, [r7, #23]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10a      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800393e:	4bb2      	ldr	r3, [pc, #712]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	f023 0207 	bic.w	r2, r3, #7
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394c:	49ae      	ldr	r1, [pc, #696]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800394e:	4313      	orrs	r3, r2
 8003950:	658b      	str	r3, [r1, #88]	; 0x58
 8003952:	e001      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003954:	7dfb      	ldrb	r3, [r7, #23]
 8003956:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d044      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800396a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800396e:	d01b      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8003970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003974:	d805      	bhi.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d022      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800397a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800397e:	d00a      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8003980:	e01b      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x976>
 8003982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003986:	d01d      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8003988:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800398c:	d01c      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800398e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003992:	d01b      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8003994:	e011      	b.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3304      	adds	r3, #4
 800399a:	2100      	movs	r1, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f000 fa2f 	bl	8003e00 <RCCEx_PLL2_Config>
 80039a2:	4603      	mov	r3, r0
 80039a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80039a6:	e012      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3324      	adds	r3, #36	; 0x24
 80039ac:	2102      	movs	r1, #2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fad8 	bl	8003f64 <RCCEx_PLL3_Config>
 80039b4:	4603      	mov	r3, r0
 80039b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80039b8:	e009      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
      break;
 80039be:	e006      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80039c0:	bf00      	nop
 80039c2:	e004      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80039c4:	bf00      	nop
 80039c6:	e002      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80039c8:	bf00      	nop
 80039ca:	e000      	b.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80039cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039d4:	4b8c      	ldr	r3, [pc, #560]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80039d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039e2:	4989      	ldr	r1, [pc, #548]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	654b      	str	r3, [r1, #84]	; 0x54
 80039e8:	e001      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ea:	7dfb      	ldrb	r3, [r7, #23]
 80039ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d044      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a04:	d01b      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8003a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a0a:	d805      	bhi.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d022      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8003a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a14:	d00a      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8003a16:	e01b      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8003a18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a1c:	d01d      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8003a1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a22:	d01c      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8003a24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a28:	d01b      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8003a2a:	e011      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	2100      	movs	r1, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f9e4 	bl	8003e00 <RCCEx_PLL2_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003a3c:	e012      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3324      	adds	r3, #36	; 0x24
 8003a42:	2102      	movs	r1, #2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fa8d 	bl	8003f64 <RCCEx_PLL3_Config>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003a4e:	e009      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	75fb      	strb	r3, [r7, #23]
      break;
 8003a54:	e006      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003a56:	bf00      	nop
 8003a58:	e004      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003a5a:	bf00      	nop
 8003a5c:	e002      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003a5e:	bf00      	nop
 8003a60:	e000      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8003a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a6a:	4b67      	ldr	r3, [pc, #412]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a78:	4963      	ldr	r1, [pc, #396]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	658b      	str	r3, [r1, #88]	; 0x58
 8003a7e:	e001      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
 8003a82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d044      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a9a:	d01b      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8003a9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aa0:	d805      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d022      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8003aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003aac:	e01b      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8003aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ab2:	d01d      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003ab4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ab8:	d01c      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8003aba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003abe:	d01b      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8003ac0:	e011      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 f999 	bl	8003e00 <RCCEx_PLL2_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ad2:	e012      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3324      	adds	r3, #36	; 0x24
 8003ad8:	2102      	movs	r1, #2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fa42 	bl	8003f64 <RCCEx_PLL3_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ae4:	e009      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8003aea:	e006      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003aec:	bf00      	nop
 8003aee:	e004      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003af0:	bf00      	nop
 8003af2:	e002      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003af4:	bf00      	nop
 8003af6:	e000      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8003af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b00:	4b41      	ldr	r3, [pc, #260]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b0e:	493e      	ldr	r1, [pc, #248]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	658b      	str	r3, [r1, #88]	; 0x58
 8003b14:	e001      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d01a      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b30:	d10a      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3324      	adds	r3, #36	; 0x24
 8003b36:	2102      	movs	r1, #2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fa13 	bl	8003f64 <RCCEx_PLL3_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b48:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b56:	492c      	ldr	r1, [pc, #176]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0310 	and.w	r3, r3, #16
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d01a      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b72:	d10a      	bne.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3324      	adds	r3, #36	; 0x24
 8003b78:	2102      	movs	r1, #2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f9f2 	bl	8003f64 <RCCEx_PLL3_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b8a:	4b1f      	ldr	r3, [pc, #124]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b98:	491b      	ldr	r1, [pc, #108]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d032      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb4:	d00d      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8003bb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bba:	d016      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d111      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f000 f91a 	bl	8003e00 <RCCEx_PLL2_Config>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003bd0:	e00c      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3324      	adds	r3, #36	; 0x24
 8003bd6:	2102      	movs	r1, #2
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 f9c3 	bl	8003f64 <RCCEx_PLL3_Config>
 8003bde:	4603      	mov	r3, r0
 8003be0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003be2:	e003      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	75fb      	strb	r3, [r7, #23]
      break;
 8003be8:	e000      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8003bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10c      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c00:	4901      	ldr	r1, [pc, #4]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	658b      	str	r3, [r1, #88]	; 0x58
 8003c06:	e003      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8003c08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0c:	7dfb      	ldrb	r3, [r7, #23]
 8003c0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d02f      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c26:	d00c      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003c28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c2c:	d015      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8003c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c32:	d10f      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c34:	4b71      	ldr	r3, [pc, #452]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	4a70      	ldr	r2, [pc, #448]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003c40:	e00c      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	3324      	adds	r3, #36	; 0x24
 8003c46:	2101      	movs	r1, #1
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 f98b 	bl	8003f64 <RCCEx_PLL3_Config>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003c52:	e003      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	75fb      	strb	r3, [r7, #23]
      break;
 8003c58:	e000      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8003c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10a      	bne.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c62:	4b66      	ldr	r3, [pc, #408]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c70:	4962      	ldr	r1, [pc, #392]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	654b      	str	r3, [r1, #84]	; 0x54
 8003c76:	e001      	b.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
 8003c7a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d029      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c94:	d007      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8003c96:	e00f      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c98:	4b58      	ldr	r3, [pc, #352]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	4a57      	ldr	r2, [pc, #348]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003ca4:	e00b      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	2102      	movs	r1, #2
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 f8a7 	bl	8003e00 <RCCEx_PLL2_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003cb6:	e002      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	75fb      	strb	r3, [r7, #23]
      break;
 8003cbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d109      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003cc4:	4b4d      	ldr	r3, [pc, #308]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cd0:	494a      	ldr	r1, [pc, #296]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cd6:	e001      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
 8003cda:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3324      	adds	r3, #36	; 0x24
 8003cec:	2102      	movs	r1, #2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f938 	bl	8003f64 <RCCEx_PLL3_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d02f      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d12:	d00c      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d18:	d802      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d011      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8003d1e:	e00d      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8003d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d24:	d00f      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8003d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d2a:	d00e      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8003d2c:	e006      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d2e:	4b33      	ldr	r3, [pc, #204]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	4a32      	ldr	r2, [pc, #200]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003d3a:	e007      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d40:	e004      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003d42:	bf00      	nop
 8003d44:	e002      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003d46:	bf00      	nop
 8003d48:	e000      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003d4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d109      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d52:	4b2a      	ldr	r3, [pc, #168]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d5e:	4927      	ldr	r1, [pc, #156]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	654b      	str	r3, [r1, #84]	; 0x54
 8003d64:	e001      	b.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
 8003d68:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d008      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d76:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	491e      	ldr	r1, [pc, #120]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d008      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d94:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003da0:	4916      	ldr	r1, [pc, #88]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00d      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003db2:	4b12      	ldr	r3, [pc, #72]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	4a11      	ldr	r2, [pc, #68]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003db8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dbc:	6113      	str	r3, [r2, #16]
 8003dbe:	4b0f      	ldr	r3, [pc, #60]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003dc0:	691a      	ldr	r2, [r3, #16]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003dc8:	490c      	ldr	r1, [pc, #48]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	da08      	bge.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de2:	4906      	ldr	r1, [pc, #24]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8003de8:	7dbb      	ldrb	r3, [r7, #22]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e000      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	58024400 	.word	0x58024400

08003e00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e0e:	4b53      	ldr	r3, [pc, #332]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b03      	cmp	r3, #3
 8003e18:	d101      	bne.n	8003e1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e099      	b.n	8003f52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e1e:	4b4f      	ldr	r3, [pc, #316]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a4e      	ldr	r2, [pc, #312]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003e24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e2a:	f7fc fcbb 	bl	80007a4 <HAL_GetTick>
 8003e2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e30:	e008      	b.n	8003e44 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e32:	f7fc fcb7 	bl	80007a4 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e086      	b.n	8003f52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e44:	4b45      	ldr	r3, [pc, #276]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f0      	bne.n	8003e32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e50:	4b42      	ldr	r3, [pc, #264]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	031b      	lsls	r3, r3, #12
 8003e5e:	493f      	ldr	r1, [pc, #252]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	628b      	str	r3, [r1, #40]	; 0x28
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	025b      	lsls	r3, r3, #9
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	061b      	lsls	r3, r3, #24
 8003e90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e94:	4931      	ldr	r1, [pc, #196]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003e9a:	4b30      	ldr	r3, [pc, #192]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	492d      	ldr	r1, [pc, #180]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003eac:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	f023 0220 	bic.w	r2, r3, #32
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	4928      	ldr	r1, [pc, #160]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ebe:	4b27      	ldr	r3, [pc, #156]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	4a26      	ldr	r2, [pc, #152]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003ec4:	f023 0310 	bic.w	r3, r3, #16
 8003ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003eca:	4b24      	ldr	r3, [pc, #144]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003ecc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ece:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <RCCEx_PLL2_Config+0x160>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	69d2      	ldr	r2, [r2, #28]
 8003ed6:	00d2      	lsls	r2, r2, #3
 8003ed8:	4920      	ldr	r1, [pc, #128]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003ede:	4b1f      	ldr	r3, [pc, #124]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	4a1e      	ldr	r2, [pc, #120]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003ee4:	f043 0310 	orr.w	r3, r3, #16
 8003ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	4a19      	ldr	r2, [pc, #100]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003ef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003efa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003efc:	e00f      	b.n	8003f1e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d106      	bne.n	8003f12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f04:	4b15      	ldr	r3, [pc, #84]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	4a14      	ldr	r2, [pc, #80]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f10:	e005      	b.n	8003f1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f12:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003f18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a0e      	ldr	r2, [pc, #56]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003f24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f2a:	f7fc fc3b 	bl	80007a4 <HAL_GetTick>
 8003f2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f30:	e008      	b.n	8003f44 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003f32:	f7fc fc37 	bl	80007a4 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e006      	b.n	8003f52 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <RCCEx_PLL2_Config+0x15c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	58024400 	.word	0x58024400
 8003f60:	ffff0007 	.word	0xffff0007

08003f64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f72:	4b53      	ldr	r3, [pc, #332]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8003f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b03      	cmp	r3, #3
 8003f7c:	d101      	bne.n	8003f82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e099      	b.n	80040b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f82:	4b4f      	ldr	r3, [pc, #316]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a4e      	ldr	r2, [pc, #312]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8003f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f8e:	f7fc fc09 	bl	80007a4 <HAL_GetTick>
 8003f92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f94:	e008      	b.n	8003fa8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003f96:	f7fc fc05 	bl	80007a4 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d901      	bls.n	8003fa8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e086      	b.n	80040b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fa8:	4b45      	ldr	r3, [pc, #276]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f0      	bne.n	8003f96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003fb4:	4b42      	ldr	r3, [pc, #264]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	051b      	lsls	r3, r3, #20
 8003fc2:	493f      	ldr	r1, [pc, #252]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	628b      	str	r3, [r1, #40]	; 0x28
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	025b      	lsls	r3, r3, #9
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	041b      	lsls	r3, r3, #16
 8003fe6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	061b      	lsls	r3, r3, #24
 8003ff4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ff8:	4931      	ldr	r1, [pc, #196]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003ffe:	4b30      	ldr	r3, [pc, #192]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	492d      	ldr	r1, [pc, #180]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 800400c:	4313      	orrs	r3, r2
 800400e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004010:	4b2b      	ldr	r3, [pc, #172]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	4928      	ldr	r1, [pc, #160]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 800401e:	4313      	orrs	r3, r2
 8004020:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004022:	4b27      	ldr	r3, [pc, #156]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	4a26      	ldr	r2, [pc, #152]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8004028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800402c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800402e:	4b24      	ldr	r3, [pc, #144]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8004030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004032:	4b24      	ldr	r3, [pc, #144]	; (80040c4 <RCCEx_PLL3_Config+0x160>)
 8004034:	4013      	ands	r3, r2
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	69d2      	ldr	r2, [r2, #28]
 800403a:	00d2      	lsls	r2, r2, #3
 800403c:	4920      	ldr	r1, [pc, #128]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 800403e:	4313      	orrs	r3, r2
 8004040:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004042:	4b1f      	ldr	r3, [pc, #124]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	4a1e      	ldr	r2, [pc, #120]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8004048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d106      	bne.n	8004062 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004054:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 800405a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800405e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004060:	e00f      	b.n	8004082 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d106      	bne.n	8004076 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004068:	4b15      	ldr	r3, [pc, #84]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	4a14      	ldr	r2, [pc, #80]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 800406e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004072:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004074:	e005      	b.n	8004082 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	4a11      	ldr	r2, [pc, #68]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 800407c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004080:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004082:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a0e      	ldr	r2, [pc, #56]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 8004088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800408c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800408e:	f7fc fb89 	bl	80007a4 <HAL_GetTick>
 8004092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004094:	e008      	b.n	80040a8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004096:	f7fc fb85 	bl	80007a4 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e006      	b.n	80040b6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <RCCEx_PLL3_Config+0x15c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	58024400 	.word	0x58024400
 80040c4:	ffff0007 	.word	0xffff0007

080040c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040c8:	b084      	sub	sp, #16
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
 80040d2:	f107 001c 	add.w	r0, r7, #28
 80040d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d120      	bne.n	8004122 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	4b25      	ldr	r3, [pc, #148]	; (8004188 <USB_CoreInit+0xc0>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004106:	2b01      	cmp	r3, #1
 8004108:	d105      	bne.n	8004116 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f001 fa66 	bl	80055e8 <USB_CoreReset>
 800411c:	4603      	mov	r3, r0
 800411e:	73fb      	strb	r3, [r7, #15]
 8004120:	e01a      	b.n	8004158 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f001 fa5a 	bl	80055e8 <USB_CoreReset>
 8004134:	4603      	mov	r3, r0
 8004136:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	639a      	str	r2, [r3, #56]	; 0x38
 800414a:	e005      	b.n	8004158 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	2b01      	cmp	r3, #1
 800415c:	d10b      	bne.n	8004176 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f043 0206 	orr.w	r2, r3, #6
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f043 0220 	orr.w	r2, r3, #32
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004176:	7bfb      	ldrb	r3, [r7, #15]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004182:	b004      	add	sp, #16
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	ffbdffbf 	.word	0xffbdffbf

0800418c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	4613      	mov	r3, r2
 8004198:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800419a:	79fb      	ldrb	r3, [r7, #7]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d165      	bne.n	800426c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4a41      	ldr	r2, [pc, #260]	; (80042a8 <USB_SetTurnaroundTime+0x11c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d906      	bls.n	80041b6 <USB_SetTurnaroundTime+0x2a>
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4a40      	ldr	r2, [pc, #256]	; (80042ac <USB_SetTurnaroundTime+0x120>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d802      	bhi.n	80041b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80041b0:	230f      	movs	r3, #15
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	e062      	b.n	800427c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	4a3c      	ldr	r2, [pc, #240]	; (80042ac <USB_SetTurnaroundTime+0x120>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d906      	bls.n	80041cc <USB_SetTurnaroundTime+0x40>
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4a3b      	ldr	r2, [pc, #236]	; (80042b0 <USB_SetTurnaroundTime+0x124>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d802      	bhi.n	80041cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80041c6:	230e      	movs	r3, #14
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	e057      	b.n	800427c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4a38      	ldr	r2, [pc, #224]	; (80042b0 <USB_SetTurnaroundTime+0x124>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d906      	bls.n	80041e2 <USB_SetTurnaroundTime+0x56>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4a37      	ldr	r2, [pc, #220]	; (80042b4 <USB_SetTurnaroundTime+0x128>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d802      	bhi.n	80041e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80041dc:	230d      	movs	r3, #13
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	e04c      	b.n	800427c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	4a33      	ldr	r2, [pc, #204]	; (80042b4 <USB_SetTurnaroundTime+0x128>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d906      	bls.n	80041f8 <USB_SetTurnaroundTime+0x6c>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4a32      	ldr	r2, [pc, #200]	; (80042b8 <USB_SetTurnaroundTime+0x12c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d802      	bhi.n	80041f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80041f2:	230c      	movs	r3, #12
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	e041      	b.n	800427c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4a2f      	ldr	r2, [pc, #188]	; (80042b8 <USB_SetTurnaroundTime+0x12c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d906      	bls.n	800420e <USB_SetTurnaroundTime+0x82>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4a2e      	ldr	r2, [pc, #184]	; (80042bc <USB_SetTurnaroundTime+0x130>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d802      	bhi.n	800420e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004208:	230b      	movs	r3, #11
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	e036      	b.n	800427c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	4a2a      	ldr	r2, [pc, #168]	; (80042bc <USB_SetTurnaroundTime+0x130>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d906      	bls.n	8004224 <USB_SetTurnaroundTime+0x98>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4a29      	ldr	r2, [pc, #164]	; (80042c0 <USB_SetTurnaroundTime+0x134>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d802      	bhi.n	8004224 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800421e:	230a      	movs	r3, #10
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	e02b      	b.n	800427c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4a26      	ldr	r2, [pc, #152]	; (80042c0 <USB_SetTurnaroundTime+0x134>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d906      	bls.n	800423a <USB_SetTurnaroundTime+0xae>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4a25      	ldr	r2, [pc, #148]	; (80042c4 <USB_SetTurnaroundTime+0x138>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d802      	bhi.n	800423a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004234:	2309      	movs	r3, #9
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	e020      	b.n	800427c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4a21      	ldr	r2, [pc, #132]	; (80042c4 <USB_SetTurnaroundTime+0x138>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d906      	bls.n	8004250 <USB_SetTurnaroundTime+0xc4>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4a20      	ldr	r2, [pc, #128]	; (80042c8 <USB_SetTurnaroundTime+0x13c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d802      	bhi.n	8004250 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800424a:	2308      	movs	r3, #8
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	e015      	b.n	800427c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4a1d      	ldr	r2, [pc, #116]	; (80042c8 <USB_SetTurnaroundTime+0x13c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d906      	bls.n	8004266 <USB_SetTurnaroundTime+0xda>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4a1c      	ldr	r2, [pc, #112]	; (80042cc <USB_SetTurnaroundTime+0x140>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d802      	bhi.n	8004266 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004260:	2307      	movs	r3, #7
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	e00a      	b.n	800427c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004266:	2306      	movs	r3, #6
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e007      	b.n	800427c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d102      	bne.n	8004278 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004272:	2309      	movs	r3, #9
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	e001      	b.n	800427c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004278:	2309      	movs	r3, #9
 800427a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	029b      	lsls	r3, r3, #10
 8004290:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004294:	431a      	orrs	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	371c      	adds	r7, #28
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	00d8acbf 	.word	0x00d8acbf
 80042ac:	00e4e1bf 	.word	0x00e4e1bf
 80042b0:	00f423ff 	.word	0x00f423ff
 80042b4:	0106737f 	.word	0x0106737f
 80042b8:	011a499f 	.word	0x011a499f
 80042bc:	01312cff 	.word	0x01312cff
 80042c0:	014ca43f 	.word	0x014ca43f
 80042c4:	016e35ff 	.word	0x016e35ff
 80042c8:	01a6ab1f 	.word	0x01a6ab1f
 80042cc:	01e847ff 	.word	0x01e847ff

080042d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f043 0201 	orr.w	r2, r3, #1
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f023 0201 	bic.w	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d106      	bne.n	8004340 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	e00b      	b.n	8004358 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	60da      	str	r2, [r3, #12]
 8004352:	e001      	b.n	8004358 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e003      	b.n	8004360 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004358:	2032      	movs	r0, #50	; 0x32
 800435a:	f7fc fa2f 	bl	80007bc <HAL_Delay>

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004368:	b084      	sub	sp, #16
 800436a:	b580      	push	{r7, lr}
 800436c:	b086      	sub	sp, #24
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	e009      	b.n	800439c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	3340      	adds	r3, #64	; 0x40
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	2200      	movs	r2, #0
 8004394:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	3301      	adds	r3, #1
 800439a:	613b      	str	r3, [r7, #16]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	2b0e      	cmp	r3, #14
 80043a0:	d9f2      	bls.n	8004388 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80043a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d11c      	bne.n	80043e2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b6:	f043 0302 	orr.w	r3, r3, #2
 80043ba:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	e005      	b.n	80043ee <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043f4:	461a      	mov	r2, r3
 80043f6:	2300      	movs	r3, #0
 80043f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004400:	4619      	mov	r1, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004408:	461a      	mov	r2, r3
 800440a:	680b      	ldr	r3, [r1, #0]
 800440c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800440e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004410:	2b01      	cmp	r3, #1
 8004412:	d10c      	bne.n	800442e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d104      	bne.n	8004424 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800441a:	2100      	movs	r1, #0
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f949 	bl	80046b4 <USB_SetDevSpeed>
 8004422:	e008      	b.n	8004436 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004424:	2101      	movs	r1, #1
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f944 	bl	80046b4 <USB_SetDevSpeed>
 800442c:	e003      	b.n	8004436 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800442e:	2103      	movs	r1, #3
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f93f 	bl	80046b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004436:	2110      	movs	r1, #16
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f8f3 	bl	8004624 <USB_FlushTxFifo>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f911 	bl	8004670 <USB_FlushRxFifo>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445e:	461a      	mov	r2, r3
 8004460:	2300      	movs	r3, #0
 8004462:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446a:	461a      	mov	r2, r3
 800446c:	2300      	movs	r3, #0
 800446e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004476:	461a      	mov	r2, r3
 8004478:	2300      	movs	r3, #0
 800447a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	e043      	b.n	800450a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4413      	add	r3, r2
 800448a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004498:	d118      	bne.n	80044cc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10a      	bne.n	80044b6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ac:	461a      	mov	r2, r3
 80044ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	e013      	b.n	80044de <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c2:	461a      	mov	r2, r3
 80044c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	e008      	b.n	80044de <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d8:	461a      	mov	r2, r3
 80044da:	2300      	movs	r3, #0
 80044dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ea:	461a      	mov	r2, r3
 80044ec:	2300      	movs	r3, #0
 80044ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fc:	461a      	mov	r2, r3
 80044fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004502:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	3301      	adds	r3, #1
 8004508:	613b      	str	r3, [r7, #16]
 800450a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	429a      	cmp	r2, r3
 8004510:	d3b7      	bcc.n	8004482 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004512:	2300      	movs	r3, #0
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	e043      	b.n	80045a0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800452a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800452e:	d118      	bne.n	8004562 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10a      	bne.n	800454c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004542:	461a      	mov	r2, r3
 8004544:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	e013      	b.n	8004574 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004558:	461a      	mov	r2, r3
 800455a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	e008      	b.n	8004574 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456e:	461a      	mov	r2, r3
 8004570:	2300      	movs	r3, #0
 8004572:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004580:	461a      	mov	r2, r3
 8004582:	2300      	movs	r3, #0
 8004584:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004592:	461a      	mov	r2, r3
 8004594:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004598:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3301      	adds	r3, #1
 800459e:	613b      	str	r3, [r7, #16]
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d3b7      	bcc.n	8004518 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80045c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d105      	bne.n	80045dc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	f043 0210 	orr.w	r2, r3, #16
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699a      	ldr	r2, [r3, #24]
 80045e0:	4b0e      	ldr	r3, [pc, #56]	; (800461c <USB_DevInit+0x2b4>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f043 0208 	orr.w	r2, r3, #8
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d105      	bne.n	800460c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699a      	ldr	r2, [r3, #24]
 8004604:	4b06      	ldr	r3, [pc, #24]	; (8004620 <USB_DevInit+0x2b8>)
 8004606:	4313      	orrs	r3, r2
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800460c:	7dfb      	ldrb	r3, [r7, #23]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004618:	b004      	add	sp, #16
 800461a:	4770      	bx	lr
 800461c:	803c3800 	.word	0x803c3800
 8004620:	40000004 	.word	0x40000004

08004624 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	019b      	lsls	r3, r3, #6
 8004636:	f043 0220 	orr.w	r2, r3, #32
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3301      	adds	r3, #1
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4a09      	ldr	r2, [pc, #36]	; (800466c <USB_FlushTxFifo+0x48>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d901      	bls.n	8004650 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e006      	b.n	800465e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b20      	cmp	r3, #32
 800465a:	d0f0      	beq.n	800463e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	00030d40 	.word	0x00030d40

08004670 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2210      	movs	r2, #16
 8004680:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3301      	adds	r3, #1
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4a09      	ldr	r2, [pc, #36]	; (80046b0 <USB_FlushRxFifo+0x40>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d901      	bls.n	8004694 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e006      	b.n	80046a2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b10      	cmp	r3, #16
 800469e:	d0f0      	beq.n	8004682 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	00030d40 	.word	0x00030d40

080046b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	68f9      	ldr	r1, [r7, #12]
 80046d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d4:	4313      	orrs	r3, r2
 80046d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b087      	sub	sp, #28
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0306 	and.w	r3, r3, #6
 80046fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d102      	bne.n	800470c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004706:	2300      	movs	r3, #0
 8004708:	75fb      	strb	r3, [r7, #23]
 800470a:	e00a      	b.n	8004722 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d002      	beq.n	8004718 <USB_GetDevSpeed+0x32>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2b06      	cmp	r3, #6
 8004716:	d102      	bne.n	800471e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004718:	2302      	movs	r3, #2
 800471a:	75fb      	strb	r3, [r7, #23]
 800471c:	e001      	b.n	8004722 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800471e:	230f      	movs	r3, #15
 8004720:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004722:	7dfb      	ldrb	r3, [r7, #23]
}
 8004724:	4618      	mov	r0, r3
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	785b      	ldrb	r3, [r3, #1]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d139      	bne.n	80047c0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004752:	69da      	ldr	r2, [r3, #28]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	2101      	movs	r1, #1
 800475e:	fa01 f303 	lsl.w	r3, r1, r3
 8004762:	b29b      	uxth	r3, r3
 8004764:	68f9      	ldr	r1, [r7, #12]
 8004766:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800476a:	4313      	orrs	r3, r2
 800476c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d153      	bne.n	800482c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4413      	add	r3, r2
 800478c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	78db      	ldrb	r3, [r3, #3]
 800479e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	059b      	lsls	r3, r3, #22
 80047a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047a8:	431a      	orrs	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	0159      	lsls	r1, r3, #5
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	440b      	add	r3, r1
 80047b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b6:	4619      	mov	r1, r3
 80047b8:	4b20      	ldr	r3, [pc, #128]	; (800483c <USB_ActivateEndpoint+0x10c>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	600b      	str	r3, [r1, #0]
 80047be:	e035      	b.n	800482c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	2101      	movs	r1, #1
 80047d2:	fa01 f303 	lsl.w	r3, r1, r3
 80047d6:	041b      	lsls	r3, r3, #16
 80047d8:	68f9      	ldr	r1, [r7, #12]
 80047da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047de:	4313      	orrs	r3, r2
 80047e0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d119      	bne.n	800482c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	78db      	ldrb	r3, [r3, #3]
 8004812:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004814:	430b      	orrs	r3, r1
 8004816:	431a      	orrs	r2, r3
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	0159      	lsls	r1, r3, #5
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	440b      	add	r3, r1
 8004820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004824:	4619      	mov	r1, r3
 8004826:	4b05      	ldr	r3, [pc, #20]	; (800483c <USB_ActivateEndpoint+0x10c>)
 8004828:	4313      	orrs	r3, r2
 800482a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	10008000 	.word	0x10008000

08004840 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d135      	bne.n	80048c8 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	2101      	movs	r1, #1
 800486e:	fa01 f303 	lsl.w	r3, r1, r3
 8004872:	b29b      	uxth	r3, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	68f9      	ldr	r1, [r7, #12]
 8004878:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800487c:	4013      	ands	r3, r2
 800487e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	2101      	movs	r1, #1
 8004892:	fa01 f303 	lsl.w	r3, r1, r3
 8004896:	b29b      	uxth	r3, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	68f9      	ldr	r1, [r7, #12]
 800489c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048a0:	4013      	ands	r3, r2
 80048a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	0159      	lsls	r1, r3, #5
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	440b      	add	r3, r1
 80048ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048be:	4619      	mov	r1, r3
 80048c0:	4b1f      	ldr	r3, [pc, #124]	; (8004940 <USB_DeactivateEndpoint+0x100>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]
 80048c6:	e034      	b.n	8004932 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	2101      	movs	r1, #1
 80048da:	fa01 f303 	lsl.w	r3, r1, r3
 80048de:	041b      	lsls	r3, r3, #16
 80048e0:	43db      	mvns	r3, r3
 80048e2:	68f9      	ldr	r1, [r7, #12]
 80048e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048e8:	4013      	ands	r3, r2
 80048ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f2:	69da      	ldr	r2, [r3, #28]
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	2101      	movs	r1, #1
 80048fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004902:	041b      	lsls	r3, r3, #16
 8004904:	43db      	mvns	r3, r3
 8004906:	68f9      	ldr	r1, [r7, #12]
 8004908:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800490c:	4013      	ands	r3, r2
 800490e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	0159      	lsls	r1, r3, #5
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	440b      	add	r3, r1
 8004926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492a:	4619      	mov	r1, r3
 800492c:	4b05      	ldr	r3, [pc, #20]	; (8004944 <USB_DeactivateEndpoint+0x104>)
 800492e:	4013      	ands	r3, r2
 8004930:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	ec337800 	.word	0xec337800
 8004944:	eff37800 	.word	0xeff37800

08004948 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08a      	sub	sp, #40	; 0x28
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	4613      	mov	r3, r2
 8004954:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	785b      	ldrb	r3, [r3, #1]
 8004964:	2b01      	cmp	r3, #1
 8004966:	f040 8163 	bne.w	8004c30 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d132      	bne.n	80049d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	0159      	lsls	r1, r3, #5
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	440b      	add	r3, r1
 8004988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498c:	4619      	mov	r1, r3
 800498e:	4ba5      	ldr	r3, [pc, #660]	; (8004c24 <USB_EPStartXfer+0x2dc>)
 8004990:	4013      	ands	r3, r2
 8004992:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	0151      	lsls	r1, r2, #5
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	440a      	add	r2, r1
 80049aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	0159      	lsls	r1, r3, #5
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	440b      	add	r3, r1
 80049ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ce:	4619      	mov	r1, r3
 80049d0:	4b95      	ldr	r3, [pc, #596]	; (8004c28 <USB_EPStartXfer+0x2e0>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	610b      	str	r3, [r1, #16]
 80049d6:	e074      	b.n	8004ac2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	0159      	lsls	r1, r3, #5
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	440b      	add	r3, r1
 80049ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f2:	4619      	mov	r1, r3
 80049f4:	4b8c      	ldr	r3, [pc, #560]	; (8004c28 <USB_EPStartXfer+0x2e0>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	0159      	lsls	r1, r3, #5
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	440b      	add	r3, r1
 8004a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a14:	4619      	mov	r1, r3
 8004a16:	4b83      	ldr	r3, [pc, #524]	; (8004c24 <USB_EPStartXfer+0x2dc>)
 8004a18:	4013      	ands	r3, r2
 8004a1a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a28:	691a      	ldr	r2, [r3, #16]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	6959      	ldr	r1, [r3, #20]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	440b      	add	r3, r1
 8004a34:	1e59      	subs	r1, r3, #1
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a3e:	04d9      	lsls	r1, r3, #19
 8004a40:	4b7a      	ldr	r3, [pc, #488]	; (8004c2c <USB_EPStartXfer+0x2e4>)
 8004a42:	400b      	ands	r3, r1
 8004a44:	69b9      	ldr	r1, [r7, #24]
 8004a46:	0148      	lsls	r0, r1, #5
 8004a48:	69f9      	ldr	r1, [r7, #28]
 8004a4a:	4401      	add	r1, r0
 8004a4c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a50:	4313      	orrs	r3, r2
 8004a52:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a6a:	69b9      	ldr	r1, [r7, #24]
 8004a6c:	0148      	lsls	r0, r1, #5
 8004a6e:	69f9      	ldr	r1, [r7, #28]
 8004a70:	4401      	add	r1, r0
 8004a72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a76:	4313      	orrs	r3, r2
 8004a78:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	78db      	ldrb	r3, [r3, #3]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d11f      	bne.n	8004ac2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	0151      	lsls	r1, r2, #5
 8004a94:	69fa      	ldr	r2, [r7, #28]
 8004a96:	440a      	add	r2, r1
 8004a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a9c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004aa0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	69ba      	ldr	r2, [r7, #24]
 8004ab2:	0151      	lsls	r1, r2, #5
 8004ab4:	69fa      	ldr	r2, [r7, #28]
 8004ab6:	440a      	add	r2, r1
 8004ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004abc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ac0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d14b      	bne.n	8004b60 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d009      	beq.n	8004ae4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004adc:	461a      	mov	r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	78db      	ldrb	r3, [r3, #3]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d128      	bne.n	8004b3e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d110      	bne.n	8004b1e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	0151      	lsls	r1, r2, #5
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	440a      	add	r2, r1
 8004b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	e00f      	b.n	8004b3e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	015a      	lsls	r2, r3, #5
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	4413      	add	r3, r2
 8004b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	0151      	lsls	r1, r2, #5
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	440a      	add	r2, r1
 8004b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	0151      	lsls	r1, r2, #5
 8004b50:	69fa      	ldr	r2, [r7, #28]
 8004b52:	440a      	add	r2, r1
 8004b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	e133      	b.n	8004dc8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	0151      	lsls	r1, r2, #5
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	440a      	add	r2, r1
 8004b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b7e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	78db      	ldrb	r3, [r3, #3]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d015      	beq.n	8004bb4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 811b 	beq.w	8004dc8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba8:	69f9      	ldr	r1, [r7, #28]
 8004baa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	634b      	str	r3, [r1, #52]	; 0x34
 8004bb2:	e109      	b.n	8004dc8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d110      	bne.n	8004be6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	0151      	lsls	r1, r2, #5
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	440a      	add	r2, r1
 8004bda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	e00f      	b.n	8004c06 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	0151      	lsls	r1, r2, #5
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	440a      	add	r2, r1
 8004bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c04:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	68d9      	ldr	r1, [r3, #12]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	781a      	ldrb	r2, [r3, #0]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	b298      	uxth	r0, r3
 8004c14:	79fb      	ldrb	r3, [r7, #7]
 8004c16:	9300      	str	r3, [sp, #0]
 8004c18:	4603      	mov	r3, r0
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 fa38 	bl	8005090 <USB_WritePacket>
 8004c20:	e0d2      	b.n	8004dc8 <USB_EPStartXfer+0x480>
 8004c22:	bf00      	nop
 8004c24:	e007ffff 	.word	0xe007ffff
 8004c28:	fff80000 	.word	0xfff80000
 8004c2c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3c:	691a      	ldr	r2, [r3, #16]
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	0159      	lsls	r1, r3, #5
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	440b      	add	r3, r1
 8004c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4b61      	ldr	r3, [pc, #388]	; (8004dd4 <USB_EPStartXfer+0x48c>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	0159      	lsls	r1, r3, #5
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	440b      	add	r3, r1
 8004c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4b5a      	ldr	r3, [pc, #360]	; (8004dd8 <USB_EPStartXfer+0x490>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d123      	bne.n	8004cc4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c92:	69b9      	ldr	r1, [r7, #24]
 8004c94:	0148      	lsls	r0, r1, #5
 8004c96:	69f9      	ldr	r1, [r7, #28]
 8004c98:	4401      	add	r1, r0
 8004c9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	0151      	lsls	r1, r2, #5
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	440a      	add	r2, r1
 8004cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cc0:	6113      	str	r3, [r2, #16]
 8004cc2:	e033      	b.n	8004d2c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	695a      	ldr	r2, [r3, #20]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	4413      	add	r3, r2
 8004cce:	1e5a      	subs	r2, r3, #1
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	015a      	lsls	r2, r3, #5
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce6:	691a      	ldr	r2, [r3, #16]
 8004ce8:	8afb      	ldrh	r3, [r7, #22]
 8004cea:	04d9      	lsls	r1, r3, #19
 8004cec:	4b3b      	ldr	r3, [pc, #236]	; (8004ddc <USB_EPStartXfer+0x494>)
 8004cee:	400b      	ands	r3, r1
 8004cf0:	69b9      	ldr	r1, [r7, #24]
 8004cf2:	0148      	lsls	r0, r1, #5
 8004cf4:	69f9      	ldr	r1, [r7, #28]
 8004cf6:	4401      	add	r1, r0
 8004cf8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0c:	691a      	ldr	r2, [r3, #16]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	8af9      	ldrh	r1, [r7, #22]
 8004d14:	fb01 f303 	mul.w	r3, r1, r3
 8004d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d1c:	69b9      	ldr	r1, [r7, #24]
 8004d1e:	0148      	lsls	r0, r1, #5
 8004d20:	69f9      	ldr	r1, [r7, #28]
 8004d22:	4401      	add	r1, r0
 8004d24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d10d      	bne.n	8004d4e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d009      	beq.n	8004d4e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	68d9      	ldr	r1, [r3, #12]
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d4a:	460a      	mov	r2, r1
 8004d4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	78db      	ldrb	r3, [r3, #3]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d128      	bne.n	8004da8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d110      	bne.n	8004d88 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d84:	6013      	str	r3, [r2, #0]
 8004d86:	e00f      	b.n	8004da8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	0151      	lsls	r1, r2, #5
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	440a      	add	r2, r1
 8004d9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3720      	adds	r7, #32
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	fff80000 	.word	0xfff80000
 8004dd8:	e007ffff 	.word	0xe007ffff
 8004ddc:	1ff80000 	.word	0x1ff80000

08004de0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	4613      	mov	r3, r2
 8004dec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	785b      	ldrb	r3, [r3, #1]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	f040 80cd 	bne.w	8004f9c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d132      	bne.n	8004e70 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	0159      	lsls	r1, r3, #5
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	440b      	add	r3, r1
 8004e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e24:	4619      	mov	r1, r3
 8004e26:	4b98      	ldr	r3, [pc, #608]	; (8005088 <USB_EP0StartXfer+0x2a8>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	0151      	lsls	r1, r2, #5
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	440a      	add	r2, r1
 8004e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	0159      	lsls	r1, r3, #5
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	440b      	add	r3, r1
 8004e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e66:	4619      	mov	r1, r3
 8004e68:	4b88      	ldr	r3, [pc, #544]	; (800508c <USB_EP0StartXfer+0x2ac>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	610b      	str	r3, [r1, #16]
 8004e6e:	e04e      	b.n	8004f0e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	015a      	lsls	r2, r3, #5
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	4413      	add	r3, r2
 8004e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	0159      	lsls	r1, r3, #5
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	440b      	add	r3, r1
 8004e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4b7f      	ldr	r3, [pc, #508]	; (800508c <USB_EP0StartXfer+0x2ac>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	015a      	lsls	r2, r3, #5
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	4413      	add	r3, r2
 8004e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9e:	691a      	ldr	r2, [r3, #16]
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	0159      	lsls	r1, r3, #5
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	440b      	add	r3, r1
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eac:	4619      	mov	r1, r3
 8004eae:	4b76      	ldr	r3, [pc, #472]	; (8005088 <USB_EP0StartXfer+0x2a8>)
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	695a      	ldr	r2, [r3, #20]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d903      	bls.n	8004ec8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	0151      	lsls	r1, r2, #5
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	440a      	add	r2, r1
 8004ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ee2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ee6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004efe:	6939      	ldr	r1, [r7, #16]
 8004f00:	0148      	lsls	r0, r1, #5
 8004f02:	6979      	ldr	r1, [r7, #20]
 8004f04:	4401      	add	r1, r0
 8004f06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d11e      	bne.n	8004f52 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d009      	beq.n	8004f30 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	461a      	mov	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	0151      	lsls	r1, r2, #5
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	440a      	add	r2, r1
 8004f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	e092      	b.n	8005078 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	0151      	lsls	r1, r2, #5
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	440a      	add	r2, r1
 8004f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f70:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d07e      	beq.n	8005078 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f90:	6979      	ldr	r1, [r7, #20]
 8004f92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f96:	4313      	orrs	r3, r2
 8004f98:	634b      	str	r3, [r1, #52]	; 0x34
 8004f9a:	e06d      	b.n	8005078 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	015a      	lsls	r2, r3, #5
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	0159      	lsls	r1, r3, #5
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	440b      	add	r3, r1
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4b34      	ldr	r3, [pc, #208]	; (800508c <USB_EP0StartXfer+0x2ac>)
 8004fba:	4013      	ands	r3, r2
 8004fbc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fca:	691a      	ldr	r2, [r3, #16]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	0159      	lsls	r1, r3, #5
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	440b      	add	r3, r1
 8004fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4b2b      	ldr	r3, [pc, #172]	; (8005088 <USB_EP0StartXfer+0x2a8>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	0151      	lsls	r1, r2, #5
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	440a      	add	r2, r1
 8005006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800500a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800500e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005026:	6939      	ldr	r1, [r7, #16]
 8005028:	0148      	lsls	r0, r1, #5
 800502a:	6979      	ldr	r1, [r7, #20]
 800502c:	4401      	add	r1, r0
 800502e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005032:	4313      	orrs	r3, r2
 8005034:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d10d      	bne.n	8005058 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d009      	beq.n	8005058 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	68d9      	ldr	r1, [r3, #12]
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005054:	460a      	mov	r2, r1
 8005056:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	440a      	add	r2, r1
 800506e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005072:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005076:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	e007ffff 	.word	0xe007ffff
 800508c:	fff80000 	.word	0xfff80000

08005090 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005090:	b480      	push	{r7}
 8005092:	b089      	sub	sp, #36	; 0x24
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	4611      	mov	r1, r2
 800509c:	461a      	mov	r2, r3
 800509e:	460b      	mov	r3, r1
 80050a0:	71fb      	strb	r3, [r7, #7]
 80050a2:	4613      	mov	r3, r2
 80050a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80050ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d11a      	bne.n	80050ec <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050b6:	88bb      	ldrh	r3, [r7, #4]
 80050b8:	3303      	adds	r3, #3
 80050ba:	089b      	lsrs	r3, r3, #2
 80050bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050be:	2300      	movs	r3, #0
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	e00f      	b.n	80050e4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	031a      	lsls	r2, r3, #12
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050d0:	461a      	mov	r2, r3
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	3304      	adds	r3, #4
 80050dc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	3301      	adds	r3, #1
 80050e2:	61bb      	str	r3, [r7, #24]
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d3eb      	bcc.n	80050c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3724      	adds	r7, #36	; 0x24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b089      	sub	sp, #36	; 0x24
 80050fe:	af00      	add	r7, sp, #0
 8005100:	60f8      	str	r0, [r7, #12]
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	4613      	mov	r3, r2
 8005106:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	3303      	adds	r3, #3
 8005114:	089b      	lsrs	r3, r3, #2
 8005116:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005118:	2300      	movs	r3, #0
 800511a:	61bb      	str	r3, [r7, #24]
 800511c:	e00b      	b.n	8005136 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	601a      	str	r2, [r3, #0]
    pDest++;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	3304      	adds	r3, #4
 800512e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	3301      	adds	r3, #1
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	69ba      	ldr	r2, [r7, #24]
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	429a      	cmp	r2, r3
 800513c:	d3ef      	bcc.n	800511e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800513e:	69fb      	ldr	r3, [r7, #28]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3724      	adds	r7, #36	; 0x24
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	785b      	ldrb	r3, [r3, #1]
 8005164:	2b01      	cmp	r3, #1
 8005166:	d12c      	bne.n	80051c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	db12      	blt.n	80051a0 <USB_EPSetStall+0x54>
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00f      	beq.n	80051a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	0151      	lsls	r1, r2, #5
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	440a      	add	r2, r1
 8005196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800519a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800519e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	0151      	lsls	r1, r2, #5
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	440a      	add	r2, r1
 80051b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051be:	6013      	str	r3, [r2, #0]
 80051c0:	e02b      	b.n	800521a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	015a      	lsls	r2, r3, #5
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	4413      	add	r3, r2
 80051ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	db12      	blt.n	80051fa <USB_EPSetStall+0xae>
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00f      	beq.n	80051fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	0151      	lsls	r1, r2, #5
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	440a      	add	r2, r1
 80051f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005214:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005218:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	785b      	ldrb	r3, [r3, #1]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d128      	bne.n	8005296 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	440a      	add	r2, r1
 800525a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005262:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	78db      	ldrb	r3, [r3, #3]
 8005268:	2b03      	cmp	r3, #3
 800526a:	d003      	beq.n	8005274 <USB_EPClearStall+0x4c>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	78db      	ldrb	r3, [r3, #3]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d138      	bne.n	80052e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	0151      	lsls	r1, r2, #5
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	440a      	add	r2, r1
 800528a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800528e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	e027      	b.n	80052e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	78db      	ldrb	r3, [r3, #3]
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d003      	beq.n	80052c6 <USB_EPClearStall+0x9e>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	78db      	ldrb	r3, [r3, #3]
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d10f      	bne.n	80052e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	0151      	lsls	r1, r2, #5
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	440a      	add	r2, r1
 80052dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005312:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005316:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	78fb      	ldrb	r3, [r7, #3]
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005328:	68f9      	ldr	r1, [r7, #12]
 800532a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800532e:	4313      	orrs	r3, r2
 8005330:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800535a:	f023 0302 	bic.w	r3, r3, #2
 800535e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005360:	2003      	movs	r0, #3
 8005362:	f7fb fa2b 	bl	80007bc <HAL_Delay>

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800538a:	f043 0302 	orr.w	r3, r3, #2
 800538e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005390:	2003      	movs	r0, #3
 8005392:	f7fb fa13 	bl	80007bc <HAL_Delay>

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	4013      	ands	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053b8:	68fb      	ldr	r3, [r7, #12]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b085      	sub	sp, #20
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	4013      	ands	r3, r2
 80053e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	0c1b      	lsrs	r3, r3, #16
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b085      	sub	sp, #20
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	b29b      	uxth	r3, r3
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800542e:	b480      	push	{r7}
 8005430:	b085      	sub	sp, #20
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	460b      	mov	r3, r1
 8005438:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4413      	add	r3, r2
 8005446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	4013      	ands	r3, r2
 800545a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800545c:	68bb      	ldr	r3, [r7, #8]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800546a:	b480      	push	{r7}
 800546c:	b087      	sub	sp, #28
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	460b      	mov	r3, r1
 8005474:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800548c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800548e:	78fb      	ldrb	r3, [r7, #3]
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	fa22 f303 	lsr.w	r3, r2, r3
 800549a:	01db      	lsls	r3, r3, #7
 800549c:	b2db      	uxtb	r3, r3
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054a4:	78fb      	ldrb	r3, [r7, #3]
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4013      	ands	r3, r2
 80054b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054b8:	68bb      	ldr	r3, [r7, #8]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	371c      	adds	r7, #28
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	f003 0301 	and.w	r3, r3, #1
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
	...

080054e4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fe:	4619      	mov	r1, r3
 8005500:	4b09      	ldr	r3, [pc, #36]	; (8005528 <USB_ActivateSetup+0x44>)
 8005502:	4013      	ands	r3, r2
 8005504:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005518:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	fffff800 	.word	0xfffff800

0800552c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	460b      	mov	r3, r1
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	333c      	adds	r3, #60	; 0x3c
 8005542:	3304      	adds	r3, #4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	4a26      	ldr	r2, [pc, #152]	; (80055e4 <USB_EP0_OutStart+0xb8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d90a      	bls.n	8005566 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800555c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005560:	d101      	bne.n	8005566 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005562:	2300      	movs	r3, #0
 8005564:	e037      	b.n	80055d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556c:	461a      	mov	r2, r3
 800556e:	2300      	movs	r3, #0
 8005570:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005580:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005584:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005594:	f043 0318 	orr.w	r3, r3, #24
 8005598:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80055ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80055ae:	7afb      	ldrb	r3, [r7, #11]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d10f      	bne.n	80055d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ba:	461a      	mov	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80055d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	4f54300a 	.word	0x4f54300a

080055e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80055f0:	2300      	movs	r3, #0
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	3301      	adds	r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	4a13      	ldr	r2, [pc, #76]	; (800564c <USB_CoreReset+0x64>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d901      	bls.n	8005606 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e01b      	b.n	800563e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	daf2      	bge.n	80055f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f043 0201 	orr.w	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3301      	adds	r3, #1
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4a09      	ldr	r2, [pc, #36]	; (800564c <USB_CoreReset+0x64>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d901      	bls.n	8005630 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e006      	b.n	800563e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b01      	cmp	r3, #1
 800563a:	d0f0      	beq.n	800561e <USB_CoreReset+0x36>

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	00030d40 	.word	0x00030d40

08005650 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	7c1b      	ldrb	r3, [r3, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d115      	bne.n	8005694 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800566c:	2202      	movs	r2, #2
 800566e:	2181      	movs	r1, #129	; 0x81
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f001 ff36 	bl	80074e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800567c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005680:	2202      	movs	r2, #2
 8005682:	2101      	movs	r1, #1
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f001 ff2c 	bl	80074e2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005692:	e012      	b.n	80056ba <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005694:	2340      	movs	r3, #64	; 0x40
 8005696:	2202      	movs	r2, #2
 8005698:	2181      	movs	r1, #129	; 0x81
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f001 ff21 	bl	80074e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80056a6:	2340      	movs	r3, #64	; 0x40
 80056a8:	2202      	movs	r2, #2
 80056aa:	2101      	movs	r1, #1
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f001 ff18 	bl	80074e2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80056ba:	2308      	movs	r3, #8
 80056bc:	2203      	movs	r2, #3
 80056be:	2182      	movs	r1, #130	; 0x82
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f001 ff0e 	bl	80074e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2201      	movs	r2, #1
 80056ca:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80056cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80056d0:	f002 f884 	bl	80077dc <malloc>
 80056d4:	4603      	mov	r3, r0
 80056d6:	461a      	mov	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d102      	bne.n	80056ee <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
 80056ec:	e026      	b.n	800573c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056f4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2200      	movs	r2, #0
 8005704:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	7c1b      	ldrb	r3, [r3, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d109      	bne.n	800572c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800571e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005722:	2101      	movs	r1, #1
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f001 ffcd 	bl	80076c4 <USBD_LL_PrepareReceive>
 800572a:	e007      	b.n	800573c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005732:	2340      	movs	r3, #64	; 0x40
 8005734:	2101      	movs	r1, #1
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f001 ffc4 	bl	80076c4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800573c:	7bfb      	ldrb	r3, [r7, #15]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	460b      	mov	r3, r1
 8005750:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8005756:	2181      	movs	r1, #129	; 0x81
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f001 fee8 	bl	800752e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005764:	2101      	movs	r1, #1
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f001 fee1 	bl	800752e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005774:	2182      	movs	r1, #130	; 0x82
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f001 fed9 	bl	800752e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00e      	beq.n	80057aa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800579c:	4618      	mov	r0, r3
 800579e:	f002 f825 	bl	80077ec <free>
    pdev->pClassData = NULL;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b086      	sub	sp, #24
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80057c6:	2300      	movs	r3, #0
 80057c8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80057ca:	2300      	movs	r3, #0
 80057cc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d039      	beq.n	8005852 <USBD_CDC_Setup+0x9e>
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d17c      	bne.n	80058dc <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	88db      	ldrh	r3, [r3, #6]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d029      	beq.n	800583e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	b25b      	sxtb	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	da11      	bge.n	8005818 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8005800:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	88d2      	ldrh	r2, [r2, #6]
 8005806:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005808:	6939      	ldr	r1, [r7, #16]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	88db      	ldrh	r3, [r3, #6]
 800580e:	461a      	mov	r2, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f001 fa3f 	bl	8006c94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8005816:	e068      	b.n	80058ea <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	785a      	ldrb	r2, [r3, #1]
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	88db      	ldrh	r3, [r3, #6]
 8005826:	b2da      	uxtb	r2, r3
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800582e:	6939      	ldr	r1, [r7, #16]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	88db      	ldrh	r3, [r3, #6]
 8005834:	461a      	mov	r2, r3
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f001 fa5a 	bl	8006cf0 <USBD_CtlPrepareRx>
      break;
 800583c:	e055      	b.n	80058ea <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	7850      	ldrb	r0, [r2, #1]
 800584a:	2200      	movs	r2, #0
 800584c:	6839      	ldr	r1, [r7, #0]
 800584e:	4798      	blx	r3
      break;
 8005850:	e04b      	b.n	80058ea <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	785b      	ldrb	r3, [r3, #1]
 8005856:	2b0a      	cmp	r3, #10
 8005858:	d017      	beq.n	800588a <USBD_CDC_Setup+0xd6>
 800585a:	2b0b      	cmp	r3, #11
 800585c:	d029      	beq.n	80058b2 <USBD_CDC_Setup+0xfe>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d133      	bne.n	80058ca <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005868:	2b03      	cmp	r3, #3
 800586a:	d107      	bne.n	800587c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800586c:	f107 030c 	add.w	r3, r7, #12
 8005870:	2202      	movs	r2, #2
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f001 fa0d 	bl	8006c94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800587a:	e02e      	b.n	80058da <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800587c:	6839      	ldr	r1, [r7, #0]
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f001 f99d 	bl	8006bbe <USBD_CtlError>
            ret = USBD_FAIL;
 8005884:	2302      	movs	r3, #2
 8005886:	75fb      	strb	r3, [r7, #23]
          break;
 8005888:	e027      	b.n	80058da <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005890:	2b03      	cmp	r3, #3
 8005892:	d107      	bne.n	80058a4 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005894:	f107 030f 	add.w	r3, r7, #15
 8005898:	2201      	movs	r2, #1
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f001 f9f9 	bl	8006c94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058a2:	e01a      	b.n	80058da <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f001 f989 	bl	8006bbe <USBD_CtlError>
            ret = USBD_FAIL;
 80058ac:	2302      	movs	r3, #2
 80058ae:	75fb      	strb	r3, [r7, #23]
          break;
 80058b0:	e013      	b.n	80058da <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d00d      	beq.n	80058d8 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f001 f97d 	bl	8006bbe <USBD_CtlError>
            ret = USBD_FAIL;
 80058c4:	2302      	movs	r3, #2
 80058c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80058c8:	e006      	b.n	80058d8 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 f976 	bl	8006bbe <USBD_CtlError>
          ret = USBD_FAIL;
 80058d2:	2302      	movs	r3, #2
 80058d4:	75fb      	strb	r3, [r7, #23]
          break;
 80058d6:	e000      	b.n	80058da <USBD_CDC_Setup+0x126>
          break;
 80058d8:	bf00      	nop
      }
      break;
 80058da:	e006      	b.n	80058ea <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f001 f96d 	bl	8006bbe <USBD_CtlError>
      ret = USBD_FAIL;
 80058e4:	2302      	movs	r3, #2
 80058e6:	75fb      	strb	r3, [r7, #23]
      break;
 80058e8:	bf00      	nop
  }

  return ret;
 80058ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	460b      	mov	r3, r1
 80058fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005906:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800590e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d03a      	beq.n	8005990 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800591a:	78fa      	ldrb	r2, [r7, #3]
 800591c:	6879      	ldr	r1, [r7, #4]
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	440b      	add	r3, r1
 8005928:	331c      	adds	r3, #28
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d029      	beq.n	8005984 <USBD_CDC_DataIn+0x90>
 8005930:	78fa      	ldrb	r2, [r7, #3]
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	4613      	mov	r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	4413      	add	r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	440b      	add	r3, r1
 800593e:	331c      	adds	r3, #28
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	78f9      	ldrb	r1, [r7, #3]
 8005944:	68b8      	ldr	r0, [r7, #8]
 8005946:	460b      	mov	r3, r1
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	1a5b      	subs	r3, r3, r1
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4403      	add	r3, r0
 8005950:	3344      	adds	r3, #68	; 0x44
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	fbb2 f1f3 	udiv	r1, r2, r3
 8005958:	fb03 f301 	mul.w	r3, r3, r1
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d110      	bne.n	8005984 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005962:	78fa      	ldrb	r2, [r7, #3]
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	331c      	adds	r3, #28
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005976:	78f9      	ldrb	r1, [r7, #3]
 8005978:	2300      	movs	r3, #0
 800597a:	2200      	movs	r2, #0
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f001 fe7e 	bl	800767e <USBD_LL_Transmit>
 8005982:	e003      	b.n	800598c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800598c:	2300      	movs	r3, #0
 800598e:	e000      	b.n	8005992 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005990:	2302      	movs	r3, #2
  }
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80059ae:	78fb      	ldrb	r3, [r7, #3]
 80059b0:	4619      	mov	r1, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f001 fea9 	bl	800770a <USBD_LL_GetRxDataSize>
 80059b8:	4602      	mov	r2, r0
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00d      	beq.n	80059e6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80059de:	4611      	mov	r1, r2
 80059e0:	4798      	blx	r3

    return USBD_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	e000      	b.n	80059e8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80059e6:	2302      	movs	r3, #2
  }
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059fe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d015      	beq.n	8005a36 <USBD_CDC_EP0_RxReady+0x46>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005a10:	2bff      	cmp	r3, #255	; 0xff
 8005a12:	d010      	beq.n	8005a36 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8005a22:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005a2a:	b292      	uxth	r2, r2
 8005a2c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	22ff      	movs	r2, #255	; 0xff
 8005a32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2243      	movs	r2, #67	; 0x43
 8005a4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8005a4e:	4b03      	ldr	r3, [pc, #12]	; (8005a5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	24000098 	.word	0x24000098

08005a60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2243      	movs	r2, #67	; 0x43
 8005a6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8005a6e:	4b03      	ldr	r3, [pc, #12]	; (8005a7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	24000054 	.word	0x24000054

08005a80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2243      	movs	r2, #67	; 0x43
 8005a8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8005a8e:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	240000dc 	.word	0x240000dc

08005aa0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	220a      	movs	r2, #10
 8005aac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8005aae:	4b03      	ldr	r3, [pc, #12]	; (8005abc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	24000010 	.word	0x24000010

08005ac0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8005aca:	2302      	movs	r3, #2
 8005acc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d005      	beq.n	8005ae0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8005adc:	2300      	movs	r3, #0
 8005ade:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b087      	sub	sp, #28
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	4613      	mov	r3, r2
 8005afa:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b02:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005b0c:	88fa      	ldrh	r2, [r7, #6]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b32:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr

08005b4a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b084      	sub	sp, #16
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01c      	beq.n	8005b9e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d115      	bne.n	8005b9a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2181      	movs	r1, #129	; 0x81
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f001 fd74 	bl	800767e <USBD_LL_Transmit>

      return USBD_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	e002      	b.n	8005ba0 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005b9e:	2302      	movs	r3, #2
  }
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3710      	adds	r7, #16
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d017      	beq.n	8005bf2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	7c1b      	ldrb	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d109      	bne.n	8005bde <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f001 fd74 	bl	80076c4 <USBD_LL_PrepareReceive>
 8005bdc:	e007      	b.n	8005bee <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005be4:	2340      	movs	r3, #64	; 0x40
 8005be6:	2101      	movs	r1, #1
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f001 fd6b 	bl	80076c4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e000      	b.n	8005bf4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8005bf2:	2302      	movs	r3, #2
  }
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	4613      	mov	r3, r2
 8005c08:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005c10:	2302      	movs	r3, #2
 8005c12:	e01a      	b.n	8005c4a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	79fa      	ldrb	r2, [r7, #7]
 8005c40:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f001 fbe2 	bl	800740c <USBD_LL_Init>

  return USBD_OK;
 8005c48:	2300      	movs	r3, #0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c52:	b480      	push	{r7}
 8005c54:	b085      	sub	sp, #20
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	6078      	str	r0, [r7, #4]
 8005c5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d006      	beq.n	8005c74 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]
 8005c72:	e001      	b.n	8005c78 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005c74:	2302      	movs	r3, #2
 8005c76:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b082      	sub	sp, #8
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f001 fc0c 	bl	80074ac <USBD_LL_Start>

  return USBD_OK;
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00c      	beq.n	8005ce8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	78fa      	ldrb	r2, [r7, #3]
 8005cd8:	4611      	mov	r1, r2
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	4798      	blx	r3
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8005ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8005cf2:	b580      	push	{r7, lr}
 8005cf4:	b082      	sub	sp, #8
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	78fa      	ldrb	r2, [r7, #3]
 8005d08:	4611      	mov	r1, r2
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	4798      	blx	r3

  return USBD_OK;
 8005d0e:	2300      	movs	r3, #0
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3708      	adds	r7, #8
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 ff0a 	bl	8006b44 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005d3e:	461a      	mov	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005d4c:	f003 031f 	and.w	r3, r3, #31
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d00c      	beq.n	8005d6e <USBD_LL_SetupStage+0x56>
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d302      	bcc.n	8005d5e <USBD_LL_SetupStage+0x46>
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d010      	beq.n	8005d7e <USBD_LL_SetupStage+0x66>
 8005d5c:	e017      	b.n	8005d8e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 fa0a 	bl	8006180 <USBD_StdDevReq>
      break;
 8005d6c:	e01a      	b.n	8005da4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005d74:	4619      	mov	r1, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fa6c 	bl	8006254 <USBD_StdItfReq>
      break;
 8005d7c:	e012      	b.n	8005da4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8005d84:	4619      	mov	r1, r3
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 faaa 	bl	80062e0 <USBD_StdEPReq>
      break;
 8005d8c:	e00a      	b.n	8005da4 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005d94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f001 fbe5 	bl	800756c <USBD_LL_StallEP>
      break;
 8005da2:	bf00      	nop
  }

  return USBD_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b086      	sub	sp, #24
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	460b      	mov	r3, r1
 8005db8:	607a      	str	r2, [r7, #4]
 8005dba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005dbc:	7afb      	ldrb	r3, [r7, #11]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d14b      	bne.n	8005e5a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005dc8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005dd0:	2b03      	cmp	r3, #3
 8005dd2:	d134      	bne.n	8005e3e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	68da      	ldr	r2, [r3, #12]
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d919      	bls.n	8005e14 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	1ad2      	subs	r2, r2, r3
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	68da      	ldr	r2, [r3, #12]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d203      	bcs.n	8005e02 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	e002      	b.n	8005e08 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	6879      	ldr	r1, [r7, #4]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 ff8d 	bl	8006d2c <USBD_CtlContinueRx>
 8005e12:	e038      	b.n	8005e86 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00a      	beq.n	8005e36 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d105      	bne.n	8005e36 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 ff8a 	bl	8006d50 <USBD_CtlSendStatus>
 8005e3c:	e023      	b.n	8005e86 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e44:	2b05      	cmp	r3, #5
 8005e46:	d11e      	bne.n	8005e86 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005e50:	2100      	movs	r1, #0
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f001 fb8a 	bl	800756c <USBD_LL_StallEP>
 8005e58:	e015      	b.n	8005e86 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00d      	beq.n	8005e82 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d108      	bne.n	8005e82 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	7afa      	ldrb	r2, [r7, #11]
 8005e7a:	4611      	mov	r1, r2
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	4798      	blx	r3
 8005e80:	e001      	b.n	8005e86 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005e82:	2302      	movs	r3, #2
 8005e84:	e000      	b.n	8005e88 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	607a      	str	r2, [r7, #4]
 8005e9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005e9e:	7afb      	ldrb	r3, [r7, #11]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d17f      	bne.n	8005fa4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	3314      	adds	r3, #20
 8005ea8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d15c      	bne.n	8005f6e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d915      	bls.n	8005eec <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	1ad2      	subs	r2, r2, r3
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	6879      	ldr	r1, [r7, #4]
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 fef7 	bl	8006ccc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ede:	2300      	movs	r3, #0
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f001 fbed 	bl	80076c4 <USBD_LL_PrepareReceive>
 8005eea:	e04e      	b.n	8005f8a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	6912      	ldr	r2, [r2, #16]
 8005ef4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ef8:	fb02 f201 	mul.w	r2, r2, r1
 8005efc:	1a9b      	subs	r3, r3, r2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d11c      	bne.n	8005f3c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	689a      	ldr	r2, [r3, #8]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d316      	bcc.n	8005f3c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d20f      	bcs.n	8005f3c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	2100      	movs	r1, #0
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 fed3 	bl	8006ccc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f2e:	2300      	movs	r3, #0
 8005f30:	2200      	movs	r2, #0
 8005f32:	2100      	movs	r1, #0
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f001 fbc5 	bl	80076c4 <USBD_LL_PrepareReceive>
 8005f3a:	e026      	b.n	8005f8a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00a      	beq.n	8005f5e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d105      	bne.n	8005f5e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005f5e:	2180      	movs	r1, #128	; 0x80
 8005f60:	68f8      	ldr	r0, [r7, #12]
 8005f62:	f001 fb03 	bl	800756c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f000 ff05 	bl	8006d76 <USBD_CtlReceiveStatus>
 8005f6c:	e00d      	b.n	8005f8a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f74:	2b04      	cmp	r3, #4
 8005f76:	d004      	beq.n	8005f82 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d103      	bne.n	8005f8a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005f82:	2180      	movs	r1, #128	; 0x80
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f001 faf1 	bl	800756c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d11d      	bne.n	8005fd0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f7ff fe82 	bl	8005c9e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005fa2:	e015      	b.n	8005fd0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00d      	beq.n	8005fcc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d108      	bne.n	8005fcc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	7afa      	ldrb	r2, [r7, #11]
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	4798      	blx	r3
 8005fca:	e001      	b.n	8005fd0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e000      	b.n	8005fd2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005fda:	b580      	push	{r7, lr}
 8005fdc:	b082      	sub	sp, #8
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fe2:	2340      	movs	r3, #64	; 0x40
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f001 fa7a 	bl	80074e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2240      	movs	r2, #64	; 0x40
 8005ffa:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ffe:	2340      	movs	r3, #64	; 0x40
 8006000:	2200      	movs	r2, #0
 8006002:	2180      	movs	r1, #128	; 0x80
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 fa6c 	bl	80074e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2240      	movs	r2, #64	; 0x40
 8006014:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d009      	beq.n	8006052 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6852      	ldr	r2, [r2, #4]
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	4611      	mov	r1, r2
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	4798      	blx	r3
  }

  return USBD_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	460b      	mov	r3, r1
 8006066:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	78fa      	ldrb	r2, [r7, #3]
 800606c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2204      	movs	r2, #4
 8006094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b083      	sub	sp, #12
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	d105      	bne.n	80060c4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr

080060d2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b082      	sub	sp, #8
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e0:	2b03      	cmp	r3, #3
 80060e2:	d10b      	bne.n	80060fc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ea:	69db      	ldr	r3, [r3, #28]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d005      	beq.n	80060fc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
 800610e:	460b      	mov	r3, r1
 8006110:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	460b      	mov	r3, r1
 800612a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6852      	ldr	r2, [r2, #4]
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	4611      	mov	r1, r2
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	4798      	blx	r3

  return USBD_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006196:	2b20      	cmp	r3, #32
 8006198:	d004      	beq.n	80061a4 <USBD_StdDevReq+0x24>
 800619a:	2b40      	cmp	r3, #64	; 0x40
 800619c:	d002      	beq.n	80061a4 <USBD_StdDevReq+0x24>
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d008      	beq.n	80061b4 <USBD_StdDevReq+0x34>
 80061a2:	e04c      	b.n	800623e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	4798      	blx	r3
      break;
 80061b2:	e049      	b.n	8006248 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	785b      	ldrb	r3, [r3, #1]
 80061b8:	2b09      	cmp	r3, #9
 80061ba:	d83a      	bhi.n	8006232 <USBD_StdDevReq+0xb2>
 80061bc:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <USBD_StdDevReq+0x44>)
 80061be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c2:	bf00      	nop
 80061c4:	08006215 	.word	0x08006215
 80061c8:	08006229 	.word	0x08006229
 80061cc:	08006233 	.word	0x08006233
 80061d0:	0800621f 	.word	0x0800621f
 80061d4:	08006233 	.word	0x08006233
 80061d8:	080061f7 	.word	0x080061f7
 80061dc:	080061ed 	.word	0x080061ed
 80061e0:	08006233 	.word	0x08006233
 80061e4:	0800620b 	.word	0x0800620b
 80061e8:	08006201 	.word	0x08006201
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 f9d4 	bl	800659c <USBD_GetDescriptor>
          break;
 80061f4:	e022      	b.n	800623c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fb37 	bl	800686c <USBD_SetAddress>
          break;
 80061fe:	e01d      	b.n	800623c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 fb74 	bl	80068f0 <USBD_SetConfig>
          break;
 8006208:	e018      	b.n	800623c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800620a:	6839      	ldr	r1, [r7, #0]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fbfd 	bl	8006a0c <USBD_GetConfig>
          break;
 8006212:	e013      	b.n	800623c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fc2c 	bl	8006a74 <USBD_GetStatus>
          break;
 800621c:	e00e      	b.n	800623c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fc5a 	bl	8006ada <USBD_SetFeature>
          break;
 8006226:	e009      	b.n	800623c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fc69 	bl	8006b02 <USBD_ClrFeature>
          break;
 8006230:	e004      	b.n	800623c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fcc2 	bl	8006bbe <USBD_CtlError>
          break;
 800623a:	bf00      	nop
      }
      break;
 800623c:	e004      	b.n	8006248 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fcbc 	bl	8006bbe <USBD_CtlError>
      break;
 8006246:	bf00      	nop
  }

  return ret;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop

08006254 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800626a:	2b20      	cmp	r3, #32
 800626c:	d003      	beq.n	8006276 <USBD_StdItfReq+0x22>
 800626e:	2b40      	cmp	r3, #64	; 0x40
 8006270:	d001      	beq.n	8006276 <USBD_StdItfReq+0x22>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d12a      	bne.n	80062cc <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800627c:	3b01      	subs	r3, #1
 800627e:	2b02      	cmp	r3, #2
 8006280:	d81d      	bhi.n	80062be <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	889b      	ldrh	r3, [r3, #4]
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b01      	cmp	r3, #1
 800628a:	d813      	bhi.n	80062b4 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	4798      	blx	r3
 800629a:	4603      	mov	r3, r0
 800629c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	88db      	ldrh	r3, [r3, #6]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d110      	bne.n	80062c8 <USBD_StdItfReq+0x74>
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10d      	bne.n	80062c8 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 fd4f 	bl	8006d50 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80062b2:	e009      	b.n	80062c8 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80062b4:	6839      	ldr	r1, [r7, #0]
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fc81 	bl	8006bbe <USBD_CtlError>
          break;
 80062bc:	e004      	b.n	80062c8 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fc7c 	bl	8006bbe <USBD_CtlError>
          break;
 80062c6:	e000      	b.n	80062ca <USBD_StdItfReq+0x76>
          break;
 80062c8:	bf00      	nop
      }
      break;
 80062ca:	e004      	b.n	80062d6 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80062cc:	6839      	ldr	r1, [r7, #0]
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fc75 	bl	8006bbe <USBD_CtlError>
      break;
 80062d4:	bf00      	nop
  }

  return USBD_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	889b      	ldrh	r3, [r3, #4]
 80062f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d004      	beq.n	800630a <USBD_StdEPReq+0x2a>
 8006300:	2b40      	cmp	r3, #64	; 0x40
 8006302:	d002      	beq.n	800630a <USBD_StdEPReq+0x2a>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d008      	beq.n	800631a <USBD_StdEPReq+0x3a>
 8006308:	e13d      	b.n	8006586 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	6839      	ldr	r1, [r7, #0]
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	4798      	blx	r3
      break;
 8006318:	e13a      	b.n	8006590 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006322:	2b20      	cmp	r3, #32
 8006324:	d10a      	bne.n	800633c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	4798      	blx	r3
 8006334:	4603      	mov	r3, r0
 8006336:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006338:	7bfb      	ldrb	r3, [r7, #15]
 800633a:	e12a      	b.n	8006592 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	785b      	ldrb	r3, [r3, #1]
 8006340:	2b01      	cmp	r3, #1
 8006342:	d03e      	beq.n	80063c2 <USBD_StdEPReq+0xe2>
 8006344:	2b03      	cmp	r3, #3
 8006346:	d002      	beq.n	800634e <USBD_StdEPReq+0x6e>
 8006348:	2b00      	cmp	r3, #0
 800634a:	d070      	beq.n	800642e <USBD_StdEPReq+0x14e>
 800634c:	e115      	b.n	800657a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006354:	2b02      	cmp	r3, #2
 8006356:	d002      	beq.n	800635e <USBD_StdEPReq+0x7e>
 8006358:	2b03      	cmp	r3, #3
 800635a:	d015      	beq.n	8006388 <USBD_StdEPReq+0xa8>
 800635c:	e02b      	b.n	80063b6 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00c      	beq.n	800637e <USBD_StdEPReq+0x9e>
 8006364:	7bbb      	ldrb	r3, [r7, #14]
 8006366:	2b80      	cmp	r3, #128	; 0x80
 8006368:	d009      	beq.n	800637e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	4619      	mov	r1, r3
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 f8fc 	bl	800756c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006374:	2180      	movs	r1, #128	; 0x80
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 f8f8 	bl	800756c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800637c:	e020      	b.n	80063c0 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fc1c 	bl	8006bbe <USBD_CtlError>
              break;
 8006386:	e01b      	b.n	80063c0 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	885b      	ldrh	r3, [r3, #2]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10e      	bne.n	80063ae <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8006390:	7bbb      	ldrb	r3, [r7, #14]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00b      	beq.n	80063ae <USBD_StdEPReq+0xce>
 8006396:	7bbb      	ldrb	r3, [r7, #14]
 8006398:	2b80      	cmp	r3, #128	; 0x80
 800639a:	d008      	beq.n	80063ae <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	88db      	ldrh	r3, [r3, #6]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d104      	bne.n	80063ae <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80063a4:	7bbb      	ldrb	r3, [r7, #14]
 80063a6:	4619      	mov	r1, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 f8df 	bl	800756c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fcce 	bl	8006d50 <USBD_CtlSendStatus>

              break;
 80063b4:	e004      	b.n	80063c0 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fc00 	bl	8006bbe <USBD_CtlError>
              break;
 80063be:	bf00      	nop
          }
          break;
 80063c0:	e0e0      	b.n	8006584 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d002      	beq.n	80063d2 <USBD_StdEPReq+0xf2>
 80063cc:	2b03      	cmp	r3, #3
 80063ce:	d015      	beq.n	80063fc <USBD_StdEPReq+0x11c>
 80063d0:	e026      	b.n	8006420 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063d2:	7bbb      	ldrb	r3, [r7, #14]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d00c      	beq.n	80063f2 <USBD_StdEPReq+0x112>
 80063d8:	7bbb      	ldrb	r3, [r7, #14]
 80063da:	2b80      	cmp	r3, #128	; 0x80
 80063dc:	d009      	beq.n	80063f2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	4619      	mov	r1, r3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f001 f8c2 	bl	800756c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80063e8:	2180      	movs	r1, #128	; 0x80
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f001 f8be 	bl	800756c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80063f0:	e01c      	b.n	800642c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80063f2:	6839      	ldr	r1, [r7, #0]
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 fbe2 	bl	8006bbe <USBD_CtlError>
              break;
 80063fa:	e017      	b.n	800642c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	885b      	ldrh	r3, [r3, #2]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d112      	bne.n	800642a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006404:	7bbb      	ldrb	r3, [r7, #14]
 8006406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800640a:	2b00      	cmp	r3, #0
 800640c:	d004      	beq.n	8006418 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800640e:	7bbb      	ldrb	r3, [r7, #14]
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 f8c9 	bl	80075aa <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 fc99 	bl	8006d50 <USBD_CtlSendStatus>
              }
              break;
 800641e:	e004      	b.n	800642a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8006420:	6839      	ldr	r1, [r7, #0]
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fbcb 	bl	8006bbe <USBD_CtlError>
              break;
 8006428:	e000      	b.n	800642c <USBD_StdEPReq+0x14c>
              break;
 800642a:	bf00      	nop
          }
          break;
 800642c:	e0aa      	b.n	8006584 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006434:	2b02      	cmp	r3, #2
 8006436:	d002      	beq.n	800643e <USBD_StdEPReq+0x15e>
 8006438:	2b03      	cmp	r3, #3
 800643a:	d032      	beq.n	80064a2 <USBD_StdEPReq+0x1c2>
 800643c:	e097      	b.n	800656e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800643e:	7bbb      	ldrb	r3, [r7, #14]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d007      	beq.n	8006454 <USBD_StdEPReq+0x174>
 8006444:	7bbb      	ldrb	r3, [r7, #14]
 8006446:	2b80      	cmp	r3, #128	; 0x80
 8006448:	d004      	beq.n	8006454 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800644a:	6839      	ldr	r1, [r7, #0]
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fbb6 	bl	8006bbe <USBD_CtlError>
                break;
 8006452:	e091      	b.n	8006578 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006458:	2b00      	cmp	r3, #0
 800645a:	da0b      	bge.n	8006474 <USBD_StdEPReq+0x194>
 800645c:	7bbb      	ldrb	r3, [r7, #14]
 800645e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006462:	4613      	mov	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	3310      	adds	r3, #16
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	4413      	add	r3, r2
 8006470:	3304      	adds	r3, #4
 8006472:	e00b      	b.n	800648c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006474:	7bbb      	ldrb	r3, [r7, #14]
 8006476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800647a:	4613      	mov	r3, r2
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	4413      	add	r3, r2
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	4413      	add	r3, r2
 800648a:	3304      	adds	r3, #4
 800648c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2202      	movs	r2, #2
 8006498:	4619      	mov	r1, r3
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fbfa 	bl	8006c94 <USBD_CtlSendData>
              break;
 80064a0:	e06a      	b.n	8006578 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80064a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	da11      	bge.n	80064ce <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80064aa:	7bbb      	ldrb	r3, [r7, #14]
 80064ac:	f003 020f 	and.w	r2, r3, #15
 80064b0:	6879      	ldr	r1, [r7, #4]
 80064b2:	4613      	mov	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	440b      	add	r3, r1
 80064bc:	3318      	adds	r3, #24
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d117      	bne.n	80064f4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fb79 	bl	8006bbe <USBD_CtlError>
                  break;
 80064cc:	e054      	b.n	8006578 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	f003 020f 	and.w	r2, r3, #15
 80064d4:	6879      	ldr	r1, [r7, #4]
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	440b      	add	r3, r1
 80064e0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d104      	bne.n	80064f4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80064ea:	6839      	ldr	r1, [r7, #0]
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fb66 	bl	8006bbe <USBD_CtlError>
                  break;
 80064f2:	e041      	b.n	8006578 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	da0b      	bge.n	8006514 <USBD_StdEPReq+0x234>
 80064fc:	7bbb      	ldrb	r3, [r7, #14]
 80064fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006502:	4613      	mov	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	3310      	adds	r3, #16
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	4413      	add	r3, r2
 8006510:	3304      	adds	r3, #4
 8006512:	e00b      	b.n	800652c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	4413      	add	r3, r2
 800652a:	3304      	adds	r3, #4
 800652c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800652e:	7bbb      	ldrb	r3, [r7, #14]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <USBD_StdEPReq+0x25a>
 8006534:	7bbb      	ldrb	r3, [r7, #14]
 8006536:	2b80      	cmp	r3, #128	; 0x80
 8006538:	d103      	bne.n	8006542 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	e00e      	b.n	8006560 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f001 f84e 	bl	80075e8 <USBD_LL_IsStallEP>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2201      	movs	r2, #1
 8006556:	601a      	str	r2, [r3, #0]
 8006558:	e002      	b.n	8006560 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2202      	movs	r2, #2
 8006564:	4619      	mov	r1, r3
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fb94 	bl	8006c94 <USBD_CtlSendData>
              break;
 800656c:	e004      	b.n	8006578 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fb24 	bl	8006bbe <USBD_CtlError>
              break;
 8006576:	bf00      	nop
          }
          break;
 8006578:	e004      	b.n	8006584 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800657a:	6839      	ldr	r1, [r7, #0]
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 fb1e 	bl	8006bbe <USBD_CtlError>
          break;
 8006582:	bf00      	nop
      }
      break;
 8006584:	e004      	b.n	8006590 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8006586:	6839      	ldr	r1, [r7, #0]
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fb18 	bl	8006bbe <USBD_CtlError>
      break;
 800658e:	bf00      	nop
  }

  return ret;
 8006590:	7bfb      	ldrb	r3, [r7, #15]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	885b      	ldrh	r3, [r3, #2]
 80065b6:	0a1b      	lsrs	r3, r3, #8
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	3b01      	subs	r3, #1
 80065bc:	2b06      	cmp	r3, #6
 80065be:	f200 8128 	bhi.w	8006812 <USBD_GetDescriptor+0x276>
 80065c2:	a201      	add	r2, pc, #4	; (adr r2, 80065c8 <USBD_GetDescriptor+0x2c>)
 80065c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c8:	080065e5 	.word	0x080065e5
 80065cc:	080065fd 	.word	0x080065fd
 80065d0:	0800663d 	.word	0x0800663d
 80065d4:	08006813 	.word	0x08006813
 80065d8:	08006813 	.word	0x08006813
 80065dc:	080067b3 	.word	0x080067b3
 80065e0:	080067df 	.word	0x080067df
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	7c12      	ldrb	r2, [r2, #16]
 80065f0:	f107 0108 	add.w	r1, r7, #8
 80065f4:	4610      	mov	r0, r2
 80065f6:	4798      	blx	r3
 80065f8:	60f8      	str	r0, [r7, #12]
      break;
 80065fa:	e112      	b.n	8006822 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	7c1b      	ldrb	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10d      	bne.n	8006620 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660c:	f107 0208 	add.w	r2, r7, #8
 8006610:	4610      	mov	r0, r2
 8006612:	4798      	blx	r3
 8006614:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	3301      	adds	r3, #1
 800661a:	2202      	movs	r2, #2
 800661c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800661e:	e100      	b.n	8006822 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	f107 0208 	add.w	r2, r7, #8
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3
 8006630:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3301      	adds	r3, #1
 8006636:	2202      	movs	r2, #2
 8006638:	701a      	strb	r2, [r3, #0]
      break;
 800663a:	e0f2      	b.n	8006822 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	885b      	ldrh	r3, [r3, #2]
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b05      	cmp	r3, #5
 8006644:	f200 80ac 	bhi.w	80067a0 <USBD_GetDescriptor+0x204>
 8006648:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <USBD_GetDescriptor+0xb4>)
 800664a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664e:	bf00      	nop
 8006650:	08006669 	.word	0x08006669
 8006654:	0800669d 	.word	0x0800669d
 8006658:	080066d1 	.word	0x080066d1
 800665c:	08006705 	.word	0x08006705
 8006660:	08006739 	.word	0x08006739
 8006664:	0800676d 	.word	0x0800676d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00b      	beq.n	800668c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	7c12      	ldrb	r2, [r2, #16]
 8006680:	f107 0108 	add.w	r1, r7, #8
 8006684:	4610      	mov	r0, r2
 8006686:	4798      	blx	r3
 8006688:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800668a:	e091      	b.n	80067b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fa95 	bl	8006bbe <USBD_CtlError>
            err++;
 8006694:	7afb      	ldrb	r3, [r7, #11]
 8006696:	3301      	adds	r3, #1
 8006698:	72fb      	strb	r3, [r7, #11]
          break;
 800669a:	e089      	b.n	80067b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00b      	beq.n	80066c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	7c12      	ldrb	r2, [r2, #16]
 80066b4:	f107 0108 	add.w	r1, r7, #8
 80066b8:	4610      	mov	r0, r2
 80066ba:	4798      	blx	r3
 80066bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066be:	e077      	b.n	80067b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fa7b 	bl	8006bbe <USBD_CtlError>
            err++;
 80066c8:	7afb      	ldrb	r3, [r7, #11]
 80066ca:	3301      	adds	r3, #1
 80066cc:	72fb      	strb	r3, [r7, #11]
          break;
 80066ce:	e06f      	b.n	80067b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00b      	beq.n	80066f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	7c12      	ldrb	r2, [r2, #16]
 80066e8:	f107 0108 	add.w	r1, r7, #8
 80066ec:	4610      	mov	r0, r2
 80066ee:	4798      	blx	r3
 80066f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066f2:	e05d      	b.n	80067b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fa61 	bl	8006bbe <USBD_CtlError>
            err++;
 80066fc:	7afb      	ldrb	r3, [r7, #11]
 80066fe:	3301      	adds	r3, #1
 8006700:	72fb      	strb	r3, [r7, #11]
          break;
 8006702:	e055      	b.n	80067b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00b      	beq.n	8006728 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	7c12      	ldrb	r2, [r2, #16]
 800671c:	f107 0108 	add.w	r1, r7, #8
 8006720:	4610      	mov	r0, r2
 8006722:	4798      	blx	r3
 8006724:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006726:	e043      	b.n	80067b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fa47 	bl	8006bbe <USBD_CtlError>
            err++;
 8006730:	7afb      	ldrb	r3, [r7, #11]
 8006732:	3301      	adds	r3, #1
 8006734:	72fb      	strb	r3, [r7, #11]
          break;
 8006736:	e03b      	b.n	80067b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800673e:	695b      	ldr	r3, [r3, #20]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00b      	beq.n	800675c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	7c12      	ldrb	r2, [r2, #16]
 8006750:	f107 0108 	add.w	r1, r7, #8
 8006754:	4610      	mov	r0, r2
 8006756:	4798      	blx	r3
 8006758:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800675a:	e029      	b.n	80067b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa2d 	bl	8006bbe <USBD_CtlError>
            err++;
 8006764:	7afb      	ldrb	r3, [r7, #11]
 8006766:	3301      	adds	r3, #1
 8006768:	72fb      	strb	r3, [r7, #11]
          break;
 800676a:	e021      	b.n	80067b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00b      	beq.n	8006790 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	7c12      	ldrb	r2, [r2, #16]
 8006784:	f107 0108 	add.w	r1, r7, #8
 8006788:	4610      	mov	r0, r2
 800678a:	4798      	blx	r3
 800678c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800678e:	e00f      	b.n	80067b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fa13 	bl	8006bbe <USBD_CtlError>
            err++;
 8006798:	7afb      	ldrb	r3, [r7, #11]
 800679a:	3301      	adds	r3, #1
 800679c:	72fb      	strb	r3, [r7, #11]
          break;
 800679e:	e007      	b.n	80067b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 fa0b 	bl	8006bbe <USBD_CtlError>
          err++;
 80067a8:	7afb      	ldrb	r3, [r7, #11]
 80067aa:	3301      	adds	r3, #1
 80067ac:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80067ae:	e038      	b.n	8006822 <USBD_GetDescriptor+0x286>
 80067b0:	e037      	b.n	8006822 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	7c1b      	ldrb	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c2:	f107 0208 	add.w	r2, r7, #8
 80067c6:	4610      	mov	r0, r2
 80067c8:	4798      	blx	r3
 80067ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067cc:	e029      	b.n	8006822 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 f9f4 	bl	8006bbe <USBD_CtlError>
        err++;
 80067d6:	7afb      	ldrb	r3, [r7, #11]
 80067d8:	3301      	adds	r3, #1
 80067da:	72fb      	strb	r3, [r7, #11]
      break;
 80067dc:	e021      	b.n	8006822 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	7c1b      	ldrb	r3, [r3, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10d      	bne.n	8006802 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ee:	f107 0208 	add.w	r2, r7, #8
 80067f2:	4610      	mov	r0, r2
 80067f4:	4798      	blx	r3
 80067f6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	2207      	movs	r2, #7
 80067fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006800:	e00f      	b.n	8006822 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006802:	6839      	ldr	r1, [r7, #0]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f9da 	bl	8006bbe <USBD_CtlError>
        err++;
 800680a:	7afb      	ldrb	r3, [r7, #11]
 800680c:	3301      	adds	r3, #1
 800680e:	72fb      	strb	r3, [r7, #11]
      break;
 8006810:	e007      	b.n	8006822 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f9d2 	bl	8006bbe <USBD_CtlError>
      err++;
 800681a:	7afb      	ldrb	r3, [r7, #11]
 800681c:	3301      	adds	r3, #1
 800681e:	72fb      	strb	r3, [r7, #11]
      break;
 8006820:	bf00      	nop
  }

  if (err != 0U)
 8006822:	7afb      	ldrb	r3, [r7, #11]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d11c      	bne.n	8006862 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8006828:	893b      	ldrh	r3, [r7, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d011      	beq.n	8006852 <USBD_GetDescriptor+0x2b6>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	88db      	ldrh	r3, [r3, #6]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00d      	beq.n	8006852 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	88da      	ldrh	r2, [r3, #6]
 800683a:	893b      	ldrh	r3, [r7, #8]
 800683c:	4293      	cmp	r3, r2
 800683e:	bf28      	it	cs
 8006840:	4613      	movcs	r3, r2
 8006842:	b29b      	uxth	r3, r3
 8006844:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006846:	893b      	ldrh	r3, [r7, #8]
 8006848:	461a      	mov	r2, r3
 800684a:	68f9      	ldr	r1, [r7, #12]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fa21 	bl	8006c94 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	88db      	ldrh	r3, [r3, #6]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d104      	bne.n	8006864 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fa78 	bl	8006d50 <USBD_CtlSendStatus>
 8006860:	e000      	b.n	8006864 <USBD_GetDescriptor+0x2c8>
    return;
 8006862:	bf00      	nop
    }
  }
}
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop

0800686c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	889b      	ldrh	r3, [r3, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d130      	bne.n	80068e0 <USBD_SetAddress+0x74>
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	88db      	ldrh	r3, [r3, #6]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d12c      	bne.n	80068e0 <USBD_SetAddress+0x74>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	885b      	ldrh	r3, [r3, #2]
 800688a:	2b7f      	cmp	r3, #127	; 0x7f
 800688c:	d828      	bhi.n	80068e0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	885b      	ldrh	r3, [r3, #2]
 8006892:	b2db      	uxtb	r3, r3
 8006894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006898:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d104      	bne.n	80068ae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f989 	bl	8006bbe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ac:	e01c      	b.n	80068e8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	7bfa      	ldrb	r2, [r7, #15]
 80068b2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fec0 	bl	8007640 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fa45 	bl	8006d50 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d004      	beq.n	80068d6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2202      	movs	r2, #2
 80068d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d4:	e008      	b.n	80068e8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068de:	e003      	b.n	80068e8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f96b 	bl	8006bbe <USBD_CtlError>
  }
}
 80068e8:	bf00      	nop
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	885b      	ldrh	r3, [r3, #2]
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	4b41      	ldr	r3, [pc, #260]	; (8006a08 <USBD_SetConfig+0x118>)
 8006902:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006904:	4b40      	ldr	r3, [pc, #256]	; (8006a08 <USBD_SetConfig+0x118>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d904      	bls.n	8006916 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f955 	bl	8006bbe <USBD_CtlError>
 8006914:	e075      	b.n	8006a02 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800691c:	2b02      	cmp	r3, #2
 800691e:	d002      	beq.n	8006926 <USBD_SetConfig+0x36>
 8006920:	2b03      	cmp	r3, #3
 8006922:	d023      	beq.n	800696c <USBD_SetConfig+0x7c>
 8006924:	e062      	b.n	80069ec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8006926:	4b38      	ldr	r3, [pc, #224]	; (8006a08 <USBD_SetConfig+0x118>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01a      	beq.n	8006964 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800692e:	4b36      	ldr	r3, [pc, #216]	; (8006a08 <USBD_SetConfig+0x118>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2203      	movs	r2, #3
 800693c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006940:	4b31      	ldr	r3, [pc, #196]	; (8006a08 <USBD_SetConfig+0x118>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff f9b4 	bl	8005cb4 <USBD_SetClassConfig>
 800694c:	4603      	mov	r3, r0
 800694e:	2b02      	cmp	r3, #2
 8006950:	d104      	bne.n	800695c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 f932 	bl	8006bbe <USBD_CtlError>
            return;
 800695a:	e052      	b.n	8006a02 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f9f7 	bl	8006d50 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006962:	e04e      	b.n	8006a02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f9f3 	bl	8006d50 <USBD_CtlSendStatus>
        break;
 800696a:	e04a      	b.n	8006a02 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800696c:	4b26      	ldr	r3, [pc, #152]	; (8006a08 <USBD_SetConfig+0x118>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d112      	bne.n	800699a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800697c:	4b22      	ldr	r3, [pc, #136]	; (8006a08 <USBD_SetConfig+0x118>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8006986:	4b20      	ldr	r3, [pc, #128]	; (8006a08 <USBD_SetConfig+0x118>)
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff f9b0 	bl	8005cf2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 f9dc 	bl	8006d50 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8006998:	e033      	b.n	8006a02 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800699a:	4b1b      	ldr	r3, [pc, #108]	; (8006a08 <USBD_SetConfig+0x118>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d01d      	beq.n	80069e4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f7ff f99e 	bl	8005cf2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80069b6:	4b14      	ldr	r3, [pc, #80]	; (8006a08 <USBD_SetConfig+0x118>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80069c0:	4b11      	ldr	r3, [pc, #68]	; (8006a08 <USBD_SetConfig+0x118>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	4619      	mov	r1, r3
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff f974 	bl	8005cb4 <USBD_SetClassConfig>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d104      	bne.n	80069dc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 f8f2 	bl	8006bbe <USBD_CtlError>
            return;
 80069da:	e012      	b.n	8006a02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f9b7 	bl	8006d50 <USBD_CtlSendStatus>
        break;
 80069e2:	e00e      	b.n	8006a02 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f9b3 	bl	8006d50 <USBD_CtlSendStatus>
        break;
 80069ea:	e00a      	b.n	8006a02 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f8e5 	bl	8006bbe <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80069f4:	4b04      	ldr	r3, [pc, #16]	; (8006a08 <USBD_SetConfig+0x118>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	4619      	mov	r1, r3
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff f979 	bl	8005cf2 <USBD_ClrClassConfig>
        break;
 8006a00:	bf00      	nop
    }
  }
}
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	24000204 	.word	0x24000204

08006a0c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	88db      	ldrh	r3, [r3, #6]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d004      	beq.n	8006a28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f8cc 	bl	8006bbe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a26:	e021      	b.n	8006a6c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	db17      	blt.n	8006a62 <USBD_GetConfig+0x56>
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	dd02      	ble.n	8006a3c <USBD_GetConfig+0x30>
 8006a36:	2b03      	cmp	r3, #3
 8006a38:	d00b      	beq.n	8006a52 <USBD_GetConfig+0x46>
 8006a3a:	e012      	b.n	8006a62 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3308      	adds	r3, #8
 8006a46:	2201      	movs	r2, #1
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f922 	bl	8006c94 <USBD_CtlSendData>
        break;
 8006a50:	e00c      	b.n	8006a6c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3304      	adds	r3, #4
 8006a56:	2201      	movs	r2, #1
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f91a 	bl	8006c94 <USBD_CtlSendData>
        break;
 8006a60:	e004      	b.n	8006a6c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f8aa 	bl	8006bbe <USBD_CtlError>
        break;
 8006a6a:	bf00      	nop
}
 8006a6c:	bf00      	nop
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a84:	3b01      	subs	r3, #1
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d81e      	bhi.n	8006ac8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	88db      	ldrh	r3, [r3, #6]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d004      	beq.n	8006a9c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f892 	bl	8006bbe <USBD_CtlError>
        break;
 8006a9a:	e01a      	b.n	8006ad2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d005      	beq.n	8006ab8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f043 0202 	orr.w	r2, r3, #2
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	330c      	adds	r3, #12
 8006abc:	2202      	movs	r2, #2
 8006abe:	4619      	mov	r1, r3
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f8e7 	bl	8006c94 <USBD_CtlSendData>
      break;
 8006ac6:	e004      	b.n	8006ad2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f877 	bl	8006bbe <USBD_CtlError>
      break;
 8006ad0:	bf00      	nop
  }
}
 8006ad2:	bf00      	nop
 8006ad4:	3708      	adds	r7, #8
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	885b      	ldrh	r3, [r3, #2]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d106      	bne.n	8006afa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 f92b 	bl	8006d50 <USBD_CtlSendStatus>
  }
}
 8006afa:	bf00      	nop
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b12:	3b01      	subs	r3, #1
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d80b      	bhi.n	8006b30 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	885b      	ldrh	r3, [r3, #2]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d10c      	bne.n	8006b3a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f911 	bl	8006d50 <USBD_CtlSendStatus>
      }
      break;
 8006b2e:	e004      	b.n	8006b3a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f843 	bl	8006bbe <USBD_CtlError>
      break;
 8006b38:	e000      	b.n	8006b3c <USBD_ClrFeature+0x3a>
      break;
 8006b3a:	bf00      	nop
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781a      	ldrb	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	785a      	ldrb	r2, [r3, #1]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	3302      	adds	r3, #2
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	3303      	adds	r3, #3
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	021b      	lsls	r3, r3, #8
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	4413      	add	r3, r2
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	b29a      	uxth	r2, r3
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	3305      	adds	r3, #5
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	021b      	lsls	r3, r3, #8
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	4413      	add	r3, r2
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	3306      	adds	r3, #6
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	b29a      	uxth	r2, r3
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	3307      	adds	r3, #7
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	021b      	lsls	r3, r3, #8
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	4413      	add	r3, r2
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	80da      	strh	r2, [r3, #6]

}
 8006bb2:	bf00      	nop
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr

08006bbe <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8006bc8:	2180      	movs	r1, #128	; 0x80
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fcce 	bl	800756c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 fcca 	bl	800756c <USBD_LL_StallEP>
}
 8006bd8:	bf00      	nop
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d032      	beq.n	8006c5c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f000 f834 	bl	8006c64 <USBD_GetLen>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	3301      	adds	r3, #1
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	75fa      	strb	r2, [r7, #23]
 8006c10:	461a      	mov	r2, r3
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	4413      	add	r3, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	7812      	ldrb	r2, [r2, #0]
 8006c1a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006c1c:	7dfb      	ldrb	r3, [r7, #23]
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	75fa      	strb	r2, [r7, #23]
 8006c22:	461a      	mov	r2, r3
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4413      	add	r3, r2
 8006c28:	2203      	movs	r2, #3
 8006c2a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006c2c:	e012      	b.n	8006c54 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	60fa      	str	r2, [r7, #12]
 8006c34:	7dfa      	ldrb	r2, [r7, #23]
 8006c36:	1c51      	adds	r1, r2, #1
 8006c38:	75f9      	strb	r1, [r7, #23]
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	440a      	add	r2, r1
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	1c5a      	adds	r2, r3, #1
 8006c48:	75fa      	strb	r2, [r7, #23]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	4413      	add	r3, r2
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1e8      	bne.n	8006c2e <USBD_GetString+0x4e>
    }
  }
}
 8006c5c:	bf00      	nop
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8006c70:	e005      	b.n	8006c7e <USBD_GetLen+0x1a>
  {
    len++;
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	3301      	adds	r3, #1
 8006c76:	73fb      	strb	r3, [r7, #15]
    buf++;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f5      	bne.n	8006c72 <USBD_GetLen+0xe>
  }

  return len;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006caa:	88fa      	ldrh	r2, [r7, #6]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006cb0:	88fa      	ldrh	r2, [r7, #6]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	2100      	movs	r1, #0
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 fcde 	bl	800767e <USBD_LL_Transmit>

  return USBD_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	4613      	mov	r3, r2
 8006cd8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cda:	88fb      	ldrh	r3, [r7, #6]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	2100      	movs	r1, #0
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 fccc 	bl	800767e <USBD_LL_Transmit>

  return USBD_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2203      	movs	r2, #3
 8006d02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d06:	88fa      	ldrh	r2, [r7, #6]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006d0e:	88fa      	ldrh	r2, [r7, #6]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d16:	88fb      	ldrh	r3, [r7, #6]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	2100      	movs	r1, #0
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 fcd1 	bl	80076c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d3a:	88fb      	ldrh	r3, [r7, #6]
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	2100      	movs	r1, #0
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 fcbf 	bl	80076c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2204      	movs	r2, #4
 8006d5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d60:	2300      	movs	r3, #0
 8006d62:	2200      	movs	r2, #0
 8006d64:	2100      	movs	r1, #0
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fc89 	bl	800767e <USBD_LL_Transmit>

  return USBD_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2205      	movs	r2, #5
 8006d82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d86:	2300      	movs	r3, #0
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fc99 	bl	80076c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006da0:	2200      	movs	r2, #0
 8006da2:	4913      	ldr	r1, [pc, #76]	; (8006df0 <MX_USB_DEVICE_Init+0x54>)
 8006da4:	4813      	ldr	r0, [pc, #76]	; (8006df4 <MX_USB_DEVICE_Init+0x58>)
 8006da6:	f7fe ff29 	bl	8005bfc <USBD_Init>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006db0:	f7f9 fb60 	bl	8000474 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006db4:	4910      	ldr	r1, [pc, #64]	; (8006df8 <MX_USB_DEVICE_Init+0x5c>)
 8006db6:	480f      	ldr	r0, [pc, #60]	; (8006df4 <MX_USB_DEVICE_Init+0x58>)
 8006db8:	f7fe ff4b 	bl	8005c52 <USBD_RegisterClass>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006dc2:	f7f9 fb57 	bl	8000474 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006dc6:	490d      	ldr	r1, [pc, #52]	; (8006dfc <MX_USB_DEVICE_Init+0x60>)
 8006dc8:	480a      	ldr	r0, [pc, #40]	; (8006df4 <MX_USB_DEVICE_Init+0x58>)
 8006dca:	f7fe fe79 	bl	8005ac0 <USBD_CDC_RegisterInterface>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006dd4:	f7f9 fb4e 	bl	8000474 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006dd8:	4806      	ldr	r0, [pc, #24]	; (8006df4 <MX_USB_DEVICE_Init+0x58>)
 8006dda:	f7fe ff54 	bl	8005c86 <USBD_Start>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006de4:	f7f9 fb46 	bl	8000474 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8006de8:	f7fb f9ec 	bl	80021c4 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006dec:	bf00      	nop
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	24000130 	.word	0x24000130
 8006df4:	24000214 	.word	0x24000214
 8006df8:	2400001c 	.word	0x2400001c
 8006dfc:	24000120 	.word	0x24000120

08006e00 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e04:	2200      	movs	r2, #0
 8006e06:	4905      	ldr	r1, [pc, #20]	; (8006e1c <CDC_Init_FS+0x1c>)
 8006e08:	4805      	ldr	r0, [pc, #20]	; (8006e20 <CDC_Init_FS+0x20>)
 8006e0a:	f7fe fe70 	bl	8005aee <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e0e:	4905      	ldr	r1, [pc, #20]	; (8006e24 <CDC_Init_FS+0x24>)
 8006e10:	4803      	ldr	r0, [pc, #12]	; (8006e20 <CDC_Init_FS+0x20>)
 8006e12:	f7fe fe86 	bl	8005b22 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e16:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	24000cd8 	.word	0x24000cd8
 8006e20:	24000214 	.word	0x24000214
 8006e24:	240004d8 	.word	0x240004d8

08006e28 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e2c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	4603      	mov	r3, r0
 8006e40:	6039      	str	r1, [r7, #0]
 8006e42:	71fb      	strb	r3, [r7, #7]
 8006e44:	4613      	mov	r3, r2
 8006e46:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e48:	79fb      	ldrb	r3, [r7, #7]
 8006e4a:	2b23      	cmp	r3, #35	; 0x23
 8006e4c:	d84a      	bhi.n	8006ee4 <CDC_Control_FS+0xac>
 8006e4e:	a201      	add	r2, pc, #4	; (adr r2, 8006e54 <CDC_Control_FS+0x1c>)
 8006e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e54:	08006ee5 	.word	0x08006ee5
 8006e58:	08006ee5 	.word	0x08006ee5
 8006e5c:	08006ee5 	.word	0x08006ee5
 8006e60:	08006ee5 	.word	0x08006ee5
 8006e64:	08006ee5 	.word	0x08006ee5
 8006e68:	08006ee5 	.word	0x08006ee5
 8006e6c:	08006ee5 	.word	0x08006ee5
 8006e70:	08006ee5 	.word	0x08006ee5
 8006e74:	08006ee5 	.word	0x08006ee5
 8006e78:	08006ee5 	.word	0x08006ee5
 8006e7c:	08006ee5 	.word	0x08006ee5
 8006e80:	08006ee5 	.word	0x08006ee5
 8006e84:	08006ee5 	.word	0x08006ee5
 8006e88:	08006ee5 	.word	0x08006ee5
 8006e8c:	08006ee5 	.word	0x08006ee5
 8006e90:	08006ee5 	.word	0x08006ee5
 8006e94:	08006ee5 	.word	0x08006ee5
 8006e98:	08006ee5 	.word	0x08006ee5
 8006e9c:	08006ee5 	.word	0x08006ee5
 8006ea0:	08006ee5 	.word	0x08006ee5
 8006ea4:	08006ee5 	.word	0x08006ee5
 8006ea8:	08006ee5 	.word	0x08006ee5
 8006eac:	08006ee5 	.word	0x08006ee5
 8006eb0:	08006ee5 	.word	0x08006ee5
 8006eb4:	08006ee5 	.word	0x08006ee5
 8006eb8:	08006ee5 	.word	0x08006ee5
 8006ebc:	08006ee5 	.word	0x08006ee5
 8006ec0:	08006ee5 	.word	0x08006ee5
 8006ec4:	08006ee5 	.word	0x08006ee5
 8006ec8:	08006ee5 	.word	0x08006ee5
 8006ecc:	08006ee5 	.word	0x08006ee5
 8006ed0:	08006ee5 	.word	0x08006ee5
 8006ed4:	08006ee5 	.word	0x08006ee5
 8006ed8:	08006ee5 	.word	0x08006ee5
 8006edc:	08006ee5 	.word	0x08006ee5
 8006ee0:	08006ee5 	.word	0x08006ee5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ee4:	bf00      	nop
  }

  return (USBD_OK);
 8006ee6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	4805      	ldr	r0, [pc, #20]	; (8006f18 <CDC_Receive_FS+0x24>)
 8006f02:	f7fe fe0e 	bl	8005b22 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f06:	4804      	ldr	r0, [pc, #16]	; (8006f18 <CDC_Receive_FS+0x24>)
 8006f08:	f7fe fe4e 	bl	8005ba8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f0c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	24000214 	.word	0x24000214

08006f1c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f2c:	4b0d      	ldr	r3, [pc, #52]	; (8006f64 <CDC_Transmit_FS+0x48>)
 8006f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f32:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e00b      	b.n	8006f5a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006f42:	887b      	ldrh	r3, [r7, #2]
 8006f44:	461a      	mov	r2, r3
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	4806      	ldr	r0, [pc, #24]	; (8006f64 <CDC_Transmit_FS+0x48>)
 8006f4a:	f7fe fdd0 	bl	8005aee <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006f4e:	4805      	ldr	r0, [pc, #20]	; (8006f64 <CDC_Transmit_FS+0x48>)
 8006f50:	f7fe fdfb 	bl	8005b4a <USBD_CDC_TransmitPacket>
 8006f54:	4603      	mov	r3, r0
 8006f56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	24000214 	.word	0x24000214

08006f68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2212      	movs	r2, #18
 8006f78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f7a:	4b03      	ldr	r3, [pc, #12]	; (8006f88 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	2400014c 	.word	0x2400014c

08006f8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	6039      	str	r1, [r7, #0]
 8006f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2204      	movs	r2, #4
 8006f9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f9e:	4b03      	ldr	r3, [pc, #12]	; (8006fac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	24000160 	.word	0x24000160

08006fb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	6039      	str	r1, [r7, #0]
 8006fba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d105      	bne.n	8006fce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	4907      	ldr	r1, [pc, #28]	; (8006fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fc6:	4808      	ldr	r0, [pc, #32]	; (8006fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fc8:	f7ff fe0a 	bl	8006be0 <USBD_GetString>
 8006fcc:	e004      	b.n	8006fd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	4904      	ldr	r1, [pc, #16]	; (8006fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fd2:	4805      	ldr	r0, [pc, #20]	; (8006fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fd4:	f7ff fe04 	bl	8006be0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fd8:	4b02      	ldr	r3, [pc, #8]	; (8006fe4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	240014d8 	.word	0x240014d8
 8006fe8:	08007998 	.word	0x08007998

08006fec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	4904      	ldr	r1, [pc, #16]	; (800700c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006ffc:	4804      	ldr	r0, [pc, #16]	; (8007010 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ffe:	f7ff fdef 	bl	8006be0 <USBD_GetString>
  return USBD_StrDesc;
 8007002:	4b02      	ldr	r3, [pc, #8]	; (800700c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007004:	4618      	mov	r0, r3
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	240014d8 	.word	0x240014d8
 8007010:	080079b0 	.word	0x080079b0

08007014 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	6039      	str	r1, [r7, #0]
 800701e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	221a      	movs	r2, #26
 8007024:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007026:	f000 f843 	bl	80070b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800702a:	4b02      	ldr	r3, [pc, #8]	; (8007034 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	24000164 	.word	0x24000164

08007038 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	6039      	str	r1, [r7, #0]
 8007042:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d105      	bne.n	8007056 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	4907      	ldr	r1, [pc, #28]	; (800706c <USBD_FS_ConfigStrDescriptor+0x34>)
 800704e:	4808      	ldr	r0, [pc, #32]	; (8007070 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007050:	f7ff fdc6 	bl	8006be0 <USBD_GetString>
 8007054:	e004      	b.n	8007060 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	4904      	ldr	r1, [pc, #16]	; (800706c <USBD_FS_ConfigStrDescriptor+0x34>)
 800705a:	4805      	ldr	r0, [pc, #20]	; (8007070 <USBD_FS_ConfigStrDescriptor+0x38>)
 800705c:	f7ff fdc0 	bl	8006be0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007060:	4b02      	ldr	r3, [pc, #8]	; (800706c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	240014d8 	.word	0x240014d8
 8007070:	080079c4 	.word	0x080079c4

08007074 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	4603      	mov	r3, r0
 800707c:	6039      	str	r1, [r7, #0]
 800707e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d105      	bne.n	8007092 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	4907      	ldr	r1, [pc, #28]	; (80070a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800708a:	4808      	ldr	r0, [pc, #32]	; (80070ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800708c:	f7ff fda8 	bl	8006be0 <USBD_GetString>
 8007090:	e004      	b.n	800709c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	4904      	ldr	r1, [pc, #16]	; (80070a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007096:	4805      	ldr	r0, [pc, #20]	; (80070ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007098:	f7ff fda2 	bl	8006be0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800709c:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	240014d8 	.word	0x240014d8
 80070ac:	080079d0 	.word	0x080079d0

080070b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80070b6:	4b0f      	ldr	r3, [pc, #60]	; (80070f4 <Get_SerialNum+0x44>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80070bc:	4b0e      	ldr	r3, [pc, #56]	; (80070f8 <Get_SerialNum+0x48>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80070c2:	4b0e      	ldr	r3, [pc, #56]	; (80070fc <Get_SerialNum+0x4c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4413      	add	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80070d6:	2208      	movs	r2, #8
 80070d8:	4909      	ldr	r1, [pc, #36]	; (8007100 <Get_SerialNum+0x50>)
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 f814 	bl	8007108 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80070e0:	2204      	movs	r2, #4
 80070e2:	4908      	ldr	r1, [pc, #32]	; (8007104 <Get_SerialNum+0x54>)
 80070e4:	68b8      	ldr	r0, [r7, #8]
 80070e6:	f000 f80f 	bl	8007108 <IntToUnicode>
  }
}
 80070ea:	bf00      	nop
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	1ff1e800 	.word	0x1ff1e800
 80070f8:	1ff1e804 	.word	0x1ff1e804
 80070fc:	1ff1e808 	.word	0x1ff1e808
 8007100:	24000166 	.word	0x24000166
 8007104:	24000176 	.word	0x24000176

08007108 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	4613      	mov	r3, r2
 8007114:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800711a:	2300      	movs	r3, #0
 800711c:	75fb      	strb	r3, [r7, #23]
 800711e:	e027      	b.n	8007170 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	0f1b      	lsrs	r3, r3, #28
 8007124:	2b09      	cmp	r3, #9
 8007126:	d80b      	bhi.n	8007140 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	0f1b      	lsrs	r3, r3, #28
 800712c:	b2da      	uxtb	r2, r3
 800712e:	7dfb      	ldrb	r3, [r7, #23]
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	4619      	mov	r1, r3
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	440b      	add	r3, r1
 8007138:	3230      	adds	r2, #48	; 0x30
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	701a      	strb	r2, [r3, #0]
 800713e:	e00a      	b.n	8007156 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	0f1b      	lsrs	r3, r3, #28
 8007144:	b2da      	uxtb	r2, r3
 8007146:	7dfb      	ldrb	r3, [r7, #23]
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	4619      	mov	r1, r3
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	440b      	add	r3, r1
 8007150:	3237      	adds	r2, #55	; 0x37
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	3301      	adds	r3, #1
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	4413      	add	r3, r2
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	3301      	adds	r3, #1
 800716e:	75fb      	strb	r3, [r7, #23]
 8007170:	7dfa      	ldrb	r2, [r7, #23]
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	429a      	cmp	r2, r3
 8007176:	d3d3      	bcc.n	8007120 <IntToUnicode+0x18>
  }
}
 8007178:	bf00      	nop
 800717a:	371c      	adds	r7, #28
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b08a      	sub	sp, #40	; 0x28
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800718c:	f107 0314 	add.w	r3, r7, #20
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	605a      	str	r2, [r3, #4]
 8007196:	609a      	str	r2, [r3, #8]
 8007198:	60da      	str	r2, [r3, #12]
 800719a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a1e      	ldr	r2, [pc, #120]	; (800721c <HAL_PCD_MspInit+0x98>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d136      	bne.n	8007214 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071a6:	4b1e      	ldr	r3, [pc, #120]	; (8007220 <HAL_PCD_MspInit+0x9c>)
 80071a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071ac:	4a1c      	ldr	r2, [pc, #112]	; (8007220 <HAL_PCD_MspInit+0x9c>)
 80071ae:	f043 0301 	orr.w	r3, r3, #1
 80071b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80071b6:	4b1a      	ldr	r3, [pc, #104]	; (8007220 <HAL_PCD_MspInit+0x9c>)
 80071b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80071c4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80071c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ca:	2302      	movs	r3, #2
 80071cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071d2:	2300      	movs	r3, #0
 80071d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80071d6:	230a      	movs	r3, #10
 80071d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071da:	f107 0314 	add.w	r3, r7, #20
 80071de:	4619      	mov	r1, r3
 80071e0:	4810      	ldr	r0, [pc, #64]	; (8007224 <HAL_PCD_MspInit+0xa0>)
 80071e2:	f7f9 fc29 	bl	8000a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80071e6:	4b0e      	ldr	r3, [pc, #56]	; (8007220 <HAL_PCD_MspInit+0x9c>)
 80071e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80071ec:	4a0c      	ldr	r2, [pc, #48]	; (8007220 <HAL_PCD_MspInit+0x9c>)
 80071ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80071f2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80071f6:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <HAL_PCD_MspInit+0x9c>)
 80071f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80071fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007204:	2200      	movs	r2, #0
 8007206:	2100      	movs	r1, #0
 8007208:	2065      	movs	r0, #101	; 0x65
 800720a:	f7f9 fbe0 	bl	80009ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800720e:	2065      	movs	r0, #101	; 0x65
 8007210:	f7f9 fbf7 	bl	8000a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007214:	bf00      	nop
 8007216:	3728      	adds	r7, #40	; 0x28
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	40080000 	.word	0x40080000
 8007220:	58024400 	.word	0x58024400
 8007224:	58020000 	.word	0x58020000

08007228 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800723c:	4619      	mov	r1, r3
 800723e:	4610      	mov	r0, r2
 8007240:	f7fe fd6a 	bl	8005d18 <USBD_LL_SetupStage>
}
 8007244:	bf00      	nop
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800725e:	78fa      	ldrb	r2, [r7, #3]
 8007260:	6879      	ldr	r1, [r7, #4]
 8007262:	4613      	mov	r3, r2
 8007264:	00db      	lsls	r3, r3, #3
 8007266:	1a9b      	subs	r3, r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	440b      	add	r3, r1
 800726c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	78fb      	ldrb	r3, [r7, #3]
 8007274:	4619      	mov	r1, r3
 8007276:	f7fe fd9a 	bl	8005dae <USBD_LL_DataOutStage>
}
 800727a:	bf00      	nop
 800727c:	3708      	adds	r7, #8
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b082      	sub	sp, #8
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
 800728a:	460b      	mov	r3, r1
 800728c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007294:	78fa      	ldrb	r2, [r7, #3]
 8007296:	6879      	ldr	r1, [r7, #4]
 8007298:	4613      	mov	r3, r2
 800729a:	00db      	lsls	r3, r3, #3
 800729c:	1a9b      	subs	r3, r3, r2
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	440b      	add	r3, r1
 80072a2:	3348      	adds	r3, #72	; 0x48
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	78fb      	ldrb	r3, [r7, #3]
 80072a8:	4619      	mov	r1, r3
 80072aa:	f7fe fdf1 	bl	8005e90 <USBD_LL_DataInStage>
}
 80072ae:	bf00      	nop
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072c4:	4618      	mov	r0, r3
 80072c6:	f7fe ff04 	bl	80060d2 <USBD_LL_SOF>
}
 80072ca:	bf00      	nop
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80072da:	2301      	movs	r3, #1
 80072dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d102      	bne.n	80072ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80072e6:	2300      	movs	r3, #0
 80072e8:	73fb      	strb	r3, [r7, #15]
 80072ea:	e008      	b.n	80072fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d102      	bne.n	80072fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80072f4:	2301      	movs	r3, #1
 80072f6:	73fb      	strb	r3, [r7, #15]
 80072f8:	e001      	b.n	80072fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80072fa:	f7f9 f8bb 	bl	8000474 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007304:	7bfa      	ldrb	r2, [r7, #15]
 8007306:	4611      	mov	r1, r2
 8007308:	4618      	mov	r0, r3
 800730a:	f7fe fea7 	bl	800605c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007314:	4618      	mov	r0, r3
 8007316:	f7fe fe60 	bl	8005fda <USBD_LL_Reset>
}
 800731a:	bf00      	nop
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
	...

08007324 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007332:	4618      	mov	r0, r3
 8007334:	f7fe fea2 	bl	800607c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	6812      	ldr	r2, [r2, #0]
 8007346:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800734a:	f043 0301 	orr.w	r3, r3, #1
 800734e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d005      	beq.n	8007364 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007358:	4b04      	ldr	r3, [pc, #16]	; (800736c <HAL_PCD_SuspendCallback+0x48>)
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	4a03      	ldr	r2, [pc, #12]	; (800736c <HAL_PCD_SuspendCallback+0x48>)
 800735e:	f043 0306 	orr.w	r3, r3, #6
 8007362:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	e000ed00 	.word	0xe000ed00

08007370 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b082      	sub	sp, #8
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800737e:	4618      	mov	r0, r3
 8007380:	f7fe fe91 	bl	80060a6 <USBD_LL_Resume>
}
 8007384:	bf00      	nop
 8007386:	3708      	adds	r7, #8
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	460b      	mov	r3, r1
 8007396:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800739e:	78fa      	ldrb	r2, [r7, #3]
 80073a0:	4611      	mov	r1, r2
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fe febc 	bl	8006120 <USBD_LL_IsoOUTIncomplete>
}
 80073a8:	bf00      	nop
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073c2:	78fa      	ldrb	r2, [r7, #3]
 80073c4:	4611      	mov	r1, r2
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe fe9d 	bl	8006106 <USBD_LL_IsoINIncomplete>
}
 80073cc:	bf00      	nop
 80073ce:	3708      	adds	r7, #8
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fea9 	bl	800613a <USBD_LL_DevConnected>
}
 80073e8:	bf00      	nop
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fe fea6 	bl	8006150 <USBD_LL_DevDisconnected>
}
 8007404:	bf00      	nop
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d13e      	bne.n	800749a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800741c:	4a21      	ldr	r2, [pc, #132]	; (80074a4 <USBD_LL_Init+0x98>)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a1f      	ldr	r2, [pc, #124]	; (80074a4 <USBD_LL_Init+0x98>)
 8007428:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800742c:	4b1d      	ldr	r3, [pc, #116]	; (80074a4 <USBD_LL_Init+0x98>)
 800742e:	4a1e      	ldr	r2, [pc, #120]	; (80074a8 <USBD_LL_Init+0x9c>)
 8007430:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8007432:	4b1c      	ldr	r3, [pc, #112]	; (80074a4 <USBD_LL_Init+0x98>)
 8007434:	2209      	movs	r2, #9
 8007436:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007438:	4b1a      	ldr	r3, [pc, #104]	; (80074a4 <USBD_LL_Init+0x98>)
 800743a:	2202      	movs	r2, #2
 800743c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800743e:	4b19      	ldr	r3, [pc, #100]	; (80074a4 <USBD_LL_Init+0x98>)
 8007440:	2200      	movs	r2, #0
 8007442:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007444:	4b17      	ldr	r3, [pc, #92]	; (80074a4 <USBD_LL_Init+0x98>)
 8007446:	2202      	movs	r2, #2
 8007448:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800744a:	4b16      	ldr	r3, [pc, #88]	; (80074a4 <USBD_LL_Init+0x98>)
 800744c:	2200      	movs	r2, #0
 800744e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007450:	4b14      	ldr	r3, [pc, #80]	; (80074a4 <USBD_LL_Init+0x98>)
 8007452:	2200      	movs	r2, #0
 8007454:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007456:	4b13      	ldr	r3, [pc, #76]	; (80074a4 <USBD_LL_Init+0x98>)
 8007458:	2200      	movs	r2, #0
 800745a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800745c:	4b11      	ldr	r3, [pc, #68]	; (80074a4 <USBD_LL_Init+0x98>)
 800745e:	2200      	movs	r2, #0
 8007460:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007462:	4b10      	ldr	r3, [pc, #64]	; (80074a4 <USBD_LL_Init+0x98>)
 8007464:	2200      	movs	r2, #0
 8007466:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007468:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <USBD_LL_Init+0x98>)
 800746a:	2200      	movs	r2, #0
 800746c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800746e:	480d      	ldr	r0, [pc, #52]	; (80074a4 <USBD_LL_Init+0x98>)
 8007470:	f7f9 fc92 	bl	8000d98 <HAL_PCD_Init>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800747a:	f7f8 fffb 	bl	8000474 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800747e:	2180      	movs	r1, #128	; 0x80
 8007480:	4808      	ldr	r0, [pc, #32]	; (80074a4 <USBD_LL_Init+0x98>)
 8007482:	f7fa fe24 	bl	80020ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007486:	2240      	movs	r2, #64	; 0x40
 8007488:	2100      	movs	r1, #0
 800748a:	4806      	ldr	r0, [pc, #24]	; (80074a4 <USBD_LL_Init+0x98>)
 800748c:	f7fa fdd8 	bl	8002040 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007490:	2280      	movs	r2, #128	; 0x80
 8007492:	2101      	movs	r1, #1
 8007494:	4803      	ldr	r0, [pc, #12]	; (80074a4 <USBD_LL_Init+0x98>)
 8007496:	f7fa fdd3 	bl	8002040 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	240016d8 	.word	0x240016d8
 80074a8:	40080000 	.word	0x40080000

080074ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074b4:	2300      	movs	r3, #0
 80074b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7f9 fd8c 	bl	8000fe0 <HAL_PCD_Start>
 80074c8:	4603      	mov	r3, r0
 80074ca:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	4618      	mov	r0, r3
 80074d0:	f000 f92e 	bl	8007730 <USBD_Get_USB_Status>
 80074d4:	4603      	mov	r3, r0
 80074d6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b084      	sub	sp, #16
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
 80074ea:	4608      	mov	r0, r1
 80074ec:	4611      	mov	r1, r2
 80074ee:	461a      	mov	r2, r3
 80074f0:	4603      	mov	r3, r0
 80074f2:	70fb      	strb	r3, [r7, #3]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70bb      	strb	r3, [r7, #2]
 80074f8:	4613      	mov	r3, r2
 80074fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800750a:	78bb      	ldrb	r3, [r7, #2]
 800750c:	883a      	ldrh	r2, [r7, #0]
 800750e:	78f9      	ldrb	r1, [r7, #3]
 8007510:	f7fa f99d 	bl	800184e <HAL_PCD_EP_Open>
 8007514:	4603      	mov	r3, r0
 8007516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	4618      	mov	r0, r3
 800751c:	f000 f908 	bl	8007730 <USBD_Get_USB_Status>
 8007520:	4603      	mov	r3, r0
 8007522:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007524:	7bbb      	ldrb	r3, [r7, #14]
}
 8007526:	4618      	mov	r0, r3
 8007528:	3710      	adds	r7, #16
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b084      	sub	sp, #16
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	460b      	mov	r3, r1
 8007538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800753a:	2300      	movs	r3, #0
 800753c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007548:	78fa      	ldrb	r2, [r7, #3]
 800754a:	4611      	mov	r1, r2
 800754c:	4618      	mov	r0, r3
 800754e:	f7fa f9e6 	bl	800191e <HAL_PCD_EP_Close>
 8007552:	4603      	mov	r3, r0
 8007554:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	4618      	mov	r0, r3
 800755a:	f000 f8e9 	bl	8007730 <USBD_Get_USB_Status>
 800755e:	4603      	mov	r3, r0
 8007560:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007562:	7bbb      	ldrb	r3, [r7, #14]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800757c:	2300      	movs	r3, #0
 800757e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007586:	78fa      	ldrb	r2, [r7, #3]
 8007588:	4611      	mov	r1, r2
 800758a:	4618      	mov	r0, r3
 800758c:	f7fa fabe 	bl	8001b0c <HAL_PCD_EP_SetStall>
 8007590:	4603      	mov	r3, r0
 8007592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 f8ca 	bl	8007730 <USBD_Get_USB_Status>
 800759c:	4603      	mov	r3, r0
 800759e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80075a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	460b      	mov	r3, r1
 80075b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075c4:	78fa      	ldrb	r2, [r7, #3]
 80075c6:	4611      	mov	r1, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fa fb03 	bl	8001bd4 <HAL_PCD_EP_ClrStall>
 80075ce:	4603      	mov	r3, r0
 80075d0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 f8ab 	bl	8007730 <USBD_Get_USB_Status>
 80075da:	4603      	mov	r3, r0
 80075dc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80075de:	7bbb      	ldrb	r3, [r7, #14]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075fa:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80075fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007600:	2b00      	cmp	r3, #0
 8007602:	da0b      	bge.n	800761c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007604:	78fb      	ldrb	r3, [r7, #3]
 8007606:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800760a:	68f9      	ldr	r1, [r7, #12]
 800760c:	4613      	mov	r3, r2
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	1a9b      	subs	r3, r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	440b      	add	r3, r1
 8007616:	333e      	adds	r3, #62	; 0x3e
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	e00b      	b.n	8007634 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800761c:	78fb      	ldrb	r3, [r7, #3]
 800761e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007622:	68f9      	ldr	r1, [r7, #12]
 8007624:	4613      	mov	r3, r2
 8007626:	00db      	lsls	r3, r3, #3
 8007628:	1a9b      	subs	r3, r3, r2
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	440b      	add	r3, r1
 800762e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007632:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007634:	4618      	mov	r0, r3
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	460b      	mov	r3, r1
 800764a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007650:	2300      	movs	r3, #0
 8007652:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800765a:	78fa      	ldrb	r2, [r7, #3]
 800765c:	4611      	mov	r1, r2
 800765e:	4618      	mov	r0, r3
 8007660:	f7fa f8d0 	bl	8001804 <HAL_PCD_SetAddress>
 8007664:	4603      	mov	r3, r0
 8007666:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	4618      	mov	r0, r3
 800766c:	f000 f860 	bl	8007730 <USBD_Get_USB_Status>
 8007670:	4603      	mov	r3, r0
 8007672:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007674:	7bbb      	ldrb	r3, [r7, #14]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b086      	sub	sp, #24
 8007682:	af00      	add	r7, sp, #0
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	607a      	str	r2, [r7, #4]
 8007688:	461a      	mov	r2, r3
 800768a:	460b      	mov	r3, r1
 800768c:	72fb      	strb	r3, [r7, #11]
 800768e:	4613      	mov	r3, r2
 8007690:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007692:	2300      	movs	r3, #0
 8007694:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076a0:	893b      	ldrh	r3, [r7, #8]
 80076a2:	7af9      	ldrb	r1, [r7, #11]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	f7fa f9e7 	bl	8001a78 <HAL_PCD_EP_Transmit>
 80076aa:	4603      	mov	r3, r0
 80076ac:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 f83d 	bl	8007730 <USBD_Get_USB_Status>
 80076b6:	4603      	mov	r3, r0
 80076b8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80076ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3718      	adds	r7, #24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	607a      	str	r2, [r7, #4]
 80076ce:	461a      	mov	r2, r3
 80076d0:	460b      	mov	r3, r1
 80076d2:	72fb      	strb	r3, [r7, #11]
 80076d4:	4613      	mov	r3, r2
 80076d6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076dc:	2300      	movs	r3, #0
 80076de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80076e6:	893b      	ldrh	r3, [r7, #8]
 80076e8:	7af9      	ldrb	r1, [r7, #11]
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	f7fa f961 	bl	80019b2 <HAL_PCD_EP_Receive>
 80076f0:	4603      	mov	r3, r0
 80076f2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80076f4:	7dfb      	ldrb	r3, [r7, #23]
 80076f6:	4618      	mov	r0, r3
 80076f8:	f000 f81a 	bl	8007730 <USBD_Get_USB_Status>
 80076fc:	4603      	mov	r3, r0
 80076fe:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007700:	7dbb      	ldrb	r3, [r7, #22]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3718      	adds	r7, #24
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
 8007712:	460b      	mov	r3, r1
 8007714:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800771c:	78fa      	ldrb	r2, [r7, #3]
 800771e:	4611      	mov	r1, r2
 8007720:	4618      	mov	r0, r3
 8007722:	f7fa f991 	bl	8001a48 <HAL_PCD_EP_GetRxCount>
 8007726:	4603      	mov	r3, r0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	2b03      	cmp	r3, #3
 8007742:	d817      	bhi.n	8007774 <USBD_Get_USB_Status+0x44>
 8007744:	a201      	add	r2, pc, #4	; (adr r2, 800774c <USBD_Get_USB_Status+0x1c>)
 8007746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774a:	bf00      	nop
 800774c:	0800775d 	.word	0x0800775d
 8007750:	08007763 	.word	0x08007763
 8007754:	08007769 	.word	0x08007769
 8007758:	0800776f 	.word	0x0800776f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]
    break;
 8007760:	e00b      	b.n	800777a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007762:	2302      	movs	r3, #2
 8007764:	73fb      	strb	r3, [r7, #15]
    break;
 8007766:	e008      	b.n	800777a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007768:	2301      	movs	r3, #1
 800776a:	73fb      	strb	r3, [r7, #15]
    break;
 800776c:	e005      	b.n	800777a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800776e:	2302      	movs	r3, #2
 8007770:	73fb      	strb	r3, [r7, #15]
    break;
 8007772:	e002      	b.n	800777a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007774:	2302      	movs	r3, #2
 8007776:	73fb      	strb	r3, [r7, #15]
    break;
 8007778:	bf00      	nop
  }
  return usb_status;
 800777a:	7bfb      	ldrb	r3, [r7, #15]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <__errno>:
 8007788:	4b01      	ldr	r3, [pc, #4]	; (8007790 <__errno+0x8>)
 800778a:	6818      	ldr	r0, [r3, #0]
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	24000180 	.word	0x24000180

08007794 <__libc_init_array>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	4e0d      	ldr	r6, [pc, #52]	; (80077cc <__libc_init_array+0x38>)
 8007798:	4c0d      	ldr	r4, [pc, #52]	; (80077d0 <__libc_init_array+0x3c>)
 800779a:	1ba4      	subs	r4, r4, r6
 800779c:	10a4      	asrs	r4, r4, #2
 800779e:	2500      	movs	r5, #0
 80077a0:	42a5      	cmp	r5, r4
 80077a2:	d109      	bne.n	80077b8 <__libc_init_array+0x24>
 80077a4:	4e0b      	ldr	r6, [pc, #44]	; (80077d4 <__libc_init_array+0x40>)
 80077a6:	4c0c      	ldr	r4, [pc, #48]	; (80077d8 <__libc_init_array+0x44>)
 80077a8:	f000 f8ea 	bl	8007980 <_init>
 80077ac:	1ba4      	subs	r4, r4, r6
 80077ae:	10a4      	asrs	r4, r4, #2
 80077b0:	2500      	movs	r5, #0
 80077b2:	42a5      	cmp	r5, r4
 80077b4:	d105      	bne.n	80077c2 <__libc_init_array+0x2e>
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077bc:	4798      	blx	r3
 80077be:	3501      	adds	r5, #1
 80077c0:	e7ee      	b.n	80077a0 <__libc_init_array+0xc>
 80077c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077c6:	4798      	blx	r3
 80077c8:	3501      	adds	r5, #1
 80077ca:	e7f2      	b.n	80077b2 <__libc_init_array+0x1e>
 80077cc:	080079f0 	.word	0x080079f0
 80077d0:	080079f0 	.word	0x080079f0
 80077d4:	080079f0 	.word	0x080079f0
 80077d8:	080079f4 	.word	0x080079f4

080077dc <malloc>:
 80077dc:	4b02      	ldr	r3, [pc, #8]	; (80077e8 <malloc+0xc>)
 80077de:	4601      	mov	r1, r0
 80077e0:	6818      	ldr	r0, [r3, #0]
 80077e2:	f000 b861 	b.w	80078a8 <_malloc_r>
 80077e6:	bf00      	nop
 80077e8:	24000180 	.word	0x24000180

080077ec <free>:
 80077ec:	4b02      	ldr	r3, [pc, #8]	; (80077f8 <free+0xc>)
 80077ee:	4601      	mov	r1, r0
 80077f0:	6818      	ldr	r0, [r3, #0]
 80077f2:	f000 b80b 	b.w	800780c <_free_r>
 80077f6:	bf00      	nop
 80077f8:	24000180 	.word	0x24000180

080077fc <memset>:
 80077fc:	4402      	add	r2, r0
 80077fe:	4603      	mov	r3, r0
 8007800:	4293      	cmp	r3, r2
 8007802:	d100      	bne.n	8007806 <memset+0xa>
 8007804:	4770      	bx	lr
 8007806:	f803 1b01 	strb.w	r1, [r3], #1
 800780a:	e7f9      	b.n	8007800 <memset+0x4>

0800780c <_free_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4605      	mov	r5, r0
 8007810:	2900      	cmp	r1, #0
 8007812:	d045      	beq.n	80078a0 <_free_r+0x94>
 8007814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007818:	1f0c      	subs	r4, r1, #4
 800781a:	2b00      	cmp	r3, #0
 800781c:	bfb8      	it	lt
 800781e:	18e4      	addlt	r4, r4, r3
 8007820:	f000 f8ac 	bl	800797c <__malloc_lock>
 8007824:	4a1f      	ldr	r2, [pc, #124]	; (80078a4 <_free_r+0x98>)
 8007826:	6813      	ldr	r3, [r2, #0]
 8007828:	4610      	mov	r0, r2
 800782a:	b933      	cbnz	r3, 800783a <_free_r+0x2e>
 800782c:	6063      	str	r3, [r4, #4]
 800782e:	6014      	str	r4, [r2, #0]
 8007830:	4628      	mov	r0, r5
 8007832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007836:	f000 b8a2 	b.w	800797e <__malloc_unlock>
 800783a:	42a3      	cmp	r3, r4
 800783c:	d90c      	bls.n	8007858 <_free_r+0x4c>
 800783e:	6821      	ldr	r1, [r4, #0]
 8007840:	1862      	adds	r2, r4, r1
 8007842:	4293      	cmp	r3, r2
 8007844:	bf04      	itt	eq
 8007846:	681a      	ldreq	r2, [r3, #0]
 8007848:	685b      	ldreq	r3, [r3, #4]
 800784a:	6063      	str	r3, [r4, #4]
 800784c:	bf04      	itt	eq
 800784e:	1852      	addeq	r2, r2, r1
 8007850:	6022      	streq	r2, [r4, #0]
 8007852:	6004      	str	r4, [r0, #0]
 8007854:	e7ec      	b.n	8007830 <_free_r+0x24>
 8007856:	4613      	mov	r3, r2
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	b10a      	cbz	r2, 8007860 <_free_r+0x54>
 800785c:	42a2      	cmp	r2, r4
 800785e:	d9fa      	bls.n	8007856 <_free_r+0x4a>
 8007860:	6819      	ldr	r1, [r3, #0]
 8007862:	1858      	adds	r0, r3, r1
 8007864:	42a0      	cmp	r0, r4
 8007866:	d10b      	bne.n	8007880 <_free_r+0x74>
 8007868:	6820      	ldr	r0, [r4, #0]
 800786a:	4401      	add	r1, r0
 800786c:	1858      	adds	r0, r3, r1
 800786e:	4282      	cmp	r2, r0
 8007870:	6019      	str	r1, [r3, #0]
 8007872:	d1dd      	bne.n	8007830 <_free_r+0x24>
 8007874:	6810      	ldr	r0, [r2, #0]
 8007876:	6852      	ldr	r2, [r2, #4]
 8007878:	605a      	str	r2, [r3, #4]
 800787a:	4401      	add	r1, r0
 800787c:	6019      	str	r1, [r3, #0]
 800787e:	e7d7      	b.n	8007830 <_free_r+0x24>
 8007880:	d902      	bls.n	8007888 <_free_r+0x7c>
 8007882:	230c      	movs	r3, #12
 8007884:	602b      	str	r3, [r5, #0]
 8007886:	e7d3      	b.n	8007830 <_free_r+0x24>
 8007888:	6820      	ldr	r0, [r4, #0]
 800788a:	1821      	adds	r1, r4, r0
 800788c:	428a      	cmp	r2, r1
 800788e:	bf04      	itt	eq
 8007890:	6811      	ldreq	r1, [r2, #0]
 8007892:	6852      	ldreq	r2, [r2, #4]
 8007894:	6062      	str	r2, [r4, #4]
 8007896:	bf04      	itt	eq
 8007898:	1809      	addeq	r1, r1, r0
 800789a:	6021      	streq	r1, [r4, #0]
 800789c:	605c      	str	r4, [r3, #4]
 800789e:	e7c7      	b.n	8007830 <_free_r+0x24>
 80078a0:	bd38      	pop	{r3, r4, r5, pc}
 80078a2:	bf00      	nop
 80078a4:	24000208 	.word	0x24000208

080078a8 <_malloc_r>:
 80078a8:	b570      	push	{r4, r5, r6, lr}
 80078aa:	1ccd      	adds	r5, r1, #3
 80078ac:	f025 0503 	bic.w	r5, r5, #3
 80078b0:	3508      	adds	r5, #8
 80078b2:	2d0c      	cmp	r5, #12
 80078b4:	bf38      	it	cc
 80078b6:	250c      	movcc	r5, #12
 80078b8:	2d00      	cmp	r5, #0
 80078ba:	4606      	mov	r6, r0
 80078bc:	db01      	blt.n	80078c2 <_malloc_r+0x1a>
 80078be:	42a9      	cmp	r1, r5
 80078c0:	d903      	bls.n	80078ca <_malloc_r+0x22>
 80078c2:	230c      	movs	r3, #12
 80078c4:	6033      	str	r3, [r6, #0]
 80078c6:	2000      	movs	r0, #0
 80078c8:	bd70      	pop	{r4, r5, r6, pc}
 80078ca:	f000 f857 	bl	800797c <__malloc_lock>
 80078ce:	4a21      	ldr	r2, [pc, #132]	; (8007954 <_malloc_r+0xac>)
 80078d0:	6814      	ldr	r4, [r2, #0]
 80078d2:	4621      	mov	r1, r4
 80078d4:	b991      	cbnz	r1, 80078fc <_malloc_r+0x54>
 80078d6:	4c20      	ldr	r4, [pc, #128]	; (8007958 <_malloc_r+0xb0>)
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	b91b      	cbnz	r3, 80078e4 <_malloc_r+0x3c>
 80078dc:	4630      	mov	r0, r6
 80078de:	f000 f83d 	bl	800795c <_sbrk_r>
 80078e2:	6020      	str	r0, [r4, #0]
 80078e4:	4629      	mov	r1, r5
 80078e6:	4630      	mov	r0, r6
 80078e8:	f000 f838 	bl	800795c <_sbrk_r>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	d124      	bne.n	800793a <_malloc_r+0x92>
 80078f0:	230c      	movs	r3, #12
 80078f2:	6033      	str	r3, [r6, #0]
 80078f4:	4630      	mov	r0, r6
 80078f6:	f000 f842 	bl	800797e <__malloc_unlock>
 80078fa:	e7e4      	b.n	80078c6 <_malloc_r+0x1e>
 80078fc:	680b      	ldr	r3, [r1, #0]
 80078fe:	1b5b      	subs	r3, r3, r5
 8007900:	d418      	bmi.n	8007934 <_malloc_r+0x8c>
 8007902:	2b0b      	cmp	r3, #11
 8007904:	d90f      	bls.n	8007926 <_malloc_r+0x7e>
 8007906:	600b      	str	r3, [r1, #0]
 8007908:	50cd      	str	r5, [r1, r3]
 800790a:	18cc      	adds	r4, r1, r3
 800790c:	4630      	mov	r0, r6
 800790e:	f000 f836 	bl	800797e <__malloc_unlock>
 8007912:	f104 000b 	add.w	r0, r4, #11
 8007916:	1d23      	adds	r3, r4, #4
 8007918:	f020 0007 	bic.w	r0, r0, #7
 800791c:	1ac3      	subs	r3, r0, r3
 800791e:	d0d3      	beq.n	80078c8 <_malloc_r+0x20>
 8007920:	425a      	negs	r2, r3
 8007922:	50e2      	str	r2, [r4, r3]
 8007924:	e7d0      	b.n	80078c8 <_malloc_r+0x20>
 8007926:	428c      	cmp	r4, r1
 8007928:	684b      	ldr	r3, [r1, #4]
 800792a:	bf16      	itet	ne
 800792c:	6063      	strne	r3, [r4, #4]
 800792e:	6013      	streq	r3, [r2, #0]
 8007930:	460c      	movne	r4, r1
 8007932:	e7eb      	b.n	800790c <_malloc_r+0x64>
 8007934:	460c      	mov	r4, r1
 8007936:	6849      	ldr	r1, [r1, #4]
 8007938:	e7cc      	b.n	80078d4 <_malloc_r+0x2c>
 800793a:	1cc4      	adds	r4, r0, #3
 800793c:	f024 0403 	bic.w	r4, r4, #3
 8007940:	42a0      	cmp	r0, r4
 8007942:	d005      	beq.n	8007950 <_malloc_r+0xa8>
 8007944:	1a21      	subs	r1, r4, r0
 8007946:	4630      	mov	r0, r6
 8007948:	f000 f808 	bl	800795c <_sbrk_r>
 800794c:	3001      	adds	r0, #1
 800794e:	d0cf      	beq.n	80078f0 <_malloc_r+0x48>
 8007950:	6025      	str	r5, [r4, #0]
 8007952:	e7db      	b.n	800790c <_malloc_r+0x64>
 8007954:	24000208 	.word	0x24000208
 8007958:	2400020c 	.word	0x2400020c

0800795c <_sbrk_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4c06      	ldr	r4, [pc, #24]	; (8007978 <_sbrk_r+0x1c>)
 8007960:	2300      	movs	r3, #0
 8007962:	4605      	mov	r5, r0
 8007964:	4608      	mov	r0, r1
 8007966:	6023      	str	r3, [r4, #0]
 8007968:	f7f8 fdde 	bl	8000528 <_sbrk>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_sbrk_r+0x1a>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	b103      	cbz	r3, 8007976 <_sbrk_r+0x1a>
 8007974:	602b      	str	r3, [r5, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	24001ae0 	.word	0x24001ae0

0800797c <__malloc_lock>:
 800797c:	4770      	bx	lr

0800797e <__malloc_unlock>:
 800797e:	4770      	bx	lr

08007980 <_init>:
 8007980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007982:	bf00      	nop
 8007984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007986:	bc08      	pop	{r3}
 8007988:	469e      	mov	lr, r3
 800798a:	4770      	bx	lr

0800798c <_fini>:
 800798c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798e:	bf00      	nop
 8007990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007992:	bc08      	pop	{r3}
 8007994:	469e      	mov	lr, r3
 8007996:	4770      	bx	lr
