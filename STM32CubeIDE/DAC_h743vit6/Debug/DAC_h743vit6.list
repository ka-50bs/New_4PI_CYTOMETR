
DAC_h743vit6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000194c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001be4  08001be4  00011be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bf4  08001bf4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08001bf4  08001bf4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bf4  08001bf4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bf4  08001bf4  00011bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bf8  08001bf8  00011bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08001bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  24000010  08001c0c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000030  08001c0c  00020030  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c07b  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000173c  00000000  00000000  0002c0b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000618  00000000  00000000  0002d7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000580  00000000  00000000  0002de10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033a9d  00000000  00000000  0002e390  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000597b  00000000  00000000  00061e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0014ab5c  00000000  00000000  000677a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b2304  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001708  00000000  00000000  001b2380  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08001bcc 	.word	0x08001bcc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08001bcc 	.word	0x08001bcc

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002dc:	f000 f988 	bl	80005f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e0:	f000 f80c 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e4:	f000 f874 	bl	80003d0 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80002e8:	2101      	movs	r1, #1
 80002ea:	4803      	ldr	r0, [pc, #12]	; (80002f8 <main+0x20>)
 80002ec:	f000 fced 	bl	8000cca <HAL_GPIO_TogglePin>
	  HAL_Delay(10);
 80002f0:	200a      	movs	r0, #10
 80002f2:	f000 fa0f 	bl	8000714 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80002f6:	e7f7      	b.n	80002e8 <main+0x10>
 80002f8:	58020000 	.word	0x58020000

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b09c      	sub	sp, #112	; 0x70
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000306:	224c      	movs	r2, #76	; 0x4c
 8000308:	2100      	movs	r1, #0
 800030a:	4618      	mov	r0, r3
 800030c:	f001 fc56 	bl	8001bbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2220      	movs	r2, #32
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f001 fc50 	bl	8001bbc <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800031c:	2002      	movs	r0, #2
 800031e:	f000 fcef 	bl	8000d00 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000322:	2300      	movs	r3, #0
 8000324:	603b      	str	r3, [r7, #0]
 8000326:	4b28      	ldr	r3, [pc, #160]	; (80003c8 <SystemClock_Config+0xcc>)
 8000328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800032a:	4a27      	ldr	r2, [pc, #156]	; (80003c8 <SystemClock_Config+0xcc>)
 800032c:	f023 0301 	bic.w	r3, r3, #1
 8000330:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000332:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <SystemClock_Config+0xcc>)
 8000334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	603b      	str	r3, [r7, #0]
 800033c:	4b23      	ldr	r3, [pc, #140]	; (80003cc <SystemClock_Config+0xd0>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000344:	4a21      	ldr	r2, [pc, #132]	; (80003cc <SystemClock_Config+0xd0>)
 8000346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <SystemClock_Config+0xd0>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000358:	bf00      	nop
 800035a:	4b1c      	ldr	r3, [pc, #112]	; (80003cc <SystemClock_Config+0xd0>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000366:	d1f8      	bne.n	800035a <SystemClock_Config+0x5e>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000368:	2302      	movs	r3, #2
 800036a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800036c:	2301      	movs	r3, #1
 800036e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000370:	2340      	movs	r3, #64	; 0x40
 8000372:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000374:	2300      	movs	r3, #0
 8000376:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800037c:	4618      	mov	r0, r3
 800037e:	f000 fcf9 	bl	8000d74 <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000388:	f000 f856 	bl	8000438 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038c:	233f      	movs	r3, #63	; 0x3f
 800038e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000390:	2300      	movs	r3, #0
 8000392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003a0:	2300      	movs	r3, #0
 80003a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2100      	movs	r1, #0
 80003b0:	4618      	mov	r0, r3
 80003b2:	f001 f8b7 	bl	8001524 <HAL_RCC_ClockConfig>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80003bc:	f000 f83c 	bl	8000438 <Error_Handler>
  }
}
 80003c0:	bf00      	nop
 80003c2:	3770      	adds	r7, #112	; 0x70
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	58000400 	.word	0x58000400
 80003cc:	58024800 	.word	0x58024800

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e4:	4b12      	ldr	r3, [pc, #72]	; (8000430 <MX_GPIO_Init+0x60>)
 80003e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ea:	4a11      	ldr	r2, [pc, #68]	; (8000430 <MX_GPIO_Init+0x60>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003f4:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <MX_GPIO_Init+0x60>)
 80003f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	603b      	str	r3, [r7, #0]
 8000400:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000402:	2200      	movs	r2, #0
 8000404:	2101      	movs	r1, #1
 8000406:	480b      	ldr	r0, [pc, #44]	; (8000434 <MX_GPIO_Init+0x64>)
 8000408:	f000 fc46 	bl	8000c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800040c:	2301      	movs	r3, #1
 800040e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000410:	2301      	movs	r3, #1
 8000412:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000418:	2300      	movs	r3, #0
 800041a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	4619      	mov	r1, r3
 8000420:	4804      	ldr	r0, [pc, #16]	; (8000434 <MX_GPIO_Init+0x64>)
 8000422:	f000 fa89 	bl	8000938 <HAL_GPIO_Init>

}
 8000426:	bf00      	nop
 8000428:	3718      	adds	r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	58024400 	.word	0x58024400
 8000434:	58020000 	.word	0x58020000

08000438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
	...

08000448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044e:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <HAL_MspInit+0x30>)
 8000450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000454:	4a08      	ldr	r2, [pc, #32]	; (8000478 <HAL_MspInit+0x30>)
 8000456:	f043 0302 	orr.w	r3, r3, #2
 800045a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <HAL_MspInit+0x30>)
 8000460:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000464:	f003 0302 	and.w	r3, r3, #2
 8000468:	607b      	str	r3, [r7, #4]
 800046a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	58024400 	.word	0x58024400

0800047c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr

0800048a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048e:	e7fe      	b.n	800048e <HardFault_Handler+0x4>

08000490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000494:	e7fe      	b.n	8000494 <MemManage_Handler+0x4>

08000496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049a:	e7fe      	b.n	800049a <BusFault_Handler+0x4>

0800049c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <UsageFault_Handler+0x4>

080004a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d0:	f000 f900 	bl	80006d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80004dc:	4b29      	ldr	r3, [pc, #164]	; (8000584 <SystemInit+0xac>)
 80004de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004e2:	4a28      	ldr	r2, [pc, #160]	; (8000584 <SystemInit+0xac>)
 80004e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80004ec:	4b26      	ldr	r3, [pc, #152]	; (8000588 <SystemInit+0xb0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a25      	ldr	r2, [pc, #148]	; (8000588 <SystemInit+0xb0>)
 80004f2:	f043 0301 	orr.w	r3, r3, #1
 80004f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004f8:	4b23      	ldr	r3, [pc, #140]	; (8000588 <SystemInit+0xb0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80004fe:	4b22      	ldr	r3, [pc, #136]	; (8000588 <SystemInit+0xb0>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	4921      	ldr	r1, [pc, #132]	; (8000588 <SystemInit+0xb0>)
 8000504:	4b21      	ldr	r3, [pc, #132]	; (800058c <SystemInit+0xb4>)
 8000506:	4013      	ands	r3, r2
 8000508:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800050a:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <SystemInit+0xb0>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000510:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <SystemInit+0xb0>)
 8000512:	2200      	movs	r2, #0
 8000514:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000516:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <SystemInit+0xb0>)
 8000518:	2200      	movs	r2, #0
 800051a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 800051c:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <SystemInit+0xb0>)
 800051e:	2200      	movs	r2, #0
 8000520:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000522:	4b19      	ldr	r3, [pc, #100]	; (8000588 <SystemInit+0xb0>)
 8000524:	2200      	movs	r2, #0
 8000526:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000528:	4b17      	ldr	r3, [pc, #92]	; (8000588 <SystemInit+0xb0>)
 800052a:	2200      	movs	r2, #0
 800052c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <SystemInit+0xb0>)
 8000530:	2200      	movs	r2, #0
 8000532:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <SystemInit+0xb0>)
 8000536:	2200      	movs	r2, #0
 8000538:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <SystemInit+0xb0>)
 800053c:	2200      	movs	r2, #0
 800053e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <SystemInit+0xb0>)
 8000542:	2200      	movs	r2, #0
 8000544:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <SystemInit+0xb0>)
 8000548:	2200      	movs	r2, #0
 800054a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <SystemInit+0xb0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0d      	ldr	r2, [pc, #52]	; (8000588 <SystemInit+0xb0>)
 8000552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000556:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <SystemInit+0xb0>)
 800055a:	2200      	movs	r2, #0
 800055c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800055e:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <SystemInit+0xb8>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <SystemInit+0xbc>)
 8000564:	4013      	ands	r3, r2
 8000566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800056a:	d202      	bcs.n	8000572 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <SystemInit+0xc0>)
 800056e:	2201      	movs	r2, #1
 8000570:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000572:	4b04      	ldr	r3, [pc, #16]	; (8000584 <SystemInit+0xac>)
 8000574:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000578:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	e000ed00 	.word	0xe000ed00
 8000588:	58024400 	.word	0x58024400
 800058c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000590:	5c001000 	.word	0x5c001000
 8000594:	ffff0000 	.word	0xffff0000
 8000598:	51008108 	.word	0x51008108

0800059c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800059c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80005a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80005a2:	e003      	b.n	80005ac <LoopCopyDataInit>

080005a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80005a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80005a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80005aa:	3104      	adds	r1, #4

080005ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80005ae:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80005b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80005b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80005b4:	d3f6      	bcc.n	80005a4 <CopyDataInit>
  ldr  r2, =_sbss
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80005b8:	e002      	b.n	80005c0 <LoopFillZerobss>

080005ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80005ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80005bc:	f842 3b04 	str.w	r3, [r2], #4

080005c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80005c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80005c4:	d3f9      	bcc.n	80005ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005c6:	f7ff ff87 	bl	80004d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ca:	f001 fad3 	bl	8001b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ce:	f7ff fe83 	bl	80002d8 <main>
  bx  lr    
 80005d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005d4:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80005d8:	08001bfc 	.word	0x08001bfc
  ldr  r0, =_sdata
 80005dc:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80005e0:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 80005e4:	24000010 	.word	0x24000010
  ldr  r3, = _ebss
 80005e8:	24000030 	.word	0x24000030

080005ec <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC3_IRQHandler>
	...

080005f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f6:	2003      	movs	r0, #3
 80005f8:	f000 f96c 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80005fc:	f001 f948 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 8000600:	4601      	mov	r1, r0
 8000602:	4b15      	ldr	r3, [pc, #84]	; (8000658 <HAL_Init+0x68>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	0a1b      	lsrs	r3, r3, #8
 8000608:	f003 030f 	and.w	r3, r3, #15
 800060c:	4a13      	ldr	r2, [pc, #76]	; (800065c <HAL_Init+0x6c>)
 800060e:	5cd3      	ldrb	r3, [r2, r3]
 8000610:	f003 031f 	and.w	r3, r3, #31
 8000614:	fa21 f303 	lsr.w	r3, r1, r3
 8000618:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <HAL_Init+0x68>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <HAL_Init+0x6c>)
 8000624:	5cd3      	ldrb	r3, [r2, r3]
 8000626:	f003 031f 	and.w	r3, r3, #31
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	fa22 f303 	lsr.w	r3, r2, r3
 8000630:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <HAL_Init+0x70>)
 8000632:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000634:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <HAL_Init+0x74>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800063a:	2000      	movs	r0, #0
 800063c:	f000 f814 	bl	8000668 <HAL_InitTick>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	e002      	b.n	8000650 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800064a:	f7ff fefd 	bl	8000448 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800064e:	2300      	movs	r3, #0
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	58024400 	.word	0x58024400
 800065c:	08001be4 	.word	0x08001be4
 8000660:	24000004 	.word	0x24000004
 8000664:	24000000 	.word	0x24000000

08000668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000670:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <HAL_InitTick+0x60>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d101      	bne.n	800067c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000678:	2301      	movs	r3, #1
 800067a:	e021      	b.n	80006c0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <HAL_InitTick+0x64>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <HAL_InitTick+0x60>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068a:	fbb3 f3f1 	udiv	r3, r3, r1
 800068e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f000 f943 	bl	800091e <HAL_SYSTICK_Config>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800069e:	2301      	movs	r3, #1
 80006a0:	e00e      	b.n	80006c0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2b0f      	cmp	r3, #15
 80006a6:	d80a      	bhi.n	80006be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a8:	2200      	movs	r2, #0
 80006aa:	6879      	ldr	r1, [r7, #4]
 80006ac:	f04f 30ff 	mov.w	r0, #4294967295
 80006b0:	f000 f91b 	bl	80008ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <HAL_InitTick+0x68>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e000      	b.n	80006c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2400000c 	.word	0x2400000c
 80006cc:	24000000 	.word	0x24000000
 80006d0:	24000008 	.word	0x24000008

080006d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_IncTick+0x20>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <HAL_IncTick+0x24>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4413      	add	r3, r2
 80006e4:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <HAL_IncTick+0x24>)
 80006e6:	6013      	str	r3, [r2, #0]
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	2400000c 	.word	0x2400000c
 80006f8:	2400002c 	.word	0x2400002c

080006fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000700:	4b03      	ldr	r3, [pc, #12]	; (8000710 <HAL_GetTick+0x14>)
 8000702:	681b      	ldr	r3, [r3, #0]
}
 8000704:	4618      	mov	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	2400002c 	.word	0x2400002c

08000714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800071c:	f7ff ffee 	bl	80006fc <HAL_GetTick>
 8000720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800072c:	d005      	beq.n	800073a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <HAL_Delay+0x40>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	461a      	mov	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	4413      	add	r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800073a:	bf00      	nop
 800073c:	f7ff ffde 	bl	80006fc <HAL_GetTick>
 8000740:	4602      	mov	r2, r0
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	429a      	cmp	r2, r3
 800074a:	d8f7      	bhi.n	800073c <HAL_Delay+0x28>
  {
  }
}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2400000c 	.word	0x2400000c

08000758 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <HAL_GetREVID+0x14>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	0c1b      	lsrs	r3, r3, #16
}
 8000762:	4618      	mov	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	5c001000 	.word	0x5c001000

08000770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f003 0307 	and.w	r3, r3, #7
 800077e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000780:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <__NVIC_SetPriorityGrouping+0x40>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800078c:	4013      	ands	r3, r2
 800078e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <__NVIC_SetPriorityGrouping+0x44>)
 800079a:	4313      	orrs	r3, r2
 800079c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <__NVIC_SetPriorityGrouping+0x40>)
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	60d3      	str	r3, [r2, #12]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000ed00 	.word	0xe000ed00
 80007b4:	05fa0000 	.word	0x05fa0000

080007b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007bc:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <__NVIC_GetPriorityGrouping+0x18>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	f003 0307 	and.w	r3, r3, #7
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	6039      	str	r1, [r7, #0]
 80007de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80007e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	db0a      	blt.n	80007fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	490c      	ldr	r1, [pc, #48]	; (8000820 <__NVIC_SetPriority+0x4c>)
 80007ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007f2:	0112      	lsls	r2, r2, #4
 80007f4:	b2d2      	uxtb	r2, r2
 80007f6:	440b      	add	r3, r1
 80007f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007fc:	e00a      	b.n	8000814 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4908      	ldr	r1, [pc, #32]	; (8000824 <__NVIC_SetPriority+0x50>)
 8000804:	88fb      	ldrh	r3, [r7, #6]
 8000806:	f003 030f 	and.w	r3, r3, #15
 800080a:	3b04      	subs	r3, #4
 800080c:	0112      	lsls	r2, r2, #4
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	440b      	add	r3, r1
 8000812:	761a      	strb	r2, [r3, #24]
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	e000e100 	.word	0xe000e100
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000828:	b480      	push	{r7}
 800082a:	b089      	sub	sp, #36	; 0x24
 800082c:	af00      	add	r7, sp, #0
 800082e:	60f8      	str	r0, [r7, #12]
 8000830:	60b9      	str	r1, [r7, #8]
 8000832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	f1c3 0307 	rsb	r3, r3, #7
 8000842:	2b04      	cmp	r3, #4
 8000844:	bf28      	it	cs
 8000846:	2304      	movcs	r3, #4
 8000848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	3304      	adds	r3, #4
 800084e:	2b06      	cmp	r3, #6
 8000850:	d902      	bls.n	8000858 <NVIC_EncodePriority+0x30>
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3b03      	subs	r3, #3
 8000856:	e000      	b.n	800085a <NVIC_EncodePriority+0x32>
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800085c:	f04f 32ff 	mov.w	r2, #4294967295
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43da      	mvns	r2, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	401a      	ands	r2, r3
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000870:	f04f 31ff 	mov.w	r1, #4294967295
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	fa01 f303 	lsl.w	r3, r1, r3
 800087a:	43d9      	mvns	r1, r3
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	4313      	orrs	r3, r2
         );
}
 8000882:	4618      	mov	r0, r3
 8000884:	3724      	adds	r7, #36	; 0x24
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
	...

08000890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3b01      	subs	r3, #1
 800089c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a0:	d301      	bcc.n	80008a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00f      	b.n	80008c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008a6:	4a0a      	ldr	r2, [pc, #40]	; (80008d0 <SysTick_Config+0x40>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	3b01      	subs	r3, #1
 80008ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ae:	210f      	movs	r1, #15
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f7ff ff8e 	bl	80007d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b8:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <SysTick_Config+0x40>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008be:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <SysTick_Config+0x40>)
 80008c0:	2207      	movs	r2, #7
 80008c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	e000e010 	.word	0xe000e010

080008d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008dc:	6878      	ldr	r0, [r7, #4]
 80008de:	f7ff ff47 	bl	8000770 <__NVIC_SetPriorityGrouping>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	4603      	mov	r3, r0
 80008f2:	60b9      	str	r1, [r7, #8]
 80008f4:	607a      	str	r2, [r7, #4]
 80008f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008f8:	f7ff ff5e 	bl	80007b8 <__NVIC_GetPriorityGrouping>
 80008fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	68b9      	ldr	r1, [r7, #8]
 8000902:	6978      	ldr	r0, [r7, #20]
 8000904:	f7ff ff90 	bl	8000828 <NVIC_EncodePriority>
 8000908:	4602      	mov	r2, r0
 800090a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff ff5f 	bl	80007d4 <__NVIC_SetPriority>
}
 8000916:	bf00      	nop
 8000918:	3718      	adds	r7, #24
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f7ff ffb2 	bl	8000890 <SysTick_Config>
 800092c:	4603      	mov	r3, r0
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000938:	b480      	push	{r7}
 800093a:	b089      	sub	sp, #36	; 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000946:	4b89      	ldr	r3, [pc, #548]	; (8000b6c <HAL_GPIO_Init+0x234>)
 8000948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800094a:	e194      	b.n	8000c76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	2101      	movs	r1, #1
 8000952:	69fb      	ldr	r3, [r7, #28]
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	4013      	ands	r3, r2
 800095a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 8186 	beq.w	8000c70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d00b      	beq.n	8000984 <HAL_GPIO_Init+0x4c>
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d007      	beq.n	8000984 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000978:	2b11      	cmp	r3, #17
 800097a:	d003      	beq.n	8000984 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	2b12      	cmp	r3, #18
 8000982:	d130      	bne.n	80009e6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	2203      	movs	r2, #3
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	4013      	ands	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	68da      	ldr	r2, [r3, #12]
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	69ba      	ldr	r2, [r7, #24]
 80009b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009ba:	2201      	movs	r2, #1
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4013      	ands	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	091b      	lsrs	r3, r3, #4
 80009d0:	f003 0201 	and.w	r2, r3, #1
 80009d4:	69fb      	ldr	r3, [r7, #28]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	4313      	orrs	r3, r2
 80009de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	69ba      	ldr	r2, [r7, #24]
 80009e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	2203      	movs	r2, #3
 80009f2:	fa02 f303 	lsl.w	r3, r2, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	4013      	ands	r3, r2
 80009fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	69ba      	ldr	r2, [r7, #24]
 8000a14:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	685b      	ldr	r3, [r3, #4]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d003      	beq.n	8000a26 <HAL_GPIO_Init+0xee>
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	2b12      	cmp	r3, #18
 8000a24:	d123      	bne.n	8000a6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	08da      	lsrs	r2, r3, #3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3208      	adds	r2, #8
 8000a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	220f      	movs	r2, #15
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	691a      	ldr	r2, [r3, #16]
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	f003 0307 	and.w	r3, r3, #7
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	08da      	lsrs	r2, r3, #3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3208      	adds	r2, #8
 8000a68:	69b9      	ldr	r1, [r7, #24]
 8000a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	2203      	movs	r2, #3
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	69ba      	ldr	r2, [r7, #24]
 8000a82:	4013      	ands	r3, r2
 8000a84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f003 0203 	and.w	r2, r3, #3
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	69ba      	ldr	r2, [r7, #24]
 8000aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 80e0 	beq.w	8000c70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab0:	4b2f      	ldr	r3, [pc, #188]	; (8000b70 <HAL_GPIO_Init+0x238>)
 8000ab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ab6:	4a2e      	ldr	r2, [pc, #184]	; (8000b70 <HAL_GPIO_Init+0x238>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ac0:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <HAL_GPIO_Init+0x238>)
 8000ac2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ace:	4a29      	ldr	r2, [pc, #164]	; (8000b74 <HAL_GPIO_Init+0x23c>)
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	089b      	lsrs	r3, r3, #2
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	f003 0303 	and.w	r3, r3, #3
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	220f      	movs	r2, #15
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43db      	mvns	r3, r3
 8000aec:	69ba      	ldr	r2, [r7, #24]
 8000aee:	4013      	ands	r3, r2
 8000af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a20      	ldr	r2, [pc, #128]	; (8000b78 <HAL_GPIO_Init+0x240>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d052      	beq.n	8000ba0 <HAL_GPIO_Init+0x268>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a1f      	ldr	r2, [pc, #124]	; (8000b7c <HAL_GPIO_Init+0x244>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d031      	beq.n	8000b66 <HAL_GPIO_Init+0x22e>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a1e      	ldr	r2, [pc, #120]	; (8000b80 <HAL_GPIO_Init+0x248>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d02b      	beq.n	8000b62 <HAL_GPIO_Init+0x22a>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4a1d      	ldr	r2, [pc, #116]	; (8000b84 <HAL_GPIO_Init+0x24c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d025      	beq.n	8000b5e <HAL_GPIO_Init+0x226>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a1c      	ldr	r2, [pc, #112]	; (8000b88 <HAL_GPIO_Init+0x250>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d01f      	beq.n	8000b5a <HAL_GPIO_Init+0x222>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a1b      	ldr	r2, [pc, #108]	; (8000b8c <HAL_GPIO_Init+0x254>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d019      	beq.n	8000b56 <HAL_GPIO_Init+0x21e>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a1a      	ldr	r2, [pc, #104]	; (8000b90 <HAL_GPIO_Init+0x258>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d013      	beq.n	8000b52 <HAL_GPIO_Init+0x21a>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	; (8000b94 <HAL_GPIO_Init+0x25c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d00d      	beq.n	8000b4e <HAL_GPIO_Init+0x216>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a18      	ldr	r2, [pc, #96]	; (8000b98 <HAL_GPIO_Init+0x260>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d007      	beq.n	8000b4a <HAL_GPIO_Init+0x212>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_GPIO_Init+0x264>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d101      	bne.n	8000b46 <HAL_GPIO_Init+0x20e>
 8000b42:	2309      	movs	r3, #9
 8000b44:	e02d      	b.n	8000ba2 <HAL_GPIO_Init+0x26a>
 8000b46:	230a      	movs	r3, #10
 8000b48:	e02b      	b.n	8000ba2 <HAL_GPIO_Init+0x26a>
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	e029      	b.n	8000ba2 <HAL_GPIO_Init+0x26a>
 8000b4e:	2307      	movs	r3, #7
 8000b50:	e027      	b.n	8000ba2 <HAL_GPIO_Init+0x26a>
 8000b52:	2306      	movs	r3, #6
 8000b54:	e025      	b.n	8000ba2 <HAL_GPIO_Init+0x26a>
 8000b56:	2305      	movs	r3, #5
 8000b58:	e023      	b.n	8000ba2 <HAL_GPIO_Init+0x26a>
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	e021      	b.n	8000ba2 <HAL_GPIO_Init+0x26a>
 8000b5e:	2303      	movs	r3, #3
 8000b60:	e01f      	b.n	8000ba2 <HAL_GPIO_Init+0x26a>
 8000b62:	2302      	movs	r3, #2
 8000b64:	e01d      	b.n	8000ba2 <HAL_GPIO_Init+0x26a>
 8000b66:	2301      	movs	r3, #1
 8000b68:	e01b      	b.n	8000ba2 <HAL_GPIO_Init+0x26a>
 8000b6a:	bf00      	nop
 8000b6c:	58000080 	.word	0x58000080
 8000b70:	58024400 	.word	0x58024400
 8000b74:	58000400 	.word	0x58000400
 8000b78:	58020000 	.word	0x58020000
 8000b7c:	58020400 	.word	0x58020400
 8000b80:	58020800 	.word	0x58020800
 8000b84:	58020c00 	.word	0x58020c00
 8000b88:	58021000 	.word	0x58021000
 8000b8c:	58021400 	.word	0x58021400
 8000b90:	58021800 	.word	0x58021800
 8000b94:	58021c00 	.word	0x58021c00
 8000b98:	58022000 	.word	0x58022000
 8000b9c:	58022400 	.word	0x58022400
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	69fa      	ldr	r2, [r7, #28]
 8000ba4:	f002 0203 	and.w	r2, r2, #3
 8000ba8:	0092      	lsls	r2, r2, #2
 8000baa:	4093      	lsls	r3, r2
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bb2:	4938      	ldr	r1, [pc, #224]	; (8000c94 <HAL_GPIO_Init+0x35c>)
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	089b      	lsrs	r3, r3, #2
 8000bb8:	3302      	adds	r3, #2
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	43db      	mvns	r3, r3
 8000bca:	69ba      	ldr	r2, [r7, #24]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000bdc:	69ba      	ldr	r2, [r7, #24]
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	4313      	orrs	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	69ba      	ldr	r2, [r7, #24]
 8000be8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	4013      	ands	r3, r2
 8000c24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000c68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	3301      	adds	r3, #1
 8000c74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f47f ae63 	bne.w	800094c <HAL_GPIO_Init+0x14>
  }
}
 8000c86:	bf00      	nop
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	58000400 	.word	0x58000400

08000c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ca8:	787b      	ldrb	r3, [r7, #1]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cae:	887a      	ldrh	r2, [r7, #2]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000cb4:	e003      	b.n	8000cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	041a      	lsls	r2, r3, #16
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	619a      	str	r2, [r3, #24]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	695a      	ldr	r2, [r3, #20]
 8000cda:	887b      	ldrh	r3, [r7, #2]
 8000cdc:	401a      	ands	r2, r3
 8000cde:	887b      	ldrh	r3, [r7, #2]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d104      	bne.n	8000cee <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ce4:	887b      	ldrh	r3, [r7, #2]
 8000ce6:	041a      	lsls	r2, r3, #16
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000cec:	e002      	b.n	8000cf4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000cee:	887a      	ldrh	r2, [r7, #2]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	619a      	str	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <HAL_PWREx_ConfigSupply+0x70>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	f003 0304 	and.w	r3, r3, #4
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d00a      	beq.n	8000d2a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_PWREx_ConfigSupply+0x70>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	f003 0307 	and.w	r3, r3, #7
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d001      	beq.n	8000d26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e01f      	b.n	8000d66 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	e01d      	b.n	8000d66 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_PWREx_ConfigSupply+0x70>)
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	f023 0207 	bic.w	r2, r3, #7
 8000d32:	490f      	ldr	r1, [pc, #60]	; (8000d70 <HAL_PWREx_ConfigSupply+0x70>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000d3a:	f7ff fcdf 	bl	80006fc <HAL_GetTick>
 8000d3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000d40:	e009      	b.n	8000d56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000d42:	f7ff fcdb 	bl	80006fc <HAL_GetTick>
 8000d46:	4602      	mov	r2, r0
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d50:	d901      	bls.n	8000d56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e007      	b.n	8000d66 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_PWREx_ConfigSupply+0x70>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d62:	d1ee      	bne.n	8000d42 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	58024800 	.word	0x58024800

08000d74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e3c4      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 8087 	beq.w	8000ea2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d94:	4ba2      	ldr	r3, [pc, #648]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000d96:	691b      	ldr	r3, [r3, #16]
 8000d98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000d9e:	4ba0      	ldr	r3, [pc, #640]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da6:	2b10      	cmp	r3, #16
 8000da8:	d007      	beq.n	8000dba <HAL_RCC_OscConfig+0x46>
 8000daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dac:	2b18      	cmp	r3, #24
 8000dae:	d110      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x5e>
 8000db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d10b      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dba:	4b99      	ldr	r3, [pc, #612]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d06c      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x12c>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d168      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e39e      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dda:	d106      	bne.n	8000dea <HAL_RCC_OscConfig+0x76>
 8000ddc:	4b90      	ldr	r3, [pc, #576]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a8f      	ldr	r2, [pc, #572]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de6:	6013      	str	r3, [r2, #0]
 8000de8:	e02e      	b.n	8000e48 <HAL_RCC_OscConfig+0xd4>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10c      	bne.n	8000e0c <HAL_RCC_OscConfig+0x98>
 8000df2:	4b8b      	ldr	r3, [pc, #556]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a8a      	ldr	r2, [pc, #552]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000df8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	4b88      	ldr	r3, [pc, #544]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a87      	ldr	r2, [pc, #540]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000e04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	e01d      	b.n	8000e48 <HAL_RCC_OscConfig+0xd4>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e14:	d10c      	bne.n	8000e30 <HAL_RCC_OscConfig+0xbc>
 8000e16:	4b82      	ldr	r3, [pc, #520]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a81      	ldr	r2, [pc, #516]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	4b7f      	ldr	r3, [pc, #508]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a7e      	ldr	r2, [pc, #504]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	e00b      	b.n	8000e48 <HAL_RCC_OscConfig+0xd4>
 8000e30:	4b7b      	ldr	r3, [pc, #492]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a7a      	ldr	r2, [pc, #488]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e3a:	6013      	str	r3, [r2, #0]
 8000e3c:	4b78      	ldr	r3, [pc, #480]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a77      	ldr	r2, [pc, #476]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d013      	beq.n	8000e78 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e50:	f7ff fc54 	bl	80006fc <HAL_GetTick>
 8000e54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e56:	e008      	b.n	8000e6a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e58:	f7ff fc50 	bl	80006fc <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b64      	cmp	r3, #100	; 0x64
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e352      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e6a:	4b6d      	ldr	r3, [pc, #436]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f0      	beq.n	8000e58 <HAL_RCC_OscConfig+0xe4>
 8000e76:	e014      	b.n	8000ea2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e78:	f7ff fc40 	bl	80006fc <HAL_GetTick>
 8000e7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e80:	f7ff fc3c 	bl	80006fc <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b64      	cmp	r3, #100	; 0x64
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e33e      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e92:	4b63      	ldr	r3, [pc, #396]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1f0      	bne.n	8000e80 <HAL_RCC_OscConfig+0x10c>
 8000e9e:	e000      	b.n	8000ea2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 8092 	beq.w	8000fd4 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eb0:	4b5b      	ldr	r3, [pc, #364]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000eb8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000eba:	4b59      	ldr	r3, [pc, #356]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d007      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x162>
 8000ec6:	6a3b      	ldr	r3, [r7, #32]
 8000ec8:	2b18      	cmp	r3, #24
 8000eca:	d12d      	bne.n	8000f28 <HAL_RCC_OscConfig+0x1b4>
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d128      	bne.n	8000f28 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ed6:	4b52      	ldr	r3, [pc, #328]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d005      	beq.n	8000eee <HAL_RCC_OscConfig+0x17a>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e310      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eee:	f7ff fc33 	bl	8000758 <HAL_GetREVID>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	f241 0303 	movw	r3, #4099	; 0x1003
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d80a      	bhi.n	8000f12 <HAL_RCC_OscConfig+0x19e>
 8000efc:	4b48      	ldr	r3, [pc, #288]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	691b      	ldr	r3, [r3, #16]
 8000f08:	031b      	lsls	r3, r3, #12
 8000f0a:	4945      	ldr	r1, [pc, #276]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f10:	e060      	b.n	8000fd4 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f12:	4b43      	ldr	r3, [pc, #268]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	691b      	ldr	r3, [r3, #16]
 8000f1e:	061b      	lsls	r3, r3, #24
 8000f20:	493f      	ldr	r1, [pc, #252]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000f22:	4313      	orrs	r3, r2
 8000f24:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f26:	e055      	b.n	8000fd4 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d038      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000f30:	4b3b      	ldr	r3, [pc, #236]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f023 0219 	bic.w	r2, r3, #25
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	4938      	ldr	r1, [pc, #224]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f42:	f7ff fbdb 	bl	80006fc <HAL_GetTick>
 8000f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f48:	e008      	b.n	8000f5c <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f4a:	f7ff fbd7 	bl	80006fc <HAL_GetTick>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d901      	bls.n	8000f5c <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	e2d9      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f5c:	4b30      	ldr	r3, [pc, #192]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d0f0      	beq.n	8000f4a <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f68:	f7ff fbf6 	bl	8000758 <HAL_GetREVID>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	f241 0303 	movw	r3, #4099	; 0x1003
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d80a      	bhi.n	8000f8c <HAL_RCC_OscConfig+0x218>
 8000f76:	4b2a      	ldr	r3, [pc, #168]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	031b      	lsls	r3, r3, #12
 8000f84:	4926      	ldr	r1, [pc, #152]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000f86:	4313      	orrs	r3, r2
 8000f88:	604b      	str	r3, [r1, #4]
 8000f8a:	e023      	b.n	8000fd4 <HAL_RCC_OscConfig+0x260>
 8000f8c:	4b24      	ldr	r3, [pc, #144]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	061b      	lsls	r3, r3, #24
 8000f9a:	4921      	ldr	r1, [pc, #132]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	604b      	str	r3, [r1, #4]
 8000fa0:	e018      	b.n	8000fd4 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a1e      	ldr	r2, [pc, #120]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000fa8:	f023 0301 	bic.w	r3, r3, #1
 8000fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fae:	f7ff fba5 	bl	80006fc <HAL_GetTick>
 8000fb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fb6:	f7ff fba1 	bl	80006fc <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e2a3      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f0      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0310 	and.w	r3, r3, #16
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 8091 	beq.w	8001104 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000fea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 8000fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	2b08      	cmp	r3, #8
 8000ff6:	d007      	beq.n	8001008 <HAL_RCC_OscConfig+0x294>
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	2b18      	cmp	r3, #24
 8000ffc:	d12f      	bne.n	800105e <HAL_RCC_OscConfig+0x2ea>
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b01      	cmp	r3, #1
 8001006:	d12a      	bne.n	800105e <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <HAL_RCC_OscConfig+0x2ac>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001010:	2b00      	cmp	r3, #0
 8001012:	d007      	beq.n	8001024 <HAL_RCC_OscConfig+0x2b0>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	2b80      	cmp	r3, #128	; 0x80
 800101a:	d003      	beq.n	8001024 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e277      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
 8001020:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001024:	f7ff fb98 	bl	8000758 <HAL_GetREVID>
 8001028:	4602      	mov	r2, r0
 800102a:	f241 0303 	movw	r3, #4099	; 0x1003
 800102e:	429a      	cmp	r2, r3
 8001030:	d80a      	bhi.n	8001048 <HAL_RCC_OscConfig+0x2d4>
 8001032:	4ba2      	ldr	r3, [pc, #648]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	069b      	lsls	r3, r3, #26
 8001040:	499e      	ldr	r1, [pc, #632]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001042:	4313      	orrs	r3, r2
 8001044:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001046:	e05d      	b.n	8001104 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001048:	4b9c      	ldr	r3, [pc, #624]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	061b      	lsls	r3, r3, #24
 8001056:	4999      	ldr	r1, [pc, #612]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001058:	4313      	orrs	r3, r2
 800105a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800105c:	e052      	b.n	8001104 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d035      	beq.n	80010d2 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001066:	4b95      	ldr	r3, [pc, #596]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a94      	ldr	r2, [pc, #592]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 800106c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001072:	f7ff fb43 	bl	80006fc <HAL_GetTick>
 8001076:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800107a:	f7ff fb3f 	bl	80006fc <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e241      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800108c:	4b8b      	ldr	r3, [pc, #556]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f0      	beq.n	800107a <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001098:	f7ff fb5e 	bl	8000758 <HAL_GetREVID>
 800109c:	4602      	mov	r2, r0
 800109e:	f241 0303 	movw	r3, #4099	; 0x1003
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d80a      	bhi.n	80010bc <HAL_RCC_OscConfig+0x348>
 80010a6:	4b85      	ldr	r3, [pc, #532]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	069b      	lsls	r3, r3, #26
 80010b4:	4981      	ldr	r1, [pc, #516]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	604b      	str	r3, [r1, #4]
 80010ba:	e023      	b.n	8001104 <HAL_RCC_OscConfig+0x390>
 80010bc:	4b7f      	ldr	r3, [pc, #508]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	061b      	lsls	r3, r3, #24
 80010ca:	497c      	ldr	r1, [pc, #496]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 80010cc:	4313      	orrs	r3, r2
 80010ce:	60cb      	str	r3, [r1, #12]
 80010d0:	e018      	b.n	8001104 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80010d2:	4b7a      	ldr	r3, [pc, #488]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a79      	ldr	r2, [pc, #484]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 80010d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010de:	f7ff fb0d 	bl	80006fc <HAL_GetTick>
 80010e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80010e6:	f7ff fb09 	bl	80006fc <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e20b      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80010f8:	4b70      	ldr	r3, [pc, #448]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f0      	bne.n	80010e6 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	2b00      	cmp	r3, #0
 800110e:	d036      	beq.n	800117e <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d019      	beq.n	800114c <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001118:	4b68      	ldr	r3, [pc, #416]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 800111a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800111c:	4a67      	ldr	r2, [pc, #412]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001124:	f7ff faea 	bl	80006fc <HAL_GetTick>
 8001128:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800112c:	f7ff fae6 	bl	80006fc <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e1e8      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800113e:	4b5f      	ldr	r3, [pc, #380]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0x3b8>
 800114a:	e018      	b.n	800117e <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800114c:	4b5b      	ldr	r3, [pc, #364]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 800114e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001150:	4a5a      	ldr	r2, [pc, #360]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001152:	f023 0301 	bic.w	r3, r3, #1
 8001156:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001158:	f7ff fad0 	bl	80006fc <HAL_GetTick>
 800115c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001160:	f7ff facc 	bl	80006fc <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e1ce      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001172:	4b52      	ldr	r3, [pc, #328]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f0      	bne.n	8001160 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0320 	and.w	r3, r3, #32
 8001186:	2b00      	cmp	r3, #0
 8001188:	d036      	beq.n	80011f8 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d019      	beq.n	80011c6 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001192:	4b4a      	ldr	r3, [pc, #296]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a49      	ldr	r2, [pc, #292]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001198:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800119c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800119e:	f7ff faad 	bl	80006fc <HAL_GetTick>
 80011a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80011a6:	f7ff faa9 	bl	80006fc <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e1ab      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80011b8:	4b40      	ldr	r3, [pc, #256]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x432>
 80011c4:	e018      	b.n	80011f8 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80011c6:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a3c      	ldr	r2, [pc, #240]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 80011cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fa93 	bl	80006fc <HAL_GetTick>
 80011d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80011da:	f7ff fa8f 	bl	80006fc <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e191      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80011ec:	4b33      	ldr	r3, [pc, #204]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d1f0      	bne.n	80011da <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	f000 8086 	beq.w	8001312 <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001206:	4b2e      	ldr	r3, [pc, #184]	; (80012c0 <HAL_RCC_OscConfig+0x54c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a2d      	ldr	r2, [pc, #180]	; (80012c0 <HAL_RCC_OscConfig+0x54c>)
 800120c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001210:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001212:	f7ff fa73 	bl	80006fc <HAL_GetTick>
 8001216:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800121a:	f7ff fa6f 	bl	80006fc <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b64      	cmp	r3, #100	; 0x64
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e171      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800122c:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <HAL_RCC_OscConfig+0x54c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d106      	bne.n	800124e <HAL_RCC_OscConfig+0x4da>
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001244:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6713      	str	r3, [r2, #112]	; 0x70
 800124c:	e02d      	b.n	80012aa <HAL_RCC_OscConfig+0x536>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0x4fc>
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125a:	4a18      	ldr	r2, [pc, #96]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	6713      	str	r3, [r2, #112]	; 0x70
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001266:	4a15      	ldr	r2, [pc, #84]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001268:	f023 0304 	bic.w	r3, r3, #4
 800126c:	6713      	str	r3, [r2, #112]	; 0x70
 800126e:	e01c      	b.n	80012aa <HAL_RCC_OscConfig+0x536>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	2b05      	cmp	r3, #5
 8001276:	d10c      	bne.n	8001292 <HAL_RCC_OscConfig+0x51e>
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 800127a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127c:	4a0f      	ldr	r2, [pc, #60]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	6713      	str	r3, [r2, #112]	; 0x70
 8001284:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001288:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6713      	str	r3, [r2, #112]	; 0x70
 8001290:	e00b      	b.n	80012aa <HAL_RCC_OscConfig+0x536>
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001296:	4a09      	ldr	r2, [pc, #36]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 8001298:	f023 0301 	bic.w	r3, r3, #1
 800129c:	6713      	str	r3, [r2, #112]	; 0x70
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 80012a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a2:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_RCC_OscConfig+0x548>)
 80012a4:	f023 0304 	bic.w	r3, r3, #4
 80012a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d01a      	beq.n	80012e8 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012b2:	f7ff fa23 	bl	80006fc <HAL_GetTick>
 80012b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012b8:	e00f      	b.n	80012da <HAL_RCC_OscConfig+0x566>
 80012ba:	bf00      	nop
 80012bc:	58024400 	.word	0x58024400
 80012c0:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c4:	f7ff fa1a 	bl	80006fc <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e11a      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80012da:	4b8f      	ldr	r3, [pc, #572]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 80012dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0ee      	beq.n	80012c4 <HAL_RCC_OscConfig+0x550>
 80012e6:	e014      	b.n	8001312 <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e8:	f7ff fa08 	bl	80006fc <HAL_GetTick>
 80012ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80012ee:	e00a      	b.n	8001306 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f0:	f7ff fa04 	bl	80006fc <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fe:	4293      	cmp	r3, r2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e104      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001306:	4b84      	ldr	r3, [pc, #528]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 8001308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1ee      	bne.n	80012f0 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 80f9 	beq.w	800150e <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800131c:	4b7e      	ldr	r3, [pc, #504]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001324:	2b18      	cmp	r3, #24
 8001326:	f000 80b4 	beq.w	8001492 <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132e:	2b02      	cmp	r3, #2
 8001330:	f040 8095 	bne.w	800145e <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001334:	4b78      	ldr	r3, [pc, #480]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a77      	ldr	r2, [pc, #476]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 800133a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800133e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff f9dc 	bl	80006fc <HAL_GetTick>
 8001344:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001348:	f7ff f9d8 	bl	80006fc <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e0da      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800135a:	4b6f      	ldr	r3, [pc, #444]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001366:	4b6c      	ldr	r3, [pc, #432]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 8001368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800136a:	4b6c      	ldr	r3, [pc, #432]	; (800151c <HAL_RCC_OscConfig+0x7a8>)
 800136c:	4013      	ands	r3, r2
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001376:	0112      	lsls	r2, r2, #4
 8001378:	430a      	orrs	r2, r1
 800137a:	4967      	ldr	r1, [pc, #412]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 800137c:	4313      	orrs	r3, r2
 800137e:	628b      	str	r3, [r1, #40]	; 0x28
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	3b01      	subs	r3, #1
 8001386:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138e:	3b01      	subs	r3, #1
 8001390:	025b      	lsls	r3, r3, #9
 8001392:	b29b      	uxth	r3, r3
 8001394:	431a      	orrs	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800139a:	3b01      	subs	r3, #1
 800139c:	041b      	lsls	r3, r3, #16
 800139e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013a8:	3b01      	subs	r3, #1
 80013aa:	061b      	lsls	r3, r3, #24
 80013ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80013b0:	4959      	ldr	r1, [pc, #356]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80013b6:	4b58      	ldr	r3, [pc, #352]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	4a57      	ldr	r2, [pc, #348]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80013c2:	4b55      	ldr	r3, [pc, #340]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 80013c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013c6:	4b56      	ldr	r3, [pc, #344]	; (8001520 <HAL_RCC_OscConfig+0x7ac>)
 80013c8:	4013      	ands	r3, r2
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80013ce:	00d2      	lsls	r2, r2, #3
 80013d0:	4951      	ldr	r1, [pc, #324]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80013d6:	4b50      	ldr	r3, [pc, #320]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	f023 020c 	bic.w	r2, r3, #12
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	494d      	ldr	r1, [pc, #308]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80013e8:	4b4b      	ldr	r3, [pc, #300]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 80013ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ec:	f023 0202 	bic.w	r2, r3, #2
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f4:	4948      	ldr	r1, [pc, #288]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80013fa:	4b47      	ldr	r3, [pc, #284]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 80013fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fe:	4a46      	ldr	r2, [pc, #280]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 8001400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001404:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001406:	4b44      	ldr	r3, [pc, #272]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 8001408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140a:	4a43      	ldr	r2, [pc, #268]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001412:	4b41      	ldr	r3, [pc, #260]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	4a40      	ldr	r2, [pc, #256]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 8001418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800141e:	4b3e      	ldr	r3, [pc, #248]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 8001420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001422:	4a3d      	ldr	r2, [pc, #244]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800142a:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a3a      	ldr	r2, [pc, #232]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 8001430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001436:	f7ff f961 	bl	80006fc <HAL_GetTick>
 800143a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143e:	f7ff f95d 	bl	80006fc <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e05f      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001450:	4b31      	ldr	r3, [pc, #196]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0f0      	beq.n	800143e <HAL_RCC_OscConfig+0x6ca>
 800145c:	e057      	b.n	800150e <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800145e:	4b2e      	ldr	r3, [pc, #184]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a2d      	ldr	r2, [pc, #180]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 8001464:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146a:	f7ff f947 	bl	80006fc <HAL_GetTick>
 800146e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001472:	f7ff f943 	bl	80006fc <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e045      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001484:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_RCC_OscConfig+0x6fe>
 8001490:	e03d      	b.n	800150e <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001492:	4b21      	ldr	r3, [pc, #132]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <HAL_RCC_OscConfig+0x7a4>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d031      	beq.n	800150a <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	f003 0203 	and.w	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d12a      	bne.n	800150a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d122      	bne.n	800150a <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d11a      	bne.n	800150a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	0a5b      	lsrs	r3, r3, #9
 80014d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d111      	bne.n	800150a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	0c1b      	lsrs	r3, r3, #16
 80014ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d108      	bne.n	800150a <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	0e1b      	lsrs	r3, r3, #24
 80014fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001504:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001506:	429a      	cmp	r2, r3
 8001508:	d001      	beq.n	800150e <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3730      	adds	r7, #48	; 0x30
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	58024400 	.word	0x58024400
 800151c:	fffffc0c 	.word	0xfffffc0c
 8001520:	ffff0007 	.word	0xffff0007

08001524 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e19c      	b.n	8001872 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001538:	4b8a      	ldr	r3, [pc, #552]	; (8001764 <HAL_RCC_ClockConfig+0x240>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 030f 	and.w	r3, r3, #15
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d910      	bls.n	8001568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001546:	4b87      	ldr	r3, [pc, #540]	; (8001764 <HAL_RCC_ClockConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 020f 	bic.w	r2, r3, #15
 800154e:	4985      	ldr	r1, [pc, #532]	; (8001764 <HAL_RCC_ClockConfig+0x240>)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001556:	4b83      	ldr	r3, [pc, #524]	; (8001764 <HAL_RCC_ClockConfig+0x240>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e184      	b.n	8001872 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d010      	beq.n	8001596 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	4b7b      	ldr	r3, [pc, #492]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001580:	429a      	cmp	r2, r3
 8001582:	d908      	bls.n	8001596 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001584:	4b78      	ldr	r3, [pc, #480]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	4975      	ldr	r1, [pc, #468]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 8001592:	4313      	orrs	r3, r2
 8001594:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d010      	beq.n	80015c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	4b70      	ldr	r3, [pc, #448]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d908      	bls.n	80015c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80015b2:	4b6d      	ldr	r3, [pc, #436]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	496a      	ldr	r1, [pc, #424]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0310 	and.w	r3, r3, #16
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d010      	beq.n	80015f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	699a      	ldr	r2, [r3, #24]
 80015d4:	4b64      	ldr	r3, [pc, #400]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80015dc:	429a      	cmp	r2, r3
 80015de:	d908      	bls.n	80015f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80015e0:	4b61      	ldr	r3, [pc, #388]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	495e      	ldr	r1, [pc, #376]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d010      	beq.n	8001620 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69da      	ldr	r2, [r3, #28]
 8001602:	4b59      	ldr	r3, [pc, #356]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800160a:	429a      	cmp	r2, r3
 800160c:	d908      	bls.n	8001620 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800160e:	4b56      	ldr	r3, [pc, #344]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4953      	ldr	r1, [pc, #332]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 800161c:	4313      	orrs	r3, r2
 800161e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d010      	beq.n	800164e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	4b4d      	ldr	r3, [pc, #308]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f003 030f 	and.w	r3, r3, #15
 8001638:	429a      	cmp	r2, r3
 800163a:	d908      	bls.n	800164e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800163c:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f023 020f 	bic.w	r2, r3, #15
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4947      	ldr	r1, [pc, #284]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 800164a:	4313      	orrs	r3, r2
 800164c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d055      	beq.n	8001706 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800165a:	4b43      	ldr	r3, [pc, #268]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4940      	ldr	r1, [pc, #256]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 8001668:	4313      	orrs	r3, r2
 800166a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d107      	bne.n	8001684 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d121      	bne.n	80016c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0f6      	b.n	8001872 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d107      	bne.n	800169c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800168c:	4b36      	ldr	r3, [pc, #216]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d115      	bne.n	80016c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e0ea      	b.n	8001872 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016a4:	4b30      	ldr	r3, [pc, #192]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d109      	bne.n	80016c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e0de      	b.n	8001872 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016b4:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d101      	bne.n	80016c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0d6      	b.n	8001872 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	f023 0207 	bic.w	r2, r3, #7
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4925      	ldr	r1, [pc, #148]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d6:	f7ff f811 	bl	80006fc <HAL_GetTick>
 80016da:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016dc:	e00a      	b.n	80016f4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016de:	f7ff f80d 	bl	80006fc <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e0be      	b.n	8001872 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	429a      	cmp	r2, r3
 8001704:	d1eb      	bne.n	80016de <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d010      	beq.n	8001734 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	429a      	cmp	r2, r3
 8001720:	d208      	bcs.n	8001734 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	f023 020f 	bic.w	r2, r3, #15
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	490e      	ldr	r1, [pc, #56]	; (8001768 <HAL_RCC_ClockConfig+0x244>)
 8001730:	4313      	orrs	r3, r2
 8001732:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_RCC_ClockConfig+0x240>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d214      	bcs.n	800176c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <HAL_RCC_ClockConfig+0x240>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 020f 	bic.w	r2, r3, #15
 800174a:	4906      	ldr	r1, [pc, #24]	; (8001764 <HAL_RCC_ClockConfig+0x240>)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <HAL_RCC_ClockConfig+0x240>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d005      	beq.n	800176c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e086      	b.n	8001872 <HAL_RCC_ClockConfig+0x34e>
 8001764:	52002000 	.word	0x52002000
 8001768:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d010      	beq.n	800179a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	4b3f      	ldr	r3, [pc, #252]	; (800187c <HAL_RCC_ClockConfig+0x358>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001784:	429a      	cmp	r2, r3
 8001786:	d208      	bcs.n	800179a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001788:	4b3c      	ldr	r3, [pc, #240]	; (800187c <HAL_RCC_ClockConfig+0x358>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	4939      	ldr	r1, [pc, #228]	; (800187c <HAL_RCC_ClockConfig+0x358>)
 8001796:	4313      	orrs	r3, r2
 8001798:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d010      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	4b34      	ldr	r3, [pc, #208]	; (800187c <HAL_RCC_ClockConfig+0x358>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d208      	bcs.n	80017c8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80017b6:	4b31      	ldr	r3, [pc, #196]	; (800187c <HAL_RCC_ClockConfig+0x358>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	492e      	ldr	r1, [pc, #184]	; (800187c <HAL_RCC_ClockConfig+0x358>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d010      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	4b28      	ldr	r3, [pc, #160]	; (800187c <HAL_RCC_ClockConfig+0x358>)
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d208      	bcs.n	80017f6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_RCC_ClockConfig+0x358>)
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4922      	ldr	r1, [pc, #136]	; (800187c <HAL_RCC_ClockConfig+0x358>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d010      	beq.n	8001824 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	4b1d      	ldr	r3, [pc, #116]	; (800187c <HAL_RCC_ClockConfig+0x358>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800180e:	429a      	cmp	r2, r3
 8001810:	d208      	bcs.n	8001824 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001812:	4b1a      	ldr	r3, [pc, #104]	; (800187c <HAL_RCC_ClockConfig+0x358>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	4917      	ldr	r1, [pc, #92]	; (800187c <HAL_RCC_ClockConfig+0x358>)
 8001820:	4313      	orrs	r3, r2
 8001822:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001824:	f000 f834 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 8001828:	4601      	mov	r1, r0
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <HAL_RCC_ClockConfig+0x358>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	0a1b      	lsrs	r3, r3, #8
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_RCC_ClockConfig+0x35c>)
 8001836:	5cd3      	ldrb	r3, [r2, r3]
 8001838:	f003 031f 	and.w	r3, r3, #31
 800183c:	fa21 f303 	lsr.w	r3, r1, r3
 8001840:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_RCC_ClockConfig+0x358>)
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <HAL_RCC_ClockConfig+0x35c>)
 800184c:	5cd3      	ldrb	r3, [r2, r3]
 800184e:	f003 031f 	and.w	r3, r3, #31
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	fa22 f303 	lsr.w	r3, r2, r3
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_RCC_ClockConfig+0x360>)
 800185a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800185c:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_RCC_ClockConfig+0x364>)
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <HAL_RCC_ClockConfig+0x368>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fefe 	bl	8000668 <HAL_InitTick>
 800186c:	4603      	mov	r3, r0
 800186e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	58024400 	.word	0x58024400
 8001880:	08001be4 	.word	0x08001be4
 8001884:	24000004 	.word	0x24000004
 8001888:	24000000 	.word	0x24000000
 800188c:	24000008 	.word	0x24000008

08001890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001896:	4baf      	ldr	r3, [pc, #700]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800189e:	2b18      	cmp	r3, #24
 80018a0:	f200 814e 	bhi.w	8001b40 <HAL_RCC_GetSysClockFreq+0x2b0>
 80018a4:	a201      	add	r2, pc, #4	; (adr r2, 80018ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80018a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018aa:	bf00      	nop
 80018ac:	08001911 	.word	0x08001911
 80018b0:	08001b41 	.word	0x08001b41
 80018b4:	08001b41 	.word	0x08001b41
 80018b8:	08001b41 	.word	0x08001b41
 80018bc:	08001b41 	.word	0x08001b41
 80018c0:	08001b41 	.word	0x08001b41
 80018c4:	08001b41 	.word	0x08001b41
 80018c8:	08001b41 	.word	0x08001b41
 80018cc:	08001937 	.word	0x08001937
 80018d0:	08001b41 	.word	0x08001b41
 80018d4:	08001b41 	.word	0x08001b41
 80018d8:	08001b41 	.word	0x08001b41
 80018dc:	08001b41 	.word	0x08001b41
 80018e0:	08001b41 	.word	0x08001b41
 80018e4:	08001b41 	.word	0x08001b41
 80018e8:	08001b41 	.word	0x08001b41
 80018ec:	0800193d 	.word	0x0800193d
 80018f0:	08001b41 	.word	0x08001b41
 80018f4:	08001b41 	.word	0x08001b41
 80018f8:	08001b41 	.word	0x08001b41
 80018fc:	08001b41 	.word	0x08001b41
 8001900:	08001b41 	.word	0x08001b41
 8001904:	08001b41 	.word	0x08001b41
 8001908:	08001b41 	.word	0x08001b41
 800190c:	08001943 	.word	0x08001943
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001910:	4b90      	ldr	r3, [pc, #576]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0320 	and.w	r3, r3, #32
 8001918:	2b00      	cmp	r3, #0
 800191a:	d009      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800191c:	4b8d      	ldr	r3, [pc, #564]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	08db      	lsrs	r3, r3, #3
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	4a8c      	ldr	r2, [pc, #560]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001928:	fa22 f303 	lsr.w	r3, r2, r3
 800192c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800192e:	e10a      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001930:	4b89      	ldr	r3, [pc, #548]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8001932:	61bb      	str	r3, [r7, #24]
    break;
 8001934:	e107      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001936:	4b89      	ldr	r3, [pc, #548]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001938:	61bb      	str	r3, [r7, #24]
    break;
 800193a:	e104      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800193c:	4b88      	ldr	r3, [pc, #544]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800193e:	61bb      	str	r3, [r7, #24]
    break;
 8001940:	e101      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001942:	4b84      	ldr	r3, [pc, #528]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800194c:	4b81      	ldr	r3, [pc, #516]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001956:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001958:	4b7e      	ldr	r3, [pc, #504]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001962:	4b7c      	ldr	r3, [pc, #496]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001966:	08db      	lsrs	r3, r3, #3
 8001968:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	ee07 3a90 	vmov	s15, r3
 8001976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800197a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80da 	beq.w	8001b3a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d05a      	beq.n	8001a42 <HAL_RCC_GetSysClockFreq+0x1b2>
 800198c:	2b01      	cmp	r3, #1
 800198e:	d302      	bcc.n	8001996 <HAL_RCC_GetSysClockFreq+0x106>
 8001990:	2b02      	cmp	r3, #2
 8001992:	d078      	beq.n	8001a86 <HAL_RCC_GetSysClockFreq+0x1f6>
 8001994:	e099      	b.n	8001aca <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001996:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d02d      	beq.n	80019fe <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80019a2:	4b6c      	ldr	r3, [pc, #432]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	08db      	lsrs	r3, r3, #3
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	4a6a      	ldr	r2, [pc, #424]	; (8001b58 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80019ae:	fa22 f303 	lsr.w	r3, r2, r3
 80019b2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	ee07 3a90 	vmov	s15, r3
 80019ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019cc:	4b61      	ldr	r3, [pc, #388]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019dc:	ed97 6a02 	vldr	s12, [r7, #8]
 80019e0:	eddf 5a60 	vldr	s11, [pc, #384]	; 8001b64 <HAL_RCC_GetSysClockFreq+0x2d4>
 80019e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80019e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80019ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80019fc:	e087      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a08:	eddf 6a57 	vldr	s13, [pc, #348]	; 8001b68 <HAL_RCC_GetSysClockFreq+0x2d8>
 8001a0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a10:	4b50      	ldr	r3, [pc, #320]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a20:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a24:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8001b64 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001a28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001a40:	e065      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a4c:	eddf 6a47 	vldr	s13, [pc, #284]	; 8001b6c <HAL_RCC_GetSysClockFreq+0x2dc>
 8001a50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a54:	4b3f      	ldr	r3, [pc, #252]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a5c:	ee07 3a90 	vmov	s15, r3
 8001a60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a64:	ed97 6a02 	vldr	s12, [r7, #8]
 8001a68:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8001b64 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001a6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001a84:	e043      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a90:	eddf 6a37 	vldr	s13, [pc, #220]	; 8001b70 <HAL_RCC_GetSysClockFreq+0x2e0>
 8001a94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a98:	4b2e      	ldr	r3, [pc, #184]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001aa8:	ed97 6a02 	vldr	s12, [r7, #8]
 8001aac:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8001b64 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001ab0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ab8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001abc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ac8:	e021      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad4:	eddf 6a25 	vldr	s13, [pc, #148]	; 8001b6c <HAL_RCC_GetSysClockFreq+0x2dc>
 8001ad8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001adc:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001aec:	ed97 6a02 	vldr	s12, [r7, #8]
 8001af0:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001b64 <HAL_RCC_GetSysClockFreq+0x2d4>
 8001af4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001af8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001afc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001b0c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	0a5b      	lsrs	r3, r3, #9
 8001b14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b18:	3301      	adds	r3, #1
 8001b1a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b26:	edd7 6a07 	vldr	s13, [r7, #28]
 8001b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b32:	ee17 3a90 	vmov	r3, s15
 8001b36:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001b38:	e005      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
    break;
 8001b3e:	e002      	b.n	8001b46 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x2cc>)
 8001b42:	61bb      	str	r3, [r7, #24]
    break;
 8001b44:	bf00      	nop
  }

  return sysclockfreq;
 8001b46:	69bb      	ldr	r3, [r7, #24]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3724      	adds	r7, #36	; 0x24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	58024400 	.word	0x58024400
 8001b58:	03d09000 	.word	0x03d09000
 8001b5c:	003d0900 	.word	0x003d0900
 8001b60:	017d7840 	.word	0x017d7840
 8001b64:	46000000 	.word	0x46000000
 8001b68:	4c742400 	.word	0x4c742400
 8001b6c:	4a742400 	.word	0x4a742400
 8001b70:	4bbebc20 	.word	0x4bbebc20

08001b74 <__libc_init_array>:
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	4e0d      	ldr	r6, [pc, #52]	; (8001bac <__libc_init_array+0x38>)
 8001b78:	4c0d      	ldr	r4, [pc, #52]	; (8001bb0 <__libc_init_array+0x3c>)
 8001b7a:	1ba4      	subs	r4, r4, r6
 8001b7c:	10a4      	asrs	r4, r4, #2
 8001b7e:	2500      	movs	r5, #0
 8001b80:	42a5      	cmp	r5, r4
 8001b82:	d109      	bne.n	8001b98 <__libc_init_array+0x24>
 8001b84:	4e0b      	ldr	r6, [pc, #44]	; (8001bb4 <__libc_init_array+0x40>)
 8001b86:	4c0c      	ldr	r4, [pc, #48]	; (8001bb8 <__libc_init_array+0x44>)
 8001b88:	f000 f820 	bl	8001bcc <_init>
 8001b8c:	1ba4      	subs	r4, r4, r6
 8001b8e:	10a4      	asrs	r4, r4, #2
 8001b90:	2500      	movs	r5, #0
 8001b92:	42a5      	cmp	r5, r4
 8001b94:	d105      	bne.n	8001ba2 <__libc_init_array+0x2e>
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
 8001b98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b9c:	4798      	blx	r3
 8001b9e:	3501      	adds	r5, #1
 8001ba0:	e7ee      	b.n	8001b80 <__libc_init_array+0xc>
 8001ba2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ba6:	4798      	blx	r3
 8001ba8:	3501      	adds	r5, #1
 8001baa:	e7f2      	b.n	8001b92 <__libc_init_array+0x1e>
 8001bac:	08001bf4 	.word	0x08001bf4
 8001bb0:	08001bf4 	.word	0x08001bf4
 8001bb4:	08001bf4 	.word	0x08001bf4
 8001bb8:	08001bf8 	.word	0x08001bf8

08001bbc <memset>:
 8001bbc:	4402      	add	r2, r0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d100      	bne.n	8001bc6 <memset+0xa>
 8001bc4:	4770      	bx	lr
 8001bc6:	f803 1b01 	strb.w	r1, [r3], #1
 8001bca:	e7f9      	b.n	8001bc0 <memset+0x4>

08001bcc <_init>:
 8001bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bce:	bf00      	nop
 8001bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bd2:	bc08      	pop	{r3}
 8001bd4:	469e      	mov	lr, r3
 8001bd6:	4770      	bx	lr

08001bd8 <_fini>:
 8001bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bda:	bf00      	nop
 8001bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bde:	bc08      	pop	{r3}
 8001be0:	469e      	mov	lr, r3
 8001be2:	4770      	bx	lr
