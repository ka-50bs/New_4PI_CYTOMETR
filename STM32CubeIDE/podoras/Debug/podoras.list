
podoras.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000224  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000330  08000330  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000330  08000330  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000330  08000330  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000330  08000330  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000330  08000330  00010330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000334  08000334  00010334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000338  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800033c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800033c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000100d  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004ef  00000000  00000000  0002103a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c8  00000000  00000000  00021530  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000180  00000000  00000000  000216f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011d2e  00000000  00000000  00021878  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001b0e  00000000  00000000  000335a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006322a  00000000  00000000  000350b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000982de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000550  00000000  00000000  0009835c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000318 	.word	0x08000318

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000318 	.word	0x08000318

0800014c <PortInit>:
#include "stm32f1xx.h"

void PortInit(void)
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN; //Включаем тактирование порта GPIOB
 8000150:	4b0a      	ldr	r3, [pc, #40]	; (800017c <PortInit+0x30>)
 8000152:	699b      	ldr	r3, [r3, #24]
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <PortInit+0x30>)
 8000156:	f043 0308 	orr.w	r3, r3, #8
 800015a:	6193      	str	r3, [r2, #24]

  GPIOB->CRH &= ~(GPIO_CRH_MODE12 | GPIO_CRH_CNF12); //для начала все сбрасываем в ноль
 800015c:	4b08      	ldr	r3, [pc, #32]	; (8000180 <PortInit+0x34>)
 800015e:	685b      	ldr	r3, [r3, #4]
 8000160:	4a07      	ldr	r2, [pc, #28]	; (8000180 <PortInit+0x34>)
 8000162:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8000166:	6053      	str	r3, [r2, #4]

  //MODE: выход с максимальной частотой 2 МГц
  //CNF: режим push-pull
  GPIOB->CRH |= (GPIO_CRH_MODE12) | (0x00 << GPIO_CRH_CNF12_Pos);
 8000168:	4b05      	ldr	r3, [pc, #20]	; (8000180 <PortInit+0x34>)
 800016a:	685b      	ldr	r3, [r3, #4]
 800016c:	4a04      	ldr	r2, [pc, #16]	; (8000180 <PortInit+0x34>)
 800016e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000172:	6053      	str	r3, [r2, #4]
}
 8000174:	bf00      	nop
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr
 800017c:	40021000 	.word	0x40021000
 8000180:	40010c00 	.word	0x40010c00

08000184 <main>:
  //GPIOB->ODR &= ~GPIO_ODR_ODR12;
	GPIOB->BRR = (1 << 12);
}

void main()
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
  int i;
  PortInit();
 8000188:	f7ff ffe0 	bl	800014c <PortInit>

  for(;;)
  {
	  GPIOB->BSRR = GPIO_BSRR_BS12;
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <main+0x1c>)
 800018e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000192:	611a      	str	r2, [r3, #16]
	  GPIOB->BRR = GPIO_BSRR_BS12;
 8000194:	4b02      	ldr	r3, [pc, #8]	; (80001a0 <main+0x1c>)
 8000196:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800019a:	615a      	str	r2, [r3, #20]
	  GPIOB->BSRR = GPIO_BSRR_BS12;
 800019c:	e7f6      	b.n	800018c <main+0x8>
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001a4:	b480      	push	{r7}
 80001a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80001a8:	bf00      	nop
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr

080001b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001b4:	e7fe      	b.n	80001b4 <HardFault_Handler+0x4>

080001b6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001b6:	b480      	push	{r7}
 80001b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001ba:	e7fe      	b.n	80001ba <MemManage_Handler+0x4>

080001bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001c0:	e7fe      	b.n	80001c0 <BusFault_Handler+0x4>

080001c2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001c2:	b480      	push	{r7}
 80001c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001c6:	e7fe      	b.n	80001c6 <UsageFault_Handler+0x4>

080001c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80001cc:	bf00      	nop
 80001ce:	46bd      	mov	sp, r7
 80001d0:	bc80      	pop	{r7}
 80001d2:	4770      	bx	lr

080001d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr

080001e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80001e4:	bf00      	nop
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001f0:	f000 f85c 	bl	80002ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80001fc:	4b15      	ldr	r3, [pc, #84]	; (8000254 <SystemInit+0x5c>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a14      	ldr	r2, [pc, #80]	; (8000254 <SystemInit+0x5c>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000208:	4b12      	ldr	r3, [pc, #72]	; (8000254 <SystemInit+0x5c>)
 800020a:	685a      	ldr	r2, [r3, #4]
 800020c:	4911      	ldr	r1, [pc, #68]	; (8000254 <SystemInit+0x5c>)
 800020e:	4b12      	ldr	r3, [pc, #72]	; (8000258 <SystemInit+0x60>)
 8000210:	4013      	ands	r3, r2
 8000212:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000214:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <SystemInit+0x5c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a0e      	ldr	r2, [pc, #56]	; (8000254 <SystemInit+0x5c>)
 800021a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800021e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000222:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000224:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <SystemInit+0x5c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a0a      	ldr	r2, [pc, #40]	; (8000254 <SystemInit+0x5c>)
 800022a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800022e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000230:	4b08      	ldr	r3, [pc, #32]	; (8000254 <SystemInit+0x5c>)
 8000232:	685b      	ldr	r3, [r3, #4]
 8000234:	4a07      	ldr	r2, [pc, #28]	; (8000254 <SystemInit+0x5c>)
 8000236:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800023a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800023c:	4b05      	ldr	r3, [pc, #20]	; (8000254 <SystemInit+0x5c>)
 800023e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000242:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <SystemInit+0x64>)
 8000246:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800024a:	609a      	str	r2, [r3, #8]
#endif 
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	40021000 	.word	0x40021000
 8000258:	f8ff0000 	.word	0xf8ff0000
 800025c:	e000ed00 	.word	0xe000ed00

08000260 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000260:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000262:	e003      	b.n	800026c <LoopCopyDataInit>

08000264 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000264:	4b0b      	ldr	r3, [pc, #44]	; (8000294 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000266:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000268:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800026a:	3104      	adds	r1, #4

0800026c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800026c:	480a      	ldr	r0, [pc, #40]	; (8000298 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800026e:	4b0b      	ldr	r3, [pc, #44]	; (800029c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000270:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000272:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000274:	d3f6      	bcc.n	8000264 <CopyDataInit>
  ldr r2, =_sbss
 8000276:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000278:	e002      	b.n	8000280 <LoopFillZerobss>

0800027a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800027c:	f842 3b04 	str.w	r3, [r2], #4

08000280 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000282:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000284:	d3f9      	bcc.n	800027a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000286:	f7ff ffb7 	bl	80001f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800028a:	f000 f821 	bl	80002d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028e:	f7ff ff79 	bl	8000184 <main>
  bx lr
 8000292:	4770      	bx	lr
  ldr r3, =_sidata
 8000294:	08000338 	.word	0x08000338
  ldr r0, =_sdata
 8000298:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800029c:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80002a0:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80002a4:	20000024 	.word	0x20000024

080002a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a8:	e7fe      	b.n	80002a8 <ADC1_2_IRQHandler>
	...

080002ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <HAL_IncTick+0x1c>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	461a      	mov	r2, r3
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <HAL_IncTick+0x20>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4413      	add	r3, r2
 80002bc:	4a03      	ldr	r2, [pc, #12]	; (80002cc <HAL_IncTick+0x20>)
 80002be:	6013      	str	r3, [r2, #0]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	20000000 	.word	0x20000000
 80002cc:	20000020 	.word	0x20000020

080002d0 <__libc_init_array>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	2500      	movs	r5, #0
 80002d4:	4e0c      	ldr	r6, [pc, #48]	; (8000308 <__libc_init_array+0x38>)
 80002d6:	4c0d      	ldr	r4, [pc, #52]	; (800030c <__libc_init_array+0x3c>)
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	10a4      	asrs	r4, r4, #2
 80002dc:	42a5      	cmp	r5, r4
 80002de:	d109      	bne.n	80002f4 <__libc_init_array+0x24>
 80002e0:	f000 f81a 	bl	8000318 <_init>
 80002e4:	2500      	movs	r5, #0
 80002e6:	4e0a      	ldr	r6, [pc, #40]	; (8000310 <__libc_init_array+0x40>)
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <__libc_init_array+0x44>)
 80002ea:	1ba4      	subs	r4, r4, r6
 80002ec:	10a4      	asrs	r4, r4, #2
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d105      	bne.n	80002fe <__libc_init_array+0x2e>
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002f8:	4798      	blx	r3
 80002fa:	3501      	adds	r5, #1
 80002fc:	e7ee      	b.n	80002dc <__libc_init_array+0xc>
 80002fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000302:	4798      	blx	r3
 8000304:	3501      	adds	r5, #1
 8000306:	e7f2      	b.n	80002ee <__libc_init_array+0x1e>
 8000308:	08000330 	.word	0x08000330
 800030c:	08000330 	.word	0x08000330
 8000310:	08000330 	.word	0x08000330
 8000314:	08000334 	.word	0x08000334

08000318 <_init>:
 8000318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031a:	bf00      	nop
 800031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031e:	bc08      	pop	{r3}
 8000320:	469e      	mov	lr, r3
 8000322:	4770      	bx	lr

08000324 <_fini>:
 8000324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000326:	bf00      	nop
 8000328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032a:	bc08      	pop	{r3}
 800032c:	469e      	mov	lr, r3
 800032e:	4770      	bx	lr
